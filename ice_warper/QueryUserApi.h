// **********************************************************************
//
// Copyright (c) 2003-2016 ZeroC, Inc. All rights reserved.
//
// This copy of Ice is licensed to you under the terms described in the
// ICE_LICENSE file included in this distribution.
//
// **********************************************************************
//
// Ice version 3.6.3
//
// <auto-generated>
//
// Generated from file `QueryUserApi.ice'
//
// Warning: do not edit this file.
//
// </auto-generated>
//

#ifndef __QueryUserApi_h__
#define __QueryUserApi_h__

#include <IceUtil/PushDisableWarnings.h>
#include <Ice/ProxyF.h>
#include <Ice/ObjectF.h>
#include <Ice/Exception.h>
#include <Ice/LocalObject.h>
#include <Ice/StreamHelpers.h>
#include <Ice/Proxy.h>
#include <Ice/GCObject.h>
#include <Ice/AsyncResult.h>
#include <Ice/Incoming.h>
#include <Ice/IncomingAsync.h>
#include <Ice/FactoryTableInit.h>
#include <IceUtil/ScopedArray.h>
#include <IceUtil/Optional.h>
#include <Ice/StreamF.h>
#include <IceUtil/UndefSysMacros.h>

#ifndef ICE_IGNORE_VERSION
#   if ICE_INT_VERSION / 100 != 306
#       error Ice version mismatch!
#   endif
#   if ICE_INT_VERSION % 100 > 50
#       error Beta header file detected
#   endif
#   if ICE_INT_VERSION % 100 < 3
#       error Ice patch level mismatch!
#   endif
#endif

namespace IceProxy
{

namespace QueryUserApi
{

class QueryUserI;
void __read(::IceInternal::BasicStream*, ::IceInternal::ProxyHandle< ::IceProxy::QueryUserApi::QueryUserI>&);
::IceProxy::Ice::Object* upCast(::IceProxy::QueryUserApi::QueryUserI*);

}

}

namespace QueryUserApi
{

class QueryUserI;
::Ice::Object* upCast(::QueryUserApi::QueryUserI*);
typedef ::IceInternal::Handle< ::QueryUserApi::QueryUserI> QueryUserIPtr;
typedef ::IceInternal::ProxyHandle< ::IceProxy::QueryUserApi::QueryUserI> QueryUserIPrx;
void __patch(QueryUserIPtr&, const ::Ice::ObjectPtr&);

}

namespace QueryUserApi
{

class RequestCanceledException : public ::Ice::UserException
{
public:

    RequestCanceledException() {}
    virtual ~RequestCanceledException() throw();

    virtual ::std::string ice_name() const;
    virtual RequestCanceledException* ice_clone() const;
    virtual void ice_throw() const;

protected:
    virtual void __writeImpl(::IceInternal::BasicStream*) const;
    virtual void __readImpl(::IceInternal::BasicStream*);
    using ::Ice::UserException::__writeImpl;
    using ::Ice::UserException::__readImpl;
};

static RequestCanceledException __RequestCanceledException_init;

typedef ::std::vector< ::Ice::Byte> bytes;

}

namespace Ice
{
template<>
struct StreamableTraits< ::QueryUserApi::RequestCanceledException>
{
    static const StreamHelperCategory helper = StreamHelperCategoryUserException;
};

}

namespace QueryUserApi
{

class AMD_QueryUserI_GetUsersByApp : virtual public ::Ice::AMDCallback
{
public:

    virtual void ice_response(const ::QueryUserApi::bytes&) = 0;
};

typedef ::IceUtil::Handle< ::QueryUserApi::AMD_QueryUserI_GetUsersByApp> AMD_QueryUserI_GetUsersByAppPtr;

class AMD_QueryUserI_GetUsersByRegids : virtual public ::Ice::AMDCallback
{
public:

    virtual void ice_response(const ::QueryUserApi::bytes&) = 0;
};

typedef ::IceUtil::Handle< ::QueryUserApi::AMD_QueryUserI_GetUsersByRegids> AMD_QueryUserI_GetUsersByRegidsPtr;

class AMD_QueryUserI_ValidUsers : virtual public ::Ice::AMDCallback
{
public:

    virtual void ice_response(const ::QueryUserApi::bytes&) = 0;
};

typedef ::IceUtil::Handle< ::QueryUserApi::AMD_QueryUserI_ValidUsers> AMD_QueryUserI_ValidUsersPtr;

class AMD_QueryUserI_ValidRegids : virtual public ::Ice::AMDCallback
{
public:

    virtual void ice_response(const ::QueryUserApi::bytes&) = 0;
};

typedef ::IceUtil::Handle< ::QueryUserApi::AMD_QueryUserI_ValidRegids> AMD_QueryUserI_ValidRegidsPtr;

class AMD_QueryUserI_ValidAppkeys : virtual public ::Ice::AMDCallback
{
public:

    virtual void ice_response(const ::QueryUserApi::bytes&) = 0;
};

typedef ::IceUtil::Handle< ::QueryUserApi::AMD_QueryUserI_ValidAppkeys> AMD_QueryUserI_ValidAppkeysPtr;

}

namespace IceAsync
{

namespace QueryUserApi
{

class AMD_QueryUserI_GetUsersByApp : public ::QueryUserApi::AMD_QueryUserI_GetUsersByApp, public ::IceInternal::IncomingAsync
{
public:

    AMD_QueryUserI_GetUsersByApp(::IceInternal::Incoming&);

    virtual void ice_response(const ::QueryUserApi::bytes&);
    // COMPILERFIX: The using directive avoid compiler warnings with -Woverloaded-virtual
    using ::IceInternal::IncomingAsync::ice_exception;
    virtual void ice_exception(const ::std::exception&);
};

class AMD_QueryUserI_GetUsersByRegids : public ::QueryUserApi::AMD_QueryUserI_GetUsersByRegids, public ::IceInternal::IncomingAsync
{
public:

    AMD_QueryUserI_GetUsersByRegids(::IceInternal::Incoming&);

    virtual void ice_response(const ::QueryUserApi::bytes&);
    // COMPILERFIX: The using directive avoid compiler warnings with -Woverloaded-virtual
    using ::IceInternal::IncomingAsync::ice_exception;
    virtual void ice_exception(const ::std::exception&);
};

class AMD_QueryUserI_ValidUsers : public ::QueryUserApi::AMD_QueryUserI_ValidUsers, public ::IceInternal::IncomingAsync
{
public:

    AMD_QueryUserI_ValidUsers(::IceInternal::Incoming&);

    virtual void ice_response(const ::QueryUserApi::bytes&);
    // COMPILERFIX: The using directive avoid compiler warnings with -Woverloaded-virtual
    using ::IceInternal::IncomingAsync::ice_exception;
    virtual void ice_exception(const ::std::exception&);
};

class AMD_QueryUserI_ValidRegids : public ::QueryUserApi::AMD_QueryUserI_ValidRegids, public ::IceInternal::IncomingAsync
{
public:

    AMD_QueryUserI_ValidRegids(::IceInternal::Incoming&);

    virtual void ice_response(const ::QueryUserApi::bytes&);
    // COMPILERFIX: The using directive avoid compiler warnings with -Woverloaded-virtual
    using ::IceInternal::IncomingAsync::ice_exception;
    virtual void ice_exception(const ::std::exception&);
};

class AMD_QueryUserI_ValidAppkeys : public ::QueryUserApi::AMD_QueryUserI_ValidAppkeys, public ::IceInternal::IncomingAsync
{
public:

    AMD_QueryUserI_ValidAppkeys(::IceInternal::Incoming&);

    virtual void ice_response(const ::QueryUserApi::bytes&);
    // COMPILERFIX: The using directive avoid compiler warnings with -Woverloaded-virtual
    using ::IceInternal::IncomingAsync::ice_exception;
    virtual void ice_exception(const ::std::exception&);
};

}

}

namespace QueryUserApi
{

class Callback_QueryUserI_GetUsersByApp_Base : virtual public ::IceInternal::CallbackBase { };
typedef ::IceUtil::Handle< Callback_QueryUserI_GetUsersByApp_Base> Callback_QueryUserI_GetUsersByAppPtr;

class Callback_QueryUserI_GetUsersByRegids_Base : virtual public ::IceInternal::CallbackBase { };
typedef ::IceUtil::Handle< Callback_QueryUserI_GetUsersByRegids_Base> Callback_QueryUserI_GetUsersByRegidsPtr;

class Callback_QueryUserI_ValidUsers_Base : virtual public ::IceInternal::CallbackBase { };
typedef ::IceUtil::Handle< Callback_QueryUserI_ValidUsers_Base> Callback_QueryUserI_ValidUsersPtr;

class Callback_QueryUserI_ValidRegids_Base : virtual public ::IceInternal::CallbackBase { };
typedef ::IceUtil::Handle< Callback_QueryUserI_ValidRegids_Base> Callback_QueryUserI_ValidRegidsPtr;

class Callback_QueryUserI_ValidAppkeys_Base : virtual public ::IceInternal::CallbackBase { };
typedef ::IceUtil::Handle< Callback_QueryUserI_ValidAppkeys_Base> Callback_QueryUserI_ValidAppkeysPtr;

}

namespace IceProxy
{

namespace QueryUserApi
{

class QueryUserI : virtual public ::IceProxy::Ice::Object
{
public:

    void GetUsersByApp(const ::QueryUserApi::bytes& __p_req, ::QueryUserApi::bytes& __p_res)
    {
        GetUsersByApp(__p_req, __p_res, 0);
    }
    void GetUsersByApp(const ::QueryUserApi::bytes& __p_req, ::QueryUserApi::bytes& __p_res, const ::Ice::Context& __ctx)
    {
        GetUsersByApp(__p_req, __p_res, &__ctx);
    }
#ifdef ICE_CPP11
    ::Ice::AsyncResultPtr
    begin_GetUsersByApp(const ::QueryUserApi::bytes& __p_req, const ::IceInternal::Function<void (const ::QueryUserApi::bytes&)>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return __begin_GetUsersByApp(__p_req, 0, __response, __exception, __sent);
    }
    ::Ice::AsyncResultPtr
    begin_GetUsersByApp(const ::QueryUserApi::bytes& __p_req, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_GetUsersByApp(__p_req, 0, ::Ice::newCallback(__completed, __sent), 0);
    }
    ::Ice::AsyncResultPtr
    begin_GetUsersByApp(const ::QueryUserApi::bytes& __p_req, const ::Ice::Context& __ctx, const ::IceInternal::Function<void (const ::QueryUserApi::bytes&)>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return __begin_GetUsersByApp(__p_req, &__ctx, __response, __exception, __sent);
    }
    ::Ice::AsyncResultPtr
    begin_GetUsersByApp(const ::QueryUserApi::bytes& __p_req, const ::Ice::Context& __ctx, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_GetUsersByApp(__p_req, &__ctx, ::Ice::newCallback(__completed, __sent));
    }
    
private:

    ::Ice::AsyncResultPtr __begin_GetUsersByApp(const ::QueryUserApi::bytes& __p_req, const ::Ice::Context* __ctx, const ::IceInternal::Function<void (const ::QueryUserApi::bytes&)>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception, const ::IceInternal::Function<void (bool)>& __sent);
    
public:
#endif

    ::Ice::AsyncResultPtr begin_GetUsersByApp(const ::QueryUserApi::bytes& __p_req)
    {
        return begin_GetUsersByApp(__p_req, 0, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_GetUsersByApp(const ::QueryUserApi::bytes& __p_req, const ::Ice::Context& __ctx)
    {
        return begin_GetUsersByApp(__p_req, &__ctx, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_GetUsersByApp(const ::QueryUserApi::bytes& __p_req, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_GetUsersByApp(__p_req, 0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_GetUsersByApp(const ::QueryUserApi::bytes& __p_req, const ::Ice::Context& __ctx, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_GetUsersByApp(__p_req, &__ctx, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_GetUsersByApp(const ::QueryUserApi::bytes& __p_req, const ::QueryUserApi::Callback_QueryUserI_GetUsersByAppPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_GetUsersByApp(__p_req, 0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_GetUsersByApp(const ::QueryUserApi::bytes& __p_req, const ::Ice::Context& __ctx, const ::QueryUserApi::Callback_QueryUserI_GetUsersByAppPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_GetUsersByApp(__p_req, &__ctx, __del, __cookie);
    }

    void end_GetUsersByApp(::QueryUserApi::bytes& __p_res, const ::Ice::AsyncResultPtr&);
    
private:

    void GetUsersByApp(const ::QueryUserApi::bytes&, ::QueryUserApi::bytes&, const ::Ice::Context*);
    ::Ice::AsyncResultPtr begin_GetUsersByApp(const ::QueryUserApi::bytes&, const ::Ice::Context*, const ::IceInternal::CallbackBasePtr&, const ::Ice::LocalObjectPtr& __cookie = 0);
    
public:

    void GetUsersByRegids(const ::QueryUserApi::bytes& __p_req, ::QueryUserApi::bytes& __p_res)
    {
        GetUsersByRegids(__p_req, __p_res, 0);
    }
    void GetUsersByRegids(const ::QueryUserApi::bytes& __p_req, ::QueryUserApi::bytes& __p_res, const ::Ice::Context& __ctx)
    {
        GetUsersByRegids(__p_req, __p_res, &__ctx);
    }
#ifdef ICE_CPP11
    ::Ice::AsyncResultPtr
    begin_GetUsersByRegids(const ::QueryUserApi::bytes& __p_req, const ::IceInternal::Function<void (const ::QueryUserApi::bytes&)>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return __begin_GetUsersByRegids(__p_req, 0, __response, __exception, __sent);
    }
    ::Ice::AsyncResultPtr
    begin_GetUsersByRegids(const ::QueryUserApi::bytes& __p_req, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_GetUsersByRegids(__p_req, 0, ::Ice::newCallback(__completed, __sent), 0);
    }
    ::Ice::AsyncResultPtr
    begin_GetUsersByRegids(const ::QueryUserApi::bytes& __p_req, const ::Ice::Context& __ctx, const ::IceInternal::Function<void (const ::QueryUserApi::bytes&)>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return __begin_GetUsersByRegids(__p_req, &__ctx, __response, __exception, __sent);
    }
    ::Ice::AsyncResultPtr
    begin_GetUsersByRegids(const ::QueryUserApi::bytes& __p_req, const ::Ice::Context& __ctx, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_GetUsersByRegids(__p_req, &__ctx, ::Ice::newCallback(__completed, __sent));
    }
    
private:

    ::Ice::AsyncResultPtr __begin_GetUsersByRegids(const ::QueryUserApi::bytes& __p_req, const ::Ice::Context* __ctx, const ::IceInternal::Function<void (const ::QueryUserApi::bytes&)>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception, const ::IceInternal::Function<void (bool)>& __sent);
    
public:
#endif

    ::Ice::AsyncResultPtr begin_GetUsersByRegids(const ::QueryUserApi::bytes& __p_req)
    {
        return begin_GetUsersByRegids(__p_req, 0, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_GetUsersByRegids(const ::QueryUserApi::bytes& __p_req, const ::Ice::Context& __ctx)
    {
        return begin_GetUsersByRegids(__p_req, &__ctx, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_GetUsersByRegids(const ::QueryUserApi::bytes& __p_req, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_GetUsersByRegids(__p_req, 0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_GetUsersByRegids(const ::QueryUserApi::bytes& __p_req, const ::Ice::Context& __ctx, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_GetUsersByRegids(__p_req, &__ctx, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_GetUsersByRegids(const ::QueryUserApi::bytes& __p_req, const ::QueryUserApi::Callback_QueryUserI_GetUsersByRegidsPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_GetUsersByRegids(__p_req, 0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_GetUsersByRegids(const ::QueryUserApi::bytes& __p_req, const ::Ice::Context& __ctx, const ::QueryUserApi::Callback_QueryUserI_GetUsersByRegidsPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_GetUsersByRegids(__p_req, &__ctx, __del, __cookie);
    }

    void end_GetUsersByRegids(::QueryUserApi::bytes& __p_res, const ::Ice::AsyncResultPtr&);
    
private:

    void GetUsersByRegids(const ::QueryUserApi::bytes&, ::QueryUserApi::bytes&, const ::Ice::Context*);
    ::Ice::AsyncResultPtr begin_GetUsersByRegids(const ::QueryUserApi::bytes&, const ::Ice::Context*, const ::IceInternal::CallbackBasePtr&, const ::Ice::LocalObjectPtr& __cookie = 0);
    
public:

    void ValidUsers(const ::QueryUserApi::bytes& __p_req, ::QueryUserApi::bytes& __p_res)
    {
        ValidUsers(__p_req, __p_res, 0);
    }
    void ValidUsers(const ::QueryUserApi::bytes& __p_req, ::QueryUserApi::bytes& __p_res, const ::Ice::Context& __ctx)
    {
        ValidUsers(__p_req, __p_res, &__ctx);
    }
#ifdef ICE_CPP11
    ::Ice::AsyncResultPtr
    begin_ValidUsers(const ::QueryUserApi::bytes& __p_req, const ::IceInternal::Function<void (const ::QueryUserApi::bytes&)>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return __begin_ValidUsers(__p_req, 0, __response, __exception, __sent);
    }
    ::Ice::AsyncResultPtr
    begin_ValidUsers(const ::QueryUserApi::bytes& __p_req, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_ValidUsers(__p_req, 0, ::Ice::newCallback(__completed, __sent), 0);
    }
    ::Ice::AsyncResultPtr
    begin_ValidUsers(const ::QueryUserApi::bytes& __p_req, const ::Ice::Context& __ctx, const ::IceInternal::Function<void (const ::QueryUserApi::bytes&)>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return __begin_ValidUsers(__p_req, &__ctx, __response, __exception, __sent);
    }
    ::Ice::AsyncResultPtr
    begin_ValidUsers(const ::QueryUserApi::bytes& __p_req, const ::Ice::Context& __ctx, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_ValidUsers(__p_req, &__ctx, ::Ice::newCallback(__completed, __sent));
    }
    
private:

    ::Ice::AsyncResultPtr __begin_ValidUsers(const ::QueryUserApi::bytes& __p_req, const ::Ice::Context* __ctx, const ::IceInternal::Function<void (const ::QueryUserApi::bytes&)>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception, const ::IceInternal::Function<void (bool)>& __sent);
    
public:
#endif

    ::Ice::AsyncResultPtr begin_ValidUsers(const ::QueryUserApi::bytes& __p_req)
    {
        return begin_ValidUsers(__p_req, 0, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_ValidUsers(const ::QueryUserApi::bytes& __p_req, const ::Ice::Context& __ctx)
    {
        return begin_ValidUsers(__p_req, &__ctx, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_ValidUsers(const ::QueryUserApi::bytes& __p_req, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_ValidUsers(__p_req, 0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_ValidUsers(const ::QueryUserApi::bytes& __p_req, const ::Ice::Context& __ctx, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_ValidUsers(__p_req, &__ctx, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_ValidUsers(const ::QueryUserApi::bytes& __p_req, const ::QueryUserApi::Callback_QueryUserI_ValidUsersPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_ValidUsers(__p_req, 0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_ValidUsers(const ::QueryUserApi::bytes& __p_req, const ::Ice::Context& __ctx, const ::QueryUserApi::Callback_QueryUserI_ValidUsersPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_ValidUsers(__p_req, &__ctx, __del, __cookie);
    }

    void end_ValidUsers(::QueryUserApi::bytes& __p_res, const ::Ice::AsyncResultPtr&);
    
private:

    void ValidUsers(const ::QueryUserApi::bytes&, ::QueryUserApi::bytes&, const ::Ice::Context*);
    ::Ice::AsyncResultPtr begin_ValidUsers(const ::QueryUserApi::bytes&, const ::Ice::Context*, const ::IceInternal::CallbackBasePtr&, const ::Ice::LocalObjectPtr& __cookie = 0);
    
public:

    void ValidRegids(const ::QueryUserApi::bytes& __p_req, ::QueryUserApi::bytes& __p_res)
    {
        ValidRegids(__p_req, __p_res, 0);
    }
    void ValidRegids(const ::QueryUserApi::bytes& __p_req, ::QueryUserApi::bytes& __p_res, const ::Ice::Context& __ctx)
    {
        ValidRegids(__p_req, __p_res, &__ctx);
    }
#ifdef ICE_CPP11
    ::Ice::AsyncResultPtr
    begin_ValidRegids(const ::QueryUserApi::bytes& __p_req, const ::IceInternal::Function<void (const ::QueryUserApi::bytes&)>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return __begin_ValidRegids(__p_req, 0, __response, __exception, __sent);
    }
    ::Ice::AsyncResultPtr
    begin_ValidRegids(const ::QueryUserApi::bytes& __p_req, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_ValidRegids(__p_req, 0, ::Ice::newCallback(__completed, __sent), 0);
    }
    ::Ice::AsyncResultPtr
    begin_ValidRegids(const ::QueryUserApi::bytes& __p_req, const ::Ice::Context& __ctx, const ::IceInternal::Function<void (const ::QueryUserApi::bytes&)>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return __begin_ValidRegids(__p_req, &__ctx, __response, __exception, __sent);
    }
    ::Ice::AsyncResultPtr
    begin_ValidRegids(const ::QueryUserApi::bytes& __p_req, const ::Ice::Context& __ctx, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_ValidRegids(__p_req, &__ctx, ::Ice::newCallback(__completed, __sent));
    }
    
private:

    ::Ice::AsyncResultPtr __begin_ValidRegids(const ::QueryUserApi::bytes& __p_req, const ::Ice::Context* __ctx, const ::IceInternal::Function<void (const ::QueryUserApi::bytes&)>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception, const ::IceInternal::Function<void (bool)>& __sent);
    
public:
#endif

    ::Ice::AsyncResultPtr begin_ValidRegids(const ::QueryUserApi::bytes& __p_req)
    {
        return begin_ValidRegids(__p_req, 0, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_ValidRegids(const ::QueryUserApi::bytes& __p_req, const ::Ice::Context& __ctx)
    {
        return begin_ValidRegids(__p_req, &__ctx, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_ValidRegids(const ::QueryUserApi::bytes& __p_req, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_ValidRegids(__p_req, 0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_ValidRegids(const ::QueryUserApi::bytes& __p_req, const ::Ice::Context& __ctx, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_ValidRegids(__p_req, &__ctx, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_ValidRegids(const ::QueryUserApi::bytes& __p_req, const ::QueryUserApi::Callback_QueryUserI_ValidRegidsPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_ValidRegids(__p_req, 0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_ValidRegids(const ::QueryUserApi::bytes& __p_req, const ::Ice::Context& __ctx, const ::QueryUserApi::Callback_QueryUserI_ValidRegidsPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_ValidRegids(__p_req, &__ctx, __del, __cookie);
    }

    void end_ValidRegids(::QueryUserApi::bytes& __p_res, const ::Ice::AsyncResultPtr&);
    
private:

    void ValidRegids(const ::QueryUserApi::bytes&, ::QueryUserApi::bytes&, const ::Ice::Context*);
    ::Ice::AsyncResultPtr begin_ValidRegids(const ::QueryUserApi::bytes&, const ::Ice::Context*, const ::IceInternal::CallbackBasePtr&, const ::Ice::LocalObjectPtr& __cookie = 0);
    
public:

    void ValidAppkeys(const ::QueryUserApi::bytes& __p_req, ::QueryUserApi::bytes& __p_res)
    {
        ValidAppkeys(__p_req, __p_res, 0);
    }
    void ValidAppkeys(const ::QueryUserApi::bytes& __p_req, ::QueryUserApi::bytes& __p_res, const ::Ice::Context& __ctx)
    {
        ValidAppkeys(__p_req, __p_res, &__ctx);
    }
#ifdef ICE_CPP11
    ::Ice::AsyncResultPtr
    begin_ValidAppkeys(const ::QueryUserApi::bytes& __p_req, const ::IceInternal::Function<void (const ::QueryUserApi::bytes&)>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return __begin_ValidAppkeys(__p_req, 0, __response, __exception, __sent);
    }
    ::Ice::AsyncResultPtr
    begin_ValidAppkeys(const ::QueryUserApi::bytes& __p_req, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_ValidAppkeys(__p_req, 0, ::Ice::newCallback(__completed, __sent), 0);
    }
    ::Ice::AsyncResultPtr
    begin_ValidAppkeys(const ::QueryUserApi::bytes& __p_req, const ::Ice::Context& __ctx, const ::IceInternal::Function<void (const ::QueryUserApi::bytes&)>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return __begin_ValidAppkeys(__p_req, &__ctx, __response, __exception, __sent);
    }
    ::Ice::AsyncResultPtr
    begin_ValidAppkeys(const ::QueryUserApi::bytes& __p_req, const ::Ice::Context& __ctx, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_ValidAppkeys(__p_req, &__ctx, ::Ice::newCallback(__completed, __sent));
    }
    
private:

    ::Ice::AsyncResultPtr __begin_ValidAppkeys(const ::QueryUserApi::bytes& __p_req, const ::Ice::Context* __ctx, const ::IceInternal::Function<void (const ::QueryUserApi::bytes&)>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception, const ::IceInternal::Function<void (bool)>& __sent);
    
public:
#endif

    ::Ice::AsyncResultPtr begin_ValidAppkeys(const ::QueryUserApi::bytes& __p_req)
    {
        return begin_ValidAppkeys(__p_req, 0, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_ValidAppkeys(const ::QueryUserApi::bytes& __p_req, const ::Ice::Context& __ctx)
    {
        return begin_ValidAppkeys(__p_req, &__ctx, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_ValidAppkeys(const ::QueryUserApi::bytes& __p_req, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_ValidAppkeys(__p_req, 0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_ValidAppkeys(const ::QueryUserApi::bytes& __p_req, const ::Ice::Context& __ctx, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_ValidAppkeys(__p_req, &__ctx, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_ValidAppkeys(const ::QueryUserApi::bytes& __p_req, const ::QueryUserApi::Callback_QueryUserI_ValidAppkeysPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_ValidAppkeys(__p_req, 0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_ValidAppkeys(const ::QueryUserApi::bytes& __p_req, const ::Ice::Context& __ctx, const ::QueryUserApi::Callback_QueryUserI_ValidAppkeysPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_ValidAppkeys(__p_req, &__ctx, __del, __cookie);
    }

    void end_ValidAppkeys(::QueryUserApi::bytes& __p_res, const ::Ice::AsyncResultPtr&);
    
private:

    void ValidAppkeys(const ::QueryUserApi::bytes&, ::QueryUserApi::bytes&, const ::Ice::Context*);
    ::Ice::AsyncResultPtr begin_ValidAppkeys(const ::QueryUserApi::bytes&, const ::Ice::Context*, const ::IceInternal::CallbackBasePtr&, const ::Ice::LocalObjectPtr& __cookie = 0);
    
public:
    
    ::IceInternal::ProxyHandle<QueryUserI> ice_context(const ::Ice::Context& __context) const
    {
        return dynamic_cast<QueryUserI*>(::IceProxy::Ice::Object::ice_context(__context).get());
    }
    
    ::IceInternal::ProxyHandle<QueryUserI> ice_adapterId(const ::std::string& __id) const
    {
        return dynamic_cast<QueryUserI*>(::IceProxy::Ice::Object::ice_adapterId(__id).get());
    }
    
    ::IceInternal::ProxyHandle<QueryUserI> ice_endpoints(const ::Ice::EndpointSeq& __endpoints) const
    {
        return dynamic_cast<QueryUserI*>(::IceProxy::Ice::Object::ice_endpoints(__endpoints).get());
    }
    
    ::IceInternal::ProxyHandle<QueryUserI> ice_locatorCacheTimeout(int __timeout) const
    {
        return dynamic_cast<QueryUserI*>(::IceProxy::Ice::Object::ice_locatorCacheTimeout(__timeout).get());
    }
    
    ::IceInternal::ProxyHandle<QueryUserI> ice_connectionCached(bool __cached) const
    {
        return dynamic_cast<QueryUserI*>(::IceProxy::Ice::Object::ice_connectionCached(__cached).get());
    }
    
    ::IceInternal::ProxyHandle<QueryUserI> ice_endpointSelection(::Ice::EndpointSelectionType __est) const
    {
        return dynamic_cast<QueryUserI*>(::IceProxy::Ice::Object::ice_endpointSelection(__est).get());
    }
    
    ::IceInternal::ProxyHandle<QueryUserI> ice_secure(bool __secure) const
    {
        return dynamic_cast<QueryUserI*>(::IceProxy::Ice::Object::ice_secure(__secure).get());
    }
    
    ::IceInternal::ProxyHandle<QueryUserI> ice_preferSecure(bool __preferSecure) const
    {
        return dynamic_cast<QueryUserI*>(::IceProxy::Ice::Object::ice_preferSecure(__preferSecure).get());
    }
    
    ::IceInternal::ProxyHandle<QueryUserI> ice_router(const ::Ice::RouterPrx& __router) const
    {
        return dynamic_cast<QueryUserI*>(::IceProxy::Ice::Object::ice_router(__router).get());
    }
    
    ::IceInternal::ProxyHandle<QueryUserI> ice_locator(const ::Ice::LocatorPrx& __locator) const
    {
        return dynamic_cast<QueryUserI*>(::IceProxy::Ice::Object::ice_locator(__locator).get());
    }
    
    ::IceInternal::ProxyHandle<QueryUserI> ice_collocationOptimized(bool __co) const
    {
        return dynamic_cast<QueryUserI*>(::IceProxy::Ice::Object::ice_collocationOptimized(__co).get());
    }
    
    ::IceInternal::ProxyHandle<QueryUserI> ice_invocationTimeout(int __timeout) const
    {
        return dynamic_cast<QueryUserI*>(::IceProxy::Ice::Object::ice_invocationTimeout(__timeout).get());
    }
    
    ::IceInternal::ProxyHandle<QueryUserI> ice_twoway() const
    {
        return dynamic_cast<QueryUserI*>(::IceProxy::Ice::Object::ice_twoway().get());
    }
    
    ::IceInternal::ProxyHandle<QueryUserI> ice_oneway() const
    {
        return dynamic_cast<QueryUserI*>(::IceProxy::Ice::Object::ice_oneway().get());
    }
    
    ::IceInternal::ProxyHandle<QueryUserI> ice_batchOneway() const
    {
        return dynamic_cast<QueryUserI*>(::IceProxy::Ice::Object::ice_batchOneway().get());
    }
    
    ::IceInternal::ProxyHandle<QueryUserI> ice_datagram() const
    {
        return dynamic_cast<QueryUserI*>(::IceProxy::Ice::Object::ice_datagram().get());
    }
    
    ::IceInternal::ProxyHandle<QueryUserI> ice_batchDatagram() const
    {
        return dynamic_cast<QueryUserI*>(::IceProxy::Ice::Object::ice_batchDatagram().get());
    }
    
    ::IceInternal::ProxyHandle<QueryUserI> ice_compress(bool __compress) const
    {
        return dynamic_cast<QueryUserI*>(::IceProxy::Ice::Object::ice_compress(__compress).get());
    }
    
    ::IceInternal::ProxyHandle<QueryUserI> ice_timeout(int __timeout) const
    {
        return dynamic_cast<QueryUserI*>(::IceProxy::Ice::Object::ice_timeout(__timeout).get());
    }
    
    ::IceInternal::ProxyHandle<QueryUserI> ice_connectionId(const ::std::string& __id) const
    {
        return dynamic_cast<QueryUserI*>(::IceProxy::Ice::Object::ice_connectionId(__id).get());
    }
    
    ::IceInternal::ProxyHandle<QueryUserI> ice_encodingVersion(const ::Ice::EncodingVersion& __v) const
    {
        return dynamic_cast<QueryUserI*>(::IceProxy::Ice::Object::ice_encodingVersion(__v).get());
    }
    
    static const ::std::string& ice_staticId();

private: 
    virtual ::IceProxy::Ice::Object* __newInstance() const;
};

}

}

namespace QueryUserApi
{

class QueryUserI : virtual public ::Ice::Object
{
public:

    typedef QueryUserIPrx ProxyType;
    typedef QueryUserIPtr PointerType;

    virtual bool ice_isA(const ::std::string&, const ::Ice::Current& = ::Ice::Current()) const;
    virtual ::std::vector< ::std::string> ice_ids(const ::Ice::Current& = ::Ice::Current()) const;
    virtual const ::std::string& ice_id(const ::Ice::Current& = ::Ice::Current()) const;
    static const ::std::string& ice_staticId();

    virtual void GetUsersByApp_async(const ::QueryUserApi::AMD_QueryUserI_GetUsersByAppPtr&, const ::QueryUserApi::bytes&, const ::Ice::Current& = ::Ice::Current()) = 0;
    ::Ice::DispatchStatus ___GetUsersByApp(::IceInternal::Incoming&, const ::Ice::Current&);

    virtual void GetUsersByRegids_async(const ::QueryUserApi::AMD_QueryUserI_GetUsersByRegidsPtr&, const ::QueryUserApi::bytes&, const ::Ice::Current& = ::Ice::Current()) = 0;
    ::Ice::DispatchStatus ___GetUsersByRegids(::IceInternal::Incoming&, const ::Ice::Current&);

    virtual void ValidUsers_async(const ::QueryUserApi::AMD_QueryUserI_ValidUsersPtr&, const ::QueryUserApi::bytes&, const ::Ice::Current& = ::Ice::Current()) = 0;
    ::Ice::DispatchStatus ___ValidUsers(::IceInternal::Incoming&, const ::Ice::Current&);

    virtual void ValidRegids_async(const ::QueryUserApi::AMD_QueryUserI_ValidRegidsPtr&, const ::QueryUserApi::bytes&, const ::Ice::Current& = ::Ice::Current()) = 0;
    ::Ice::DispatchStatus ___ValidRegids(::IceInternal::Incoming&, const ::Ice::Current&);

    virtual void ValidAppkeys_async(const ::QueryUserApi::AMD_QueryUserI_ValidAppkeysPtr&, const ::QueryUserApi::bytes&, const ::Ice::Current& = ::Ice::Current()) = 0;
    ::Ice::DispatchStatus ___ValidAppkeys(::IceInternal::Incoming&, const ::Ice::Current&);

    virtual ::Ice::DispatchStatus __dispatch(::IceInternal::Incoming&, const ::Ice::Current&);

protected:
    virtual void __writeImpl(::IceInternal::BasicStream*) const;
    virtual void __readImpl(::IceInternal::BasicStream*);
    using ::Ice::Object::__writeImpl;
    using ::Ice::Object::__readImpl;
};

inline bool operator==(const QueryUserI& l, const QueryUserI& r)
{
    return static_cast<const ::Ice::Object&>(l) == static_cast<const ::Ice::Object&>(r);
}

inline bool operator<(const QueryUserI& l, const QueryUserI& r)
{
    return static_cast<const ::Ice::Object&>(l) < static_cast<const ::Ice::Object&>(r);
}

}

namespace QueryUserApi
{

template<class T>
class CallbackNC_QueryUserI_GetUsersByApp : public Callback_QueryUserI_GetUsersByApp_Base, public ::IceInternal::TwowayCallbackNC<T>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception&);
    typedef void (T::*Sent)(bool);
    typedef void (T::*Response)(const ::QueryUserApi::bytes&);

    CallbackNC_QueryUserI_GetUsersByApp(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallbackNC<T>(obj, cb != 0, excb, sentcb), _response(cb)
    {
    }

    virtual void completed(const ::Ice::AsyncResultPtr& __result) const
    {
        ::QueryUserApi::QueryUserIPrx __proxy = ::QueryUserApi::QueryUserIPrx::uncheckedCast(__result->getProxy());
        ::QueryUserApi::bytes res;
        try
        {
            __proxy->end_GetUsersByApp(res, __result);
        }
        catch(const ::Ice::Exception& ex)
        {
            ::IceInternal::CallbackNC<T>::exception(__result, ex);
            return;
        }
        if(_response)
        {
            (::IceInternal::CallbackNC<T>::_callback.get()->*_response)(res);
        }
    }

    private:

    Response _response;
};

template<class T> Callback_QueryUserI_GetUsersByAppPtr
newCallback_QueryUserI_GetUsersByApp(const IceUtil::Handle<T>& instance, void (T::*cb)(const ::QueryUserApi::bytes&), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_QueryUserI_GetUsersByApp<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_QueryUserI_GetUsersByAppPtr
newCallback_QueryUserI_GetUsersByApp(T* instance, void (T::*cb)(const ::QueryUserApi::bytes&), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_QueryUserI_GetUsersByApp<T>(instance, cb, excb, sentcb);
}

template<class T, typename CT>
class Callback_QueryUserI_GetUsersByApp : public Callback_QueryUserI_GetUsersByApp_Base, public ::IceInternal::TwowayCallback<T, CT>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception& , const CT&);
    typedef void (T::*Sent)(bool , const CT&);
    typedef void (T::*Response)(const ::QueryUserApi::bytes&, const CT&);

    Callback_QueryUserI_GetUsersByApp(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallback<T, CT>(obj, cb != 0, excb, sentcb), _response(cb)
    {
    }

    virtual void completed(const ::Ice::AsyncResultPtr& __result) const
    {
        ::QueryUserApi::QueryUserIPrx __proxy = ::QueryUserApi::QueryUserIPrx::uncheckedCast(__result->getProxy());
        ::QueryUserApi::bytes res;
        try
        {
            __proxy->end_GetUsersByApp(res, __result);
        }
        catch(const ::Ice::Exception& ex)
        {
            ::IceInternal::Callback<T, CT>::exception(__result, ex);
            return;
        }
        if(_response)
        {
            (::IceInternal::Callback<T, CT>::_callback.get()->*_response)(res, CT::dynamicCast(__result->getCookie()));
        }
    }

    private:

    Response _response;
};

template<class T, typename CT> Callback_QueryUserI_GetUsersByAppPtr
newCallback_QueryUserI_GetUsersByApp(const IceUtil::Handle<T>& instance, void (T::*cb)(const ::QueryUserApi::bytes&, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_QueryUserI_GetUsersByApp<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_QueryUserI_GetUsersByAppPtr
newCallback_QueryUserI_GetUsersByApp(T* instance, void (T::*cb)(const ::QueryUserApi::bytes&, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_QueryUserI_GetUsersByApp<T, CT>(instance, cb, excb, sentcb);
}

template<class T>
class CallbackNC_QueryUserI_GetUsersByRegids : public Callback_QueryUserI_GetUsersByRegids_Base, public ::IceInternal::TwowayCallbackNC<T>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception&);
    typedef void (T::*Sent)(bool);
    typedef void (T::*Response)(const ::QueryUserApi::bytes&);

    CallbackNC_QueryUserI_GetUsersByRegids(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallbackNC<T>(obj, cb != 0, excb, sentcb), _response(cb)
    {
    }

    virtual void completed(const ::Ice::AsyncResultPtr& __result) const
    {
        ::QueryUserApi::QueryUserIPrx __proxy = ::QueryUserApi::QueryUserIPrx::uncheckedCast(__result->getProxy());
        ::QueryUserApi::bytes res;
        try
        {
            __proxy->end_GetUsersByRegids(res, __result);
        }
        catch(const ::Ice::Exception& ex)
        {
            ::IceInternal::CallbackNC<T>::exception(__result, ex);
            return;
        }
        if(_response)
        {
            (::IceInternal::CallbackNC<T>::_callback.get()->*_response)(res);
        }
    }

    private:

    Response _response;
};

template<class T> Callback_QueryUserI_GetUsersByRegidsPtr
newCallback_QueryUserI_GetUsersByRegids(const IceUtil::Handle<T>& instance, void (T::*cb)(const ::QueryUserApi::bytes&), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_QueryUserI_GetUsersByRegids<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_QueryUserI_GetUsersByRegidsPtr
newCallback_QueryUserI_GetUsersByRegids(T* instance, void (T::*cb)(const ::QueryUserApi::bytes&), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_QueryUserI_GetUsersByRegids<T>(instance, cb, excb, sentcb);
}

template<class T, typename CT>
class Callback_QueryUserI_GetUsersByRegids : public Callback_QueryUserI_GetUsersByRegids_Base, public ::IceInternal::TwowayCallback<T, CT>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception& , const CT&);
    typedef void (T::*Sent)(bool , const CT&);
    typedef void (T::*Response)(const ::QueryUserApi::bytes&, const CT&);

    Callback_QueryUserI_GetUsersByRegids(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallback<T, CT>(obj, cb != 0, excb, sentcb), _response(cb)
    {
    }

    virtual void completed(const ::Ice::AsyncResultPtr& __result) const
    {
        ::QueryUserApi::QueryUserIPrx __proxy = ::QueryUserApi::QueryUserIPrx::uncheckedCast(__result->getProxy());
        ::QueryUserApi::bytes res;
        try
        {
            __proxy->end_GetUsersByRegids(res, __result);
        }
        catch(const ::Ice::Exception& ex)
        {
            ::IceInternal::Callback<T, CT>::exception(__result, ex);
            return;
        }
        if(_response)
        {
            (::IceInternal::Callback<T, CT>::_callback.get()->*_response)(res, CT::dynamicCast(__result->getCookie()));
        }
    }

    private:

    Response _response;
};

template<class T, typename CT> Callback_QueryUserI_GetUsersByRegidsPtr
newCallback_QueryUserI_GetUsersByRegids(const IceUtil::Handle<T>& instance, void (T::*cb)(const ::QueryUserApi::bytes&, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_QueryUserI_GetUsersByRegids<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_QueryUserI_GetUsersByRegidsPtr
newCallback_QueryUserI_GetUsersByRegids(T* instance, void (T::*cb)(const ::QueryUserApi::bytes&, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_QueryUserI_GetUsersByRegids<T, CT>(instance, cb, excb, sentcb);
}

template<class T>
class CallbackNC_QueryUserI_ValidUsers : public Callback_QueryUserI_ValidUsers_Base, public ::IceInternal::TwowayCallbackNC<T>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception&);
    typedef void (T::*Sent)(bool);
    typedef void (T::*Response)(const ::QueryUserApi::bytes&);

    CallbackNC_QueryUserI_ValidUsers(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallbackNC<T>(obj, cb != 0, excb, sentcb), _response(cb)
    {
    }

    virtual void completed(const ::Ice::AsyncResultPtr& __result) const
    {
        ::QueryUserApi::QueryUserIPrx __proxy = ::QueryUserApi::QueryUserIPrx::uncheckedCast(__result->getProxy());
        ::QueryUserApi::bytes res;
        try
        {
            __proxy->end_ValidUsers(res, __result);
        }
        catch(const ::Ice::Exception& ex)
        {
            ::IceInternal::CallbackNC<T>::exception(__result, ex);
            return;
        }
        if(_response)
        {
            (::IceInternal::CallbackNC<T>::_callback.get()->*_response)(res);
        }
    }

    private:

    Response _response;
};

template<class T> Callback_QueryUserI_ValidUsersPtr
newCallback_QueryUserI_ValidUsers(const IceUtil::Handle<T>& instance, void (T::*cb)(const ::QueryUserApi::bytes&), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_QueryUserI_ValidUsers<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_QueryUserI_ValidUsersPtr
newCallback_QueryUserI_ValidUsers(T* instance, void (T::*cb)(const ::QueryUserApi::bytes&), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_QueryUserI_ValidUsers<T>(instance, cb, excb, sentcb);
}

template<class T, typename CT>
class Callback_QueryUserI_ValidUsers : public Callback_QueryUserI_ValidUsers_Base, public ::IceInternal::TwowayCallback<T, CT>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception& , const CT&);
    typedef void (T::*Sent)(bool , const CT&);
    typedef void (T::*Response)(const ::QueryUserApi::bytes&, const CT&);

    Callback_QueryUserI_ValidUsers(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallback<T, CT>(obj, cb != 0, excb, sentcb), _response(cb)
    {
    }

    virtual void completed(const ::Ice::AsyncResultPtr& __result) const
    {
        ::QueryUserApi::QueryUserIPrx __proxy = ::QueryUserApi::QueryUserIPrx::uncheckedCast(__result->getProxy());
        ::QueryUserApi::bytes res;
        try
        {
            __proxy->end_ValidUsers(res, __result);
        }
        catch(const ::Ice::Exception& ex)
        {
            ::IceInternal::Callback<T, CT>::exception(__result, ex);
            return;
        }
        if(_response)
        {
            (::IceInternal::Callback<T, CT>::_callback.get()->*_response)(res, CT::dynamicCast(__result->getCookie()));
        }
    }

    private:

    Response _response;
};

template<class T, typename CT> Callback_QueryUserI_ValidUsersPtr
newCallback_QueryUserI_ValidUsers(const IceUtil::Handle<T>& instance, void (T::*cb)(const ::QueryUserApi::bytes&, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_QueryUserI_ValidUsers<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_QueryUserI_ValidUsersPtr
newCallback_QueryUserI_ValidUsers(T* instance, void (T::*cb)(const ::QueryUserApi::bytes&, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_QueryUserI_ValidUsers<T, CT>(instance, cb, excb, sentcb);
}

template<class T>
class CallbackNC_QueryUserI_ValidRegids : public Callback_QueryUserI_ValidRegids_Base, public ::IceInternal::TwowayCallbackNC<T>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception&);
    typedef void (T::*Sent)(bool);
    typedef void (T::*Response)(const ::QueryUserApi::bytes&);

    CallbackNC_QueryUserI_ValidRegids(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallbackNC<T>(obj, cb != 0, excb, sentcb), _response(cb)
    {
    }

    virtual void completed(const ::Ice::AsyncResultPtr& __result) const
    {
        ::QueryUserApi::QueryUserIPrx __proxy = ::QueryUserApi::QueryUserIPrx::uncheckedCast(__result->getProxy());
        ::QueryUserApi::bytes res;
        try
        {
            __proxy->end_ValidRegids(res, __result);
        }
        catch(const ::Ice::Exception& ex)
        {
            ::IceInternal::CallbackNC<T>::exception(__result, ex);
            return;
        }
        if(_response)
        {
            (::IceInternal::CallbackNC<T>::_callback.get()->*_response)(res);
        }
    }

    private:

    Response _response;
};

template<class T> Callback_QueryUserI_ValidRegidsPtr
newCallback_QueryUserI_ValidRegids(const IceUtil::Handle<T>& instance, void (T::*cb)(const ::QueryUserApi::bytes&), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_QueryUserI_ValidRegids<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_QueryUserI_ValidRegidsPtr
newCallback_QueryUserI_ValidRegids(T* instance, void (T::*cb)(const ::QueryUserApi::bytes&), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_QueryUserI_ValidRegids<T>(instance, cb, excb, sentcb);
}

template<class T, typename CT>
class Callback_QueryUserI_ValidRegids : public Callback_QueryUserI_ValidRegids_Base, public ::IceInternal::TwowayCallback<T, CT>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception& , const CT&);
    typedef void (T::*Sent)(bool , const CT&);
    typedef void (T::*Response)(const ::QueryUserApi::bytes&, const CT&);

    Callback_QueryUserI_ValidRegids(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallback<T, CT>(obj, cb != 0, excb, sentcb), _response(cb)
    {
    }

    virtual void completed(const ::Ice::AsyncResultPtr& __result) const
    {
        ::QueryUserApi::QueryUserIPrx __proxy = ::QueryUserApi::QueryUserIPrx::uncheckedCast(__result->getProxy());
        ::QueryUserApi::bytes res;
        try
        {
            __proxy->end_ValidRegids(res, __result);
        }
        catch(const ::Ice::Exception& ex)
        {
            ::IceInternal::Callback<T, CT>::exception(__result, ex);
            return;
        }
        if(_response)
        {
            (::IceInternal::Callback<T, CT>::_callback.get()->*_response)(res, CT::dynamicCast(__result->getCookie()));
        }
    }

    private:

    Response _response;
};

template<class T, typename CT> Callback_QueryUserI_ValidRegidsPtr
newCallback_QueryUserI_ValidRegids(const IceUtil::Handle<T>& instance, void (T::*cb)(const ::QueryUserApi::bytes&, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_QueryUserI_ValidRegids<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_QueryUserI_ValidRegidsPtr
newCallback_QueryUserI_ValidRegids(T* instance, void (T::*cb)(const ::QueryUserApi::bytes&, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_QueryUserI_ValidRegids<T, CT>(instance, cb, excb, sentcb);
}

template<class T>
class CallbackNC_QueryUserI_ValidAppkeys : public Callback_QueryUserI_ValidAppkeys_Base, public ::IceInternal::TwowayCallbackNC<T>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception&);
    typedef void (T::*Sent)(bool);
    typedef void (T::*Response)(const ::QueryUserApi::bytes&);

    CallbackNC_QueryUserI_ValidAppkeys(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallbackNC<T>(obj, cb != 0, excb, sentcb), _response(cb)
    {
    }

    virtual void completed(const ::Ice::AsyncResultPtr& __result) const
    {
        ::QueryUserApi::QueryUserIPrx __proxy = ::QueryUserApi::QueryUserIPrx::uncheckedCast(__result->getProxy());
        ::QueryUserApi::bytes res;
        try
        {
            __proxy->end_ValidAppkeys(res, __result);
        }
        catch(const ::Ice::Exception& ex)
        {
            ::IceInternal::CallbackNC<T>::exception(__result, ex);
            return;
        }
        if(_response)
        {
            (::IceInternal::CallbackNC<T>::_callback.get()->*_response)(res);
        }
    }

    private:

    Response _response;
};

template<class T> Callback_QueryUserI_ValidAppkeysPtr
newCallback_QueryUserI_ValidAppkeys(const IceUtil::Handle<T>& instance, void (T::*cb)(const ::QueryUserApi::bytes&), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_QueryUserI_ValidAppkeys<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_QueryUserI_ValidAppkeysPtr
newCallback_QueryUserI_ValidAppkeys(T* instance, void (T::*cb)(const ::QueryUserApi::bytes&), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_QueryUserI_ValidAppkeys<T>(instance, cb, excb, sentcb);
}

template<class T, typename CT>
class Callback_QueryUserI_ValidAppkeys : public Callback_QueryUserI_ValidAppkeys_Base, public ::IceInternal::TwowayCallback<T, CT>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception& , const CT&);
    typedef void (T::*Sent)(bool , const CT&);
    typedef void (T::*Response)(const ::QueryUserApi::bytes&, const CT&);

    Callback_QueryUserI_ValidAppkeys(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallback<T, CT>(obj, cb != 0, excb, sentcb), _response(cb)
    {
    }

    virtual void completed(const ::Ice::AsyncResultPtr& __result) const
    {
        ::QueryUserApi::QueryUserIPrx __proxy = ::QueryUserApi::QueryUserIPrx::uncheckedCast(__result->getProxy());
        ::QueryUserApi::bytes res;
        try
        {
            __proxy->end_ValidAppkeys(res, __result);
        }
        catch(const ::Ice::Exception& ex)
        {
            ::IceInternal::Callback<T, CT>::exception(__result, ex);
            return;
        }
        if(_response)
        {
            (::IceInternal::Callback<T, CT>::_callback.get()->*_response)(res, CT::dynamicCast(__result->getCookie()));
        }
    }

    private:

    Response _response;
};

template<class T, typename CT> Callback_QueryUserI_ValidAppkeysPtr
newCallback_QueryUserI_ValidAppkeys(const IceUtil::Handle<T>& instance, void (T::*cb)(const ::QueryUserApi::bytes&, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_QueryUserI_ValidAppkeys<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_QueryUserI_ValidAppkeysPtr
newCallback_QueryUserI_ValidAppkeys(T* instance, void (T::*cb)(const ::QueryUserApi::bytes&, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_QueryUserI_ValidAppkeys<T, CT>(instance, cb, excb, sentcb);
}

}

#include <IceUtil/PopDisableWarnings.h>
#endif
