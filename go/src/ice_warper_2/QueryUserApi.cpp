// **********************************************************************
//
// Copyright (c) 2003-2016 ZeroC, Inc. All rights reserved.
//
// This copy of Ice is licensed to you under the terms described in the
// ICE_LICENSE file included in this distribution.
//
// **********************************************************************
//
// Ice version 3.6.3
//
// <auto-generated>
//
// Generated from file `QueryUserApi.ice'
//
// Warning: do not edit this file.
//
// </auto-generated>
//

#include <QueryUserApi.h>
#include <IceUtil/PushDisableWarnings.h>
#include <Ice/LocalException.h>
#include <Ice/ObjectFactory.h>
#include <Ice/Outgoing.h>
#include <Ice/OutgoingAsync.h>
#include <Ice/BasicStream.h>
#include <IceUtil/Iterator.h>
#include <IceUtil/PopDisableWarnings.h>

#ifndef ICE_IGNORE_VERSION
#   if ICE_INT_VERSION / 100 != 306
#       error Ice version mismatch!
#   endif
#   if ICE_INT_VERSION % 100 > 50
#       error Beta header file detected
#   endif
#   if ICE_INT_VERSION % 100 < 3
#       error Ice patch level mismatch!
#   endif
#endif

namespace
{

const ::std::string __QueryUserApi__QueryUserI__GetUsersByApp_name = "GetUsersByApp";

const ::std::string __QueryUserApi__QueryUserI__GetUsersByRegids_name = "GetUsersByRegids";

const ::std::string __QueryUserApi__QueryUserI__ValidUsers_name = "ValidUsers";

const ::std::string __QueryUserApi__QueryUserI__ValidRegids_name = "ValidRegids";

const ::std::string __QueryUserApi__QueryUserI__ValidAppkeys_name = "ValidAppkeys";

}

namespace
{

const ::IceInternal::DefaultUserExceptionFactoryInit< ::QueryUserApi::RequestCanceledException> __QueryUserApi__RequestCanceledException_init("::QueryUserApi::RequestCanceledException");

}

QueryUserApi::RequestCanceledException::~RequestCanceledException() throw()
{
}

::std::string
QueryUserApi::RequestCanceledException::ice_name() const
{
    return "QueryUserApi::RequestCanceledException";
}

QueryUserApi::RequestCanceledException*
QueryUserApi::RequestCanceledException::ice_clone() const
{
    return new RequestCanceledException(*this);
}

void
QueryUserApi::RequestCanceledException::ice_throw() const
{
    throw *this;
}

void
QueryUserApi::RequestCanceledException::__writeImpl(::IceInternal::BasicStream* __os) const
{
    __os->startWriteSlice("::QueryUserApi::RequestCanceledException", -1, true);
    __os->endWriteSlice();
}

void
QueryUserApi::RequestCanceledException::__readImpl(::IceInternal::BasicStream* __is)
{
    __is->startReadSlice();
    __is->endReadSlice();
}

namespace Ice
{
}

IceAsync::QueryUserApi::AMD_QueryUserI_GetUsersByApp::AMD_QueryUserI_GetUsersByApp(::IceInternal::Incoming& in) :
    ::IceInternal::IncomingAsync(in)
{
}

void
IceAsync::QueryUserApi::AMD_QueryUserI_GetUsersByApp::ice_response(const ::QueryUserApi::bytes& res)
{
    if(__validateResponse(true))
    {
        try
        {
            ::IceInternal::BasicStream* __os = __startWriteParams(::Ice::DefaultFormat);
            __os->write(res);
            __endWriteParams(true);
        }
        catch(const ::Ice::Exception& __ex)
        {
            __exception(__ex);
            return;
        }
        __response();
    }
}

void
IceAsync::QueryUserApi::AMD_QueryUserI_GetUsersByApp::ice_exception(const ::std::exception& ex)
{
    if(const ::QueryUserApi::RequestCanceledException* __ex = dynamic_cast<const ::QueryUserApi::RequestCanceledException*>(&ex))
    {
        if(__validateResponse(false))
        {
            __writeUserException(*__ex, ::Ice::DefaultFormat);
            __response();
        }
    }
    else
    {
        ::IceInternal::IncomingAsync::ice_exception(ex);
    }
}

IceAsync::QueryUserApi::AMD_QueryUserI_GetUsersByRegids::AMD_QueryUserI_GetUsersByRegids(::IceInternal::Incoming& in) :
    ::IceInternal::IncomingAsync(in)
{
}

void
IceAsync::QueryUserApi::AMD_QueryUserI_GetUsersByRegids::ice_response(const ::QueryUserApi::bytes& res)
{
    if(__validateResponse(true))
    {
        try
        {
            ::IceInternal::BasicStream* __os = __startWriteParams(::Ice::DefaultFormat);
            __os->write(res);
            __endWriteParams(true);
        }
        catch(const ::Ice::Exception& __ex)
        {
            __exception(__ex);
            return;
        }
        __response();
    }
}

void
IceAsync::QueryUserApi::AMD_QueryUserI_GetUsersByRegids::ice_exception(const ::std::exception& ex)
{
    if(const ::QueryUserApi::RequestCanceledException* __ex = dynamic_cast<const ::QueryUserApi::RequestCanceledException*>(&ex))
    {
        if(__validateResponse(false))
        {
            __writeUserException(*__ex, ::Ice::DefaultFormat);
            __response();
        }
    }
    else
    {
        ::IceInternal::IncomingAsync::ice_exception(ex);
    }
}

IceAsync::QueryUserApi::AMD_QueryUserI_ValidUsers::AMD_QueryUserI_ValidUsers(::IceInternal::Incoming& in) :
    ::IceInternal::IncomingAsync(in)
{
}

void
IceAsync::QueryUserApi::AMD_QueryUserI_ValidUsers::ice_response(const ::QueryUserApi::bytes& res)
{
    if(__validateResponse(true))
    {
        try
        {
            ::IceInternal::BasicStream* __os = __startWriteParams(::Ice::DefaultFormat);
            __os->write(res);
            __endWriteParams(true);
        }
        catch(const ::Ice::Exception& __ex)
        {
            __exception(__ex);
            return;
        }
        __response();
    }
}

void
IceAsync::QueryUserApi::AMD_QueryUserI_ValidUsers::ice_exception(const ::std::exception& ex)
{
    if(const ::QueryUserApi::RequestCanceledException* __ex = dynamic_cast<const ::QueryUserApi::RequestCanceledException*>(&ex))
    {
        if(__validateResponse(false))
        {
            __writeUserException(*__ex, ::Ice::DefaultFormat);
            __response();
        }
    }
    else
    {
        ::IceInternal::IncomingAsync::ice_exception(ex);
    }
}

IceAsync::QueryUserApi::AMD_QueryUserI_ValidRegids::AMD_QueryUserI_ValidRegids(::IceInternal::Incoming& in) :
    ::IceInternal::IncomingAsync(in)
{
}

void
IceAsync::QueryUserApi::AMD_QueryUserI_ValidRegids::ice_response(const ::QueryUserApi::bytes& res)
{
    if(__validateResponse(true))
    {
        try
        {
            ::IceInternal::BasicStream* __os = __startWriteParams(::Ice::DefaultFormat);
            __os->write(res);
            __endWriteParams(true);
        }
        catch(const ::Ice::Exception& __ex)
        {
            __exception(__ex);
            return;
        }
        __response();
    }
}

void
IceAsync::QueryUserApi::AMD_QueryUserI_ValidRegids::ice_exception(const ::std::exception& ex)
{
    if(const ::QueryUserApi::RequestCanceledException* __ex = dynamic_cast<const ::QueryUserApi::RequestCanceledException*>(&ex))
    {
        if(__validateResponse(false))
        {
            __writeUserException(*__ex, ::Ice::DefaultFormat);
            __response();
        }
    }
    else
    {
        ::IceInternal::IncomingAsync::ice_exception(ex);
    }
}

IceAsync::QueryUserApi::AMD_QueryUserI_ValidAppkeys::AMD_QueryUserI_ValidAppkeys(::IceInternal::Incoming& in) :
    ::IceInternal::IncomingAsync(in)
{
}

void
IceAsync::QueryUserApi::AMD_QueryUserI_ValidAppkeys::ice_response(const ::QueryUserApi::bytes& res)
{
    if(__validateResponse(true))
    {
        try
        {
            ::IceInternal::BasicStream* __os = __startWriteParams(::Ice::DefaultFormat);
            __os->write(res);
            __endWriteParams(true);
        }
        catch(const ::Ice::Exception& __ex)
        {
            __exception(__ex);
            return;
        }
        __response();
    }
}

void
IceAsync::QueryUserApi::AMD_QueryUserI_ValidAppkeys::ice_exception(const ::std::exception& ex)
{
    if(const ::QueryUserApi::RequestCanceledException* __ex = dynamic_cast<const ::QueryUserApi::RequestCanceledException*>(&ex))
    {
        if(__validateResponse(false))
        {
            __writeUserException(*__ex, ::Ice::DefaultFormat);
            __response();
        }
    }
    else
    {
        ::IceInternal::IncomingAsync::ice_exception(ex);
    }
}
::IceProxy::Ice::Object* ::IceProxy::QueryUserApi::upCast(::IceProxy::QueryUserApi::QueryUserI* p) { return p; }

void
::IceProxy::QueryUserApi::__read(::IceInternal::BasicStream* __is, ::IceInternal::ProxyHandle< ::IceProxy::QueryUserApi::QueryUserI>& v)
{
    ::Ice::ObjectPrx proxy;
    __is->read(proxy);
    if(!proxy)
    {
        v = 0;
    }
    else
    {
        v = new ::IceProxy::QueryUserApi::QueryUserI;
        v->__copyFrom(proxy);
    }
}

void
IceProxy::QueryUserApi::QueryUserI::GetUsersByApp(const ::QueryUserApi::bytes& __p_req, ::QueryUserApi::bytes& __p_res, const ::Ice::Context* __ctx)
{
    __checkTwowayOnly(__QueryUserApi__QueryUserI__GetUsersByApp_name);
    ::IceInternal::Outgoing __og(this, __QueryUserApi__QueryUserI__GetUsersByApp_name, ::Ice::Idempotent, __ctx);
    try
    {
        ::IceInternal::BasicStream* __os = __og.startWriteParams(::Ice::DefaultFormat);
        __os->write(__p_req);
        __og.endWriteParams();
    }
    catch(const ::Ice::LocalException& __ex)
    {
        __og.abort(__ex);
    }
    if(!__og.invoke())
    {
        try
        {
            __og.throwUserException();
        }
        catch(const ::QueryUserApi::RequestCanceledException&)
        {
            throw;
        }
        catch(const ::Ice::UserException& __ex)
        {
            ::Ice::UnknownUserException __uue(__FILE__, __LINE__, __ex.ice_name());
            throw __uue;
        }
    }
    ::IceInternal::BasicStream* __is = __og.startReadParams();
    __is->read(__p_res);
    __og.endReadParams();
}

::Ice::AsyncResultPtr
IceProxy::QueryUserApi::QueryUserI::begin_GetUsersByApp(const ::QueryUserApi::bytes& __p_req, const ::Ice::Context* __ctx, const ::IceInternal::CallbackBasePtr& __del, const ::Ice::LocalObjectPtr& __cookie)
{
    __checkAsyncTwowayOnly(__QueryUserApi__QueryUserI__GetUsersByApp_name);
    ::IceInternal::OutgoingAsyncPtr __result = new ::IceInternal::OutgoingAsync(this, __QueryUserApi__QueryUserI__GetUsersByApp_name, __del, __cookie);
    try
    {
        __result->prepare(__QueryUserApi__QueryUserI__GetUsersByApp_name, ::Ice::Idempotent, __ctx);
        ::IceInternal::BasicStream* __os = __result->startWriteParams(::Ice::DefaultFormat);
        __os->write(__p_req);
        __result->endWriteParams();
        __result->invoke();
    }
    catch(const ::Ice::Exception& __ex)
    {
        __result->abort(__ex);
    }
    return __result;
}

#ifdef ICE_CPP11

::Ice::AsyncResultPtr
IceProxy::QueryUserApi::QueryUserI::__begin_GetUsersByApp(const ::QueryUserApi::bytes& __p_req, const ::Ice::Context* __ctx, const ::IceInternal::Function<void (const ::QueryUserApi::bytes&)>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception, const ::IceInternal::Function<void (bool)>& __sent)
{
    class Cpp11CB : public ::IceInternal::Cpp11FnCallbackNC
    {
    public:

        Cpp11CB(const ::std::function<void (const ::QueryUserApi::bytes&)>& responseFunc, const ::std::function<void (const ::Ice::Exception&)>& exceptionFunc, const ::std::function<void (bool)>& sentFunc) :
            ::IceInternal::Cpp11FnCallbackNC(exceptionFunc, sentFunc),
            _response(responseFunc)
        {
            CallbackBase::checkCallback(true, responseFunc || exceptionFunc != nullptr);
        }

        virtual void completed(const ::Ice::AsyncResultPtr& __result) const
        {
            ::QueryUserApi::QueryUserIPrx __proxy = ::QueryUserApi::QueryUserIPrx::uncheckedCast(__result->getProxy());
            ::QueryUserApi::bytes __p_res;
            try
            {
                __proxy->end_GetUsersByApp(__p_res, __result);
            }
            catch(const ::Ice::Exception& ex)
            {
                Cpp11FnCallbackNC::exception(__result, ex);
                return;
            }
            if(_response != nullptr)
            {
                _response(__p_res);
            }
        }
    
    private:
        
        ::std::function<void (const ::QueryUserApi::bytes&)> _response;
    };
    return begin_GetUsersByApp(__p_req, __ctx, new Cpp11CB(__response, __exception, __sent));
}
#endif

void
IceProxy::QueryUserApi::QueryUserI::end_GetUsersByApp(::QueryUserApi::bytes& __p_res, const ::Ice::AsyncResultPtr& __result)
{
    ::Ice::AsyncResult::__check(__result, this, __QueryUserApi__QueryUserI__GetUsersByApp_name);
    if(!__result->__wait())
    {
        try
        {
            __result->__throwUserException();
        }
        catch(const ::QueryUserApi::RequestCanceledException&)
        {
            throw;
        }
        catch(const ::Ice::UserException& __ex)
        {
            throw ::Ice::UnknownUserException(__FILE__, __LINE__, __ex.ice_name());
        }
    }
    ::IceInternal::BasicStream* __is = __result->__startReadParams();
    __is->read(__p_res);
    __result->__endReadParams();
}

void
IceProxy::QueryUserApi::QueryUserI::GetUsersByRegids(const ::QueryUserApi::bytes& __p_req, ::QueryUserApi::bytes& __p_res, const ::Ice::Context* __ctx)
{
    __checkTwowayOnly(__QueryUserApi__QueryUserI__GetUsersByRegids_name);
    ::IceInternal::Outgoing __og(this, __QueryUserApi__QueryUserI__GetUsersByRegids_name, ::Ice::Idempotent, __ctx);
    try
    {
        ::IceInternal::BasicStream* __os = __og.startWriteParams(::Ice::DefaultFormat);
        __os->write(__p_req);
        __og.endWriteParams();
    }
    catch(const ::Ice::LocalException& __ex)
    {
        __og.abort(__ex);
    }
    if(!__og.invoke())
    {
        try
        {
            __og.throwUserException();
        }
        catch(const ::QueryUserApi::RequestCanceledException&)
        {
            throw;
        }
        catch(const ::Ice::UserException& __ex)
        {
            ::Ice::UnknownUserException __uue(__FILE__, __LINE__, __ex.ice_name());
            throw __uue;
        }
    }
    ::IceInternal::BasicStream* __is = __og.startReadParams();
    __is->read(__p_res);
    __og.endReadParams();
}

::Ice::AsyncResultPtr
IceProxy::QueryUserApi::QueryUserI::begin_GetUsersByRegids(const ::QueryUserApi::bytes& __p_req, const ::Ice::Context* __ctx, const ::IceInternal::CallbackBasePtr& __del, const ::Ice::LocalObjectPtr& __cookie)
{
    __checkAsyncTwowayOnly(__QueryUserApi__QueryUserI__GetUsersByRegids_name);
    ::IceInternal::OutgoingAsyncPtr __result = new ::IceInternal::OutgoingAsync(this, __QueryUserApi__QueryUserI__GetUsersByRegids_name, __del, __cookie);
    try
    {
        __result->prepare(__QueryUserApi__QueryUserI__GetUsersByRegids_name, ::Ice::Idempotent, __ctx);
        ::IceInternal::BasicStream* __os = __result->startWriteParams(::Ice::DefaultFormat);
        __os->write(__p_req);
        __result->endWriteParams();
        __result->invoke();
    }
    catch(const ::Ice::Exception& __ex)
    {
        __result->abort(__ex);
    }
    return __result;
}

#ifdef ICE_CPP11

::Ice::AsyncResultPtr
IceProxy::QueryUserApi::QueryUserI::__begin_GetUsersByRegids(const ::QueryUserApi::bytes& __p_req, const ::Ice::Context* __ctx, const ::IceInternal::Function<void (const ::QueryUserApi::bytes&)>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception, const ::IceInternal::Function<void (bool)>& __sent)
{
    class Cpp11CB : public ::IceInternal::Cpp11FnCallbackNC
    {
    public:

        Cpp11CB(const ::std::function<void (const ::QueryUserApi::bytes&)>& responseFunc, const ::std::function<void (const ::Ice::Exception&)>& exceptionFunc, const ::std::function<void (bool)>& sentFunc) :
            ::IceInternal::Cpp11FnCallbackNC(exceptionFunc, sentFunc),
            _response(responseFunc)
        {
            CallbackBase::checkCallback(true, responseFunc || exceptionFunc != nullptr);
        }

        virtual void completed(const ::Ice::AsyncResultPtr& __result) const
        {
            ::QueryUserApi::QueryUserIPrx __proxy = ::QueryUserApi::QueryUserIPrx::uncheckedCast(__result->getProxy());
            ::QueryUserApi::bytes __p_res;
            try
            {
                __proxy->end_GetUsersByRegids(__p_res, __result);
            }
            catch(const ::Ice::Exception& ex)
            {
                Cpp11FnCallbackNC::exception(__result, ex);
                return;
            }
            if(_response != nullptr)
            {
                _response(__p_res);
            }
        }
    
    private:
        
        ::std::function<void (const ::QueryUserApi::bytes&)> _response;
    };
    return begin_GetUsersByRegids(__p_req, __ctx, new Cpp11CB(__response, __exception, __sent));
}
#endif

void
IceProxy::QueryUserApi::QueryUserI::end_GetUsersByRegids(::QueryUserApi::bytes& __p_res, const ::Ice::AsyncResultPtr& __result)
{
    ::Ice::AsyncResult::__check(__result, this, __QueryUserApi__QueryUserI__GetUsersByRegids_name);
    if(!__result->__wait())
    {
        try
        {
            __result->__throwUserException();
        }
        catch(const ::QueryUserApi::RequestCanceledException&)
        {
            throw;
        }
        catch(const ::Ice::UserException& __ex)
        {
            throw ::Ice::UnknownUserException(__FILE__, __LINE__, __ex.ice_name());
        }
    }
    ::IceInternal::BasicStream* __is = __result->__startReadParams();
    __is->read(__p_res);
    __result->__endReadParams();
}

void
IceProxy::QueryUserApi::QueryUserI::ValidUsers(const ::QueryUserApi::bytes& __p_req, ::QueryUserApi::bytes& __p_res, const ::Ice::Context* __ctx)
{
    __checkTwowayOnly(__QueryUserApi__QueryUserI__ValidUsers_name);
    ::IceInternal::Outgoing __og(this, __QueryUserApi__QueryUserI__ValidUsers_name, ::Ice::Idempotent, __ctx);
    try
    {
        ::IceInternal::BasicStream* __os = __og.startWriteParams(::Ice::DefaultFormat);
        __os->write(__p_req);
        __og.endWriteParams();
    }
    catch(const ::Ice::LocalException& __ex)
    {
        __og.abort(__ex);
    }
    if(!__og.invoke())
    {
        try
        {
            __og.throwUserException();
        }
        catch(const ::QueryUserApi::RequestCanceledException&)
        {
            throw;
        }
        catch(const ::Ice::UserException& __ex)
        {
            ::Ice::UnknownUserException __uue(__FILE__, __LINE__, __ex.ice_name());
            throw __uue;
        }
    }
    ::IceInternal::BasicStream* __is = __og.startReadParams();
    __is->read(__p_res);
    __og.endReadParams();
}

::Ice::AsyncResultPtr
IceProxy::QueryUserApi::QueryUserI::begin_ValidUsers(const ::QueryUserApi::bytes& __p_req, const ::Ice::Context* __ctx, const ::IceInternal::CallbackBasePtr& __del, const ::Ice::LocalObjectPtr& __cookie)
{
    __checkAsyncTwowayOnly(__QueryUserApi__QueryUserI__ValidUsers_name);
    ::IceInternal::OutgoingAsyncPtr __result = new ::IceInternal::OutgoingAsync(this, __QueryUserApi__QueryUserI__ValidUsers_name, __del, __cookie);
    try
    {
        __result->prepare(__QueryUserApi__QueryUserI__ValidUsers_name, ::Ice::Idempotent, __ctx);
        ::IceInternal::BasicStream* __os = __result->startWriteParams(::Ice::DefaultFormat);
        __os->write(__p_req);
        __result->endWriteParams();
        __result->invoke();
    }
    catch(const ::Ice::Exception& __ex)
    {
        __result->abort(__ex);
    }
    return __result;
}

#ifdef ICE_CPP11

::Ice::AsyncResultPtr
IceProxy::QueryUserApi::QueryUserI::__begin_ValidUsers(const ::QueryUserApi::bytes& __p_req, const ::Ice::Context* __ctx, const ::IceInternal::Function<void (const ::QueryUserApi::bytes&)>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception, const ::IceInternal::Function<void (bool)>& __sent)
{
    class Cpp11CB : public ::IceInternal::Cpp11FnCallbackNC
    {
    public:

        Cpp11CB(const ::std::function<void (const ::QueryUserApi::bytes&)>& responseFunc, const ::std::function<void (const ::Ice::Exception&)>& exceptionFunc, const ::std::function<void (bool)>& sentFunc) :
            ::IceInternal::Cpp11FnCallbackNC(exceptionFunc, sentFunc),
            _response(responseFunc)
        {
            CallbackBase::checkCallback(true, responseFunc || exceptionFunc != nullptr);
        }

        virtual void completed(const ::Ice::AsyncResultPtr& __result) const
        {
            ::QueryUserApi::QueryUserIPrx __proxy = ::QueryUserApi::QueryUserIPrx::uncheckedCast(__result->getProxy());
            ::QueryUserApi::bytes __p_res;
            try
            {
                __proxy->end_ValidUsers(__p_res, __result);
            }
            catch(const ::Ice::Exception& ex)
            {
                Cpp11FnCallbackNC::exception(__result, ex);
                return;
            }
            if(_response != nullptr)
            {
                _response(__p_res);
            }
        }
    
    private:
        
        ::std::function<void (const ::QueryUserApi::bytes&)> _response;
    };
    return begin_ValidUsers(__p_req, __ctx, new Cpp11CB(__response, __exception, __sent));
}
#endif

void
IceProxy::QueryUserApi::QueryUserI::end_ValidUsers(::QueryUserApi::bytes& __p_res, const ::Ice::AsyncResultPtr& __result)
{
    ::Ice::AsyncResult::__check(__result, this, __QueryUserApi__QueryUserI__ValidUsers_name);
    if(!__result->__wait())
    {
        try
        {
            __result->__throwUserException();
        }
        catch(const ::QueryUserApi::RequestCanceledException&)
        {
            throw;
        }
        catch(const ::Ice::UserException& __ex)
        {
            throw ::Ice::UnknownUserException(__FILE__, __LINE__, __ex.ice_name());
        }
    }
    ::IceInternal::BasicStream* __is = __result->__startReadParams();
    __is->read(__p_res);
    __result->__endReadParams();
}

void
IceProxy::QueryUserApi::QueryUserI::ValidRegids(const ::QueryUserApi::bytes& __p_req, ::QueryUserApi::bytes& __p_res, const ::Ice::Context* __ctx)
{
    __checkTwowayOnly(__QueryUserApi__QueryUserI__ValidRegids_name);
    ::IceInternal::Outgoing __og(this, __QueryUserApi__QueryUserI__ValidRegids_name, ::Ice::Idempotent, __ctx);
    try
    {
        ::IceInternal::BasicStream* __os = __og.startWriteParams(::Ice::DefaultFormat);
        __os->write(__p_req);
        __og.endWriteParams();
    }
    catch(const ::Ice::LocalException& __ex)
    {
        __og.abort(__ex);
    }
    if(!__og.invoke())
    {
        try
        {
            __og.throwUserException();
        }
        catch(const ::QueryUserApi::RequestCanceledException&)
        {
            throw;
        }
        catch(const ::Ice::UserException& __ex)
        {
            ::Ice::UnknownUserException __uue(__FILE__, __LINE__, __ex.ice_name());
            throw __uue;
        }
    }
    ::IceInternal::BasicStream* __is = __og.startReadParams();
    __is->read(__p_res);
    __og.endReadParams();
}

::Ice::AsyncResultPtr
IceProxy::QueryUserApi::QueryUserI::begin_ValidRegids(const ::QueryUserApi::bytes& __p_req, const ::Ice::Context* __ctx, const ::IceInternal::CallbackBasePtr& __del, const ::Ice::LocalObjectPtr& __cookie)
{
    __checkAsyncTwowayOnly(__QueryUserApi__QueryUserI__ValidRegids_name);
    ::IceInternal::OutgoingAsyncPtr __result = new ::IceInternal::OutgoingAsync(this, __QueryUserApi__QueryUserI__ValidRegids_name, __del, __cookie);
    try
    {
        __result->prepare(__QueryUserApi__QueryUserI__ValidRegids_name, ::Ice::Idempotent, __ctx);
        ::IceInternal::BasicStream* __os = __result->startWriteParams(::Ice::DefaultFormat);
        __os->write(__p_req);
        __result->endWriteParams();
        __result->invoke();
    }
    catch(const ::Ice::Exception& __ex)
    {
        __result->abort(__ex);
    }
    return __result;
}

#ifdef ICE_CPP11

::Ice::AsyncResultPtr
IceProxy::QueryUserApi::QueryUserI::__begin_ValidRegids(const ::QueryUserApi::bytes& __p_req, const ::Ice::Context* __ctx, const ::IceInternal::Function<void (const ::QueryUserApi::bytes&)>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception, const ::IceInternal::Function<void (bool)>& __sent)
{
    class Cpp11CB : public ::IceInternal::Cpp11FnCallbackNC
    {
    public:

        Cpp11CB(const ::std::function<void (const ::QueryUserApi::bytes&)>& responseFunc, const ::std::function<void (const ::Ice::Exception&)>& exceptionFunc, const ::std::function<void (bool)>& sentFunc) :
            ::IceInternal::Cpp11FnCallbackNC(exceptionFunc, sentFunc),
            _response(responseFunc)
        {
            CallbackBase::checkCallback(true, responseFunc || exceptionFunc != nullptr);
        }

        virtual void completed(const ::Ice::AsyncResultPtr& __result) const
        {
            ::QueryUserApi::QueryUserIPrx __proxy = ::QueryUserApi::QueryUserIPrx::uncheckedCast(__result->getProxy());
            ::QueryUserApi::bytes __p_res;
            try
            {
                __proxy->end_ValidRegids(__p_res, __result);
            }
            catch(const ::Ice::Exception& ex)
            {
                Cpp11FnCallbackNC::exception(__result, ex);
                return;
            }
            if(_response != nullptr)
            {
                _response(__p_res);
            }
        }
    
    private:
        
        ::std::function<void (const ::QueryUserApi::bytes&)> _response;
    };
    return begin_ValidRegids(__p_req, __ctx, new Cpp11CB(__response, __exception, __sent));
}
#endif

void
IceProxy::QueryUserApi::QueryUserI::end_ValidRegids(::QueryUserApi::bytes& __p_res, const ::Ice::AsyncResultPtr& __result)
{
    ::Ice::AsyncResult::__check(__result, this, __QueryUserApi__QueryUserI__ValidRegids_name);
    if(!__result->__wait())
    {
        try
        {
            __result->__throwUserException();
        }
        catch(const ::QueryUserApi::RequestCanceledException&)
        {
            throw;
        }
        catch(const ::Ice::UserException& __ex)
        {
            throw ::Ice::UnknownUserException(__FILE__, __LINE__, __ex.ice_name());
        }
    }
    ::IceInternal::BasicStream* __is = __result->__startReadParams();
    __is->read(__p_res);
    __result->__endReadParams();
}

void
IceProxy::QueryUserApi::QueryUserI::ValidAppkeys(const ::QueryUserApi::bytes& __p_req, ::QueryUserApi::bytes& __p_res, const ::Ice::Context* __ctx)
{
    __checkTwowayOnly(__QueryUserApi__QueryUserI__ValidAppkeys_name);
    ::IceInternal::Outgoing __og(this, __QueryUserApi__QueryUserI__ValidAppkeys_name, ::Ice::Idempotent, __ctx);
    try
    {
        ::IceInternal::BasicStream* __os = __og.startWriteParams(::Ice::DefaultFormat);
        __os->write(__p_req);
        __og.endWriteParams();
    }
    catch(const ::Ice::LocalException& __ex)
    {
        __og.abort(__ex);
    }
    if(!__og.invoke())
    {
        try
        {
            __og.throwUserException();
        }
        catch(const ::QueryUserApi::RequestCanceledException&)
        {
            throw;
        }
        catch(const ::Ice::UserException& __ex)
        {
            ::Ice::UnknownUserException __uue(__FILE__, __LINE__, __ex.ice_name());
            throw __uue;
        }
    }
    ::IceInternal::BasicStream* __is = __og.startReadParams();
    __is->read(__p_res);
    __og.endReadParams();
}

::Ice::AsyncResultPtr
IceProxy::QueryUserApi::QueryUserI::begin_ValidAppkeys(const ::QueryUserApi::bytes& __p_req, const ::Ice::Context* __ctx, const ::IceInternal::CallbackBasePtr& __del, const ::Ice::LocalObjectPtr& __cookie)
{
    __checkAsyncTwowayOnly(__QueryUserApi__QueryUserI__ValidAppkeys_name);
    ::IceInternal::OutgoingAsyncPtr __result = new ::IceInternal::OutgoingAsync(this, __QueryUserApi__QueryUserI__ValidAppkeys_name, __del, __cookie);
    try
    {
        __result->prepare(__QueryUserApi__QueryUserI__ValidAppkeys_name, ::Ice::Idempotent, __ctx);
        ::IceInternal::BasicStream* __os = __result->startWriteParams(::Ice::DefaultFormat);
        __os->write(__p_req);
        __result->endWriteParams();
        __result->invoke();
    }
    catch(const ::Ice::Exception& __ex)
    {
        __result->abort(__ex);
    }
    return __result;
}

#ifdef ICE_CPP11

::Ice::AsyncResultPtr
IceProxy::QueryUserApi::QueryUserI::__begin_ValidAppkeys(const ::QueryUserApi::bytes& __p_req, const ::Ice::Context* __ctx, const ::IceInternal::Function<void (const ::QueryUserApi::bytes&)>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception, const ::IceInternal::Function<void (bool)>& __sent)
{
    class Cpp11CB : public ::IceInternal::Cpp11FnCallbackNC
    {
    public:

        Cpp11CB(const ::std::function<void (const ::QueryUserApi::bytes&)>& responseFunc, const ::std::function<void (const ::Ice::Exception&)>& exceptionFunc, const ::std::function<void (bool)>& sentFunc) :
            ::IceInternal::Cpp11FnCallbackNC(exceptionFunc, sentFunc),
            _response(responseFunc)
        {
            CallbackBase::checkCallback(true, responseFunc || exceptionFunc != nullptr);
        }

        virtual void completed(const ::Ice::AsyncResultPtr& __result) const
        {
            ::QueryUserApi::QueryUserIPrx __proxy = ::QueryUserApi::QueryUserIPrx::uncheckedCast(__result->getProxy());
            ::QueryUserApi::bytes __p_res;
            try
            {
                __proxy->end_ValidAppkeys(__p_res, __result);
            }
            catch(const ::Ice::Exception& ex)
            {
                Cpp11FnCallbackNC::exception(__result, ex);
                return;
            }
            if(_response != nullptr)
            {
                _response(__p_res);
            }
        }
    
    private:
        
        ::std::function<void (const ::QueryUserApi::bytes&)> _response;
    };
    return begin_ValidAppkeys(__p_req, __ctx, new Cpp11CB(__response, __exception, __sent));
}
#endif

void
IceProxy::QueryUserApi::QueryUserI::end_ValidAppkeys(::QueryUserApi::bytes& __p_res, const ::Ice::AsyncResultPtr& __result)
{
    ::Ice::AsyncResult::__check(__result, this, __QueryUserApi__QueryUserI__ValidAppkeys_name);
    if(!__result->__wait())
    {
        try
        {
            __result->__throwUserException();
        }
        catch(const ::QueryUserApi::RequestCanceledException&)
        {
            throw;
        }
        catch(const ::Ice::UserException& __ex)
        {
            throw ::Ice::UnknownUserException(__FILE__, __LINE__, __ex.ice_name());
        }
    }
    ::IceInternal::BasicStream* __is = __result->__startReadParams();
    __is->read(__p_res);
    __result->__endReadParams();
}

const ::std::string&
IceProxy::QueryUserApi::QueryUserI::ice_staticId()
{
    return ::QueryUserApi::QueryUserI::ice_staticId();
}

::IceProxy::Ice::Object*
IceProxy::QueryUserApi::QueryUserI::__newInstance() const
{
    return new QueryUserI;
}

::Ice::Object* QueryUserApi::upCast(::QueryUserApi::QueryUserI* p) { return p; }

namespace
{
const ::std::string __QueryUserApi__QueryUserI_ids[2] =
{
    "::Ice::Object",
    "::QueryUserApi::QueryUserI"
};

}

bool
QueryUserApi::QueryUserI::ice_isA(const ::std::string& _s, const ::Ice::Current&) const
{
    return ::std::binary_search(__QueryUserApi__QueryUserI_ids, __QueryUserApi__QueryUserI_ids + 2, _s);
}

::std::vector< ::std::string>
QueryUserApi::QueryUserI::ice_ids(const ::Ice::Current&) const
{
    return ::std::vector< ::std::string>(&__QueryUserApi__QueryUserI_ids[0], &__QueryUserApi__QueryUserI_ids[2]);
}

const ::std::string&
QueryUserApi::QueryUserI::ice_id(const ::Ice::Current&) const
{
    return __QueryUserApi__QueryUserI_ids[1];
}

const ::std::string&
QueryUserApi::QueryUserI::ice_staticId()
{
#ifdef ICE_HAS_THREAD_SAFE_LOCAL_STATIC
    static const ::std::string typeId = "::QueryUserApi::QueryUserI";
    return typeId;
#else
    return __QueryUserApi__QueryUserI_ids[1];
#endif
}

::Ice::DispatchStatus
QueryUserApi::QueryUserI::___GetUsersByApp(::IceInternal::Incoming& __inS, const ::Ice::Current& __current)
{
    __checkMode(::Ice::Idempotent, __current.mode);
    ::IceInternal::BasicStream* __is = __inS.startReadParams();
    ::QueryUserApi::bytes __p_req;
    __is->read(__p_req);
    __inS.endReadParams();
    ::QueryUserApi::AMD_QueryUserI_GetUsersByAppPtr __cb = new IceAsync::QueryUserApi::AMD_QueryUserI_GetUsersByApp(__inS);
    try
    {
        GetUsersByApp_async(__cb, __p_req, __current);
    }
    catch(const ::std::exception& __ex)
    {
        __cb->ice_exception(__ex);
    }
    catch(...)
    {
        __cb->ice_exception();
    }
    return ::Ice::DispatchAsync;
}

::Ice::DispatchStatus
QueryUserApi::QueryUserI::___GetUsersByRegids(::IceInternal::Incoming& __inS, const ::Ice::Current& __current)
{
    __checkMode(::Ice::Idempotent, __current.mode);
    ::IceInternal::BasicStream* __is = __inS.startReadParams();
    ::QueryUserApi::bytes __p_req;
    __is->read(__p_req);
    __inS.endReadParams();
    ::QueryUserApi::AMD_QueryUserI_GetUsersByRegidsPtr __cb = new IceAsync::QueryUserApi::AMD_QueryUserI_GetUsersByRegids(__inS);
    try
    {
        GetUsersByRegids_async(__cb, __p_req, __current);
    }
    catch(const ::std::exception& __ex)
    {
        __cb->ice_exception(__ex);
    }
    catch(...)
    {
        __cb->ice_exception();
    }
    return ::Ice::DispatchAsync;
}

::Ice::DispatchStatus
QueryUserApi::QueryUserI::___ValidUsers(::IceInternal::Incoming& __inS, const ::Ice::Current& __current)
{
    __checkMode(::Ice::Idempotent, __current.mode);
    ::IceInternal::BasicStream* __is = __inS.startReadParams();
    ::QueryUserApi::bytes __p_req;
    __is->read(__p_req);
    __inS.endReadParams();
    ::QueryUserApi::AMD_QueryUserI_ValidUsersPtr __cb = new IceAsync::QueryUserApi::AMD_QueryUserI_ValidUsers(__inS);
    try
    {
        ValidUsers_async(__cb, __p_req, __current);
    }
    catch(const ::std::exception& __ex)
    {
        __cb->ice_exception(__ex);
    }
    catch(...)
    {
        __cb->ice_exception();
    }
    return ::Ice::DispatchAsync;
}

::Ice::DispatchStatus
QueryUserApi::QueryUserI::___ValidRegids(::IceInternal::Incoming& __inS, const ::Ice::Current& __current)
{
    __checkMode(::Ice::Idempotent, __current.mode);
    ::IceInternal::BasicStream* __is = __inS.startReadParams();
    ::QueryUserApi::bytes __p_req;
    __is->read(__p_req);
    __inS.endReadParams();
    ::QueryUserApi::AMD_QueryUserI_ValidRegidsPtr __cb = new IceAsync::QueryUserApi::AMD_QueryUserI_ValidRegids(__inS);
    try
    {
        ValidRegids_async(__cb, __p_req, __current);
    }
    catch(const ::std::exception& __ex)
    {
        __cb->ice_exception(__ex);
    }
    catch(...)
    {
        __cb->ice_exception();
    }
    return ::Ice::DispatchAsync;
}

::Ice::DispatchStatus
QueryUserApi::QueryUserI::___ValidAppkeys(::IceInternal::Incoming& __inS, const ::Ice::Current& __current)
{
    __checkMode(::Ice::Idempotent, __current.mode);
    ::IceInternal::BasicStream* __is = __inS.startReadParams();
    ::QueryUserApi::bytes __p_req;
    __is->read(__p_req);
    __inS.endReadParams();
    ::QueryUserApi::AMD_QueryUserI_ValidAppkeysPtr __cb = new IceAsync::QueryUserApi::AMD_QueryUserI_ValidAppkeys(__inS);
    try
    {
        ValidAppkeys_async(__cb, __p_req, __current);
    }
    catch(const ::std::exception& __ex)
    {
        __cb->ice_exception(__ex);
    }
    catch(...)
    {
        __cb->ice_exception();
    }
    return ::Ice::DispatchAsync;
}

namespace
{
const ::std::string __QueryUserApi__QueryUserI_all[] =
{
    "GetUsersByApp",
    "GetUsersByRegids",
    "ValidAppkeys",
    "ValidRegids",
    "ValidUsers",
    "ice_id",
    "ice_ids",
    "ice_isA",
    "ice_ping"
};

}

::Ice::DispatchStatus
QueryUserApi::QueryUserI::__dispatch(::IceInternal::Incoming& in, const ::Ice::Current& current)
{
    ::std::pair< const ::std::string*, const ::std::string*> r = ::std::equal_range(__QueryUserApi__QueryUserI_all, __QueryUserApi__QueryUserI_all + 9, current.operation);
    if(r.first == r.second)
    {
        throw ::Ice::OperationNotExistException(__FILE__, __LINE__, current.id, current.facet, current.operation);
    }

    switch(r.first - __QueryUserApi__QueryUserI_all)
    {
        case 0:
        {
            return ___GetUsersByApp(in, current);
        }
        case 1:
        {
            return ___GetUsersByRegids(in, current);
        }
        case 2:
        {
            return ___ValidAppkeys(in, current);
        }
        case 3:
        {
            return ___ValidRegids(in, current);
        }
        case 4:
        {
            return ___ValidUsers(in, current);
        }
        case 5:
        {
            return ___ice_id(in, current);
        }
        case 6:
        {
            return ___ice_ids(in, current);
        }
        case 7:
        {
            return ___ice_isA(in, current);
        }
        case 8:
        {
            return ___ice_ping(in, current);
        }
    }

    assert(false);
    throw ::Ice::OperationNotExistException(__FILE__, __LINE__, current.id, current.facet, current.operation);
}

void
QueryUserApi::QueryUserI::__writeImpl(::IceInternal::BasicStream* __os) const
{
    __os->startWriteSlice(ice_staticId(), -1, true);
    __os->endWriteSlice();
}

void
QueryUserApi::QueryUserI::__readImpl(::IceInternal::BasicStream* __is)
{
    __is->startReadSlice();
    __is->endReadSlice();
}

void 
QueryUserApi::__patch(QueryUserIPtr& handle, const ::Ice::ObjectPtr& v)
{
    handle = ::QueryUserApi::QueryUserIPtr::dynamicCast(v);
    if(v && !handle)
    {
        IceInternal::Ex::throwUOE(::QueryUserApi::QueryUserI::ice_staticId(), v);
    }
}
