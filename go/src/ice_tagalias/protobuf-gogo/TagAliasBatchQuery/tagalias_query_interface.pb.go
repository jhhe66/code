// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: TagAliasBatchQuery/tagalias_query_interface.proto

/*
	Package TagAliasBatchQuery is a generated protocol buffer package.

	It is generated from these files:
		TagAliasBatchQuery/tagalias_query_interface.proto

	It has these top-level messages:
		OpsUnit
		TagAliasQuery
		TagAliasQueryII
		TagAlsResult
		TagAlsResp
*/
package TagAliasBatchQuery

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"
import tagalias_common "ice_tagalias/protobuf/tagalias_common"

import io "io"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

type OpsUnit struct {
	Cmd              *tagalias_common.QUERY_ACTION `protobuf:"varint,1,opt,name=cmd,enum=QUERY_ACTION" json:"cmd,omitempty"`
	Page             *int32                        `protobuf:"varint,2,opt,name=page,def=1" json:"page,omitempty"`
	Uid              []int64                       `protobuf:"varint,3,rep,name=uid" json:"uid,omitempty"`
	Tags             [][]byte                      `protobuf:"bytes,4,rep,name=tags" json:"tags,omitempty"`
	Alias            [][]byte                      `protobuf:"bytes,5,rep,name=alias" json:"alias,omitempty"`
	Queryk           []byte                        `protobuf:"bytes,6,opt,name=queryk" json:"queryk,omitempty"`
	DevType          *tagalias_common.DEVSUBTYPE   `protobuf:"varint,7,opt,name=dev_type,enum=DEVSUBTYPE,def=1" json:"dev_type,omitempty"`
	Total            []int32                       `protobuf:"varint,8,rep,name=total" json:"total,omitempty"`
	XXX_unrecognized []byte                        `json:"-"`
}

func (m *OpsUnit) Reset()                    { *m = OpsUnit{} }
func (m *OpsUnit) String() string            { return proto.CompactTextString(m) }
func (*OpsUnit) ProtoMessage()               {}
func (*OpsUnit) Descriptor() ([]byte, []int) { return fileDescriptorTagaliasQueryInterface, []int{0} }

const Default_OpsUnit_Page int32 = 1
const Default_OpsUnit_DevType tagalias_common.DEVSUBTYPE = tagalias_common.DEVSUBTYPE_NORMAL_TYPE

func (m *OpsUnit) GetCmd() tagalias_common.QUERY_ACTION {
	if m != nil && m.Cmd != nil {
		return *m.Cmd
	}
	return tagalias_common.QUERY_ACTION_GET_TAGS_BY_USER
}

func (m *OpsUnit) GetPage() int32 {
	if m != nil && m.Page != nil {
		return *m.Page
	}
	return Default_OpsUnit_Page
}

func (m *OpsUnit) GetUid() []int64 {
	if m != nil {
		return m.Uid
	}
	return nil
}

func (m *OpsUnit) GetTags() [][]byte {
	if m != nil {
		return m.Tags
	}
	return nil
}

func (m *OpsUnit) GetAlias() [][]byte {
	if m != nil {
		return m.Alias
	}
	return nil
}

func (m *OpsUnit) GetQueryk() []byte {
	if m != nil {
		return m.Queryk
	}
	return nil
}

func (m *OpsUnit) GetDevType() tagalias_common.DEVSUBTYPE {
	if m != nil && m.DevType != nil {
		return *m.DevType
	}
	return Default_OpsUnit_DevType
}

func (m *OpsUnit) GetTotal() []int32 {
	if m != nil {
		return m.Total
	}
	return nil
}

// for first query!
type TagAliasQuery struct {
	ReqNo            *int64                    `protobuf:"varint,1,opt,name=reqNo,def=0" json:"reqNo,omitempty"`
	Appkey           []byte                    `protobuf:"bytes,2,opt,name=appkey" json:"appkey,omitempty"`
	Platform         *tagalias_common.PLATFORM `protobuf:"varint,3,opt,name=platform,enum=PLATFORM" json:"platform,omitempty"`
	Query            []*OpsUnit                `protobuf:"bytes,4,rep,name=query" json:"query,omitempty"`
	XXX_unrecognized []byte                    `json:"-"`
}

func (m *TagAliasQuery) Reset()         { *m = TagAliasQuery{} }
func (m *TagAliasQuery) String() string { return proto.CompactTextString(m) }
func (*TagAliasQuery) ProtoMessage()    {}
func (*TagAliasQuery) Descriptor() ([]byte, []int) {
	return fileDescriptorTagaliasQueryInterface, []int{1}
}

const Default_TagAliasQuery_ReqNo int64 = 0

func (m *TagAliasQuery) GetReqNo() int64 {
	if m != nil && m.ReqNo != nil {
		return *m.ReqNo
	}
	return Default_TagAliasQuery_ReqNo
}

func (m *TagAliasQuery) GetAppkey() []byte {
	if m != nil {
		return m.Appkey
	}
	return nil
}

func (m *TagAliasQuery) GetPlatform() tagalias_common.PLATFORM {
	if m != nil && m.Platform != nil {
		return *m.Platform
	}
	return tagalias_common.PLATFORM_ANDROID
}

func (m *TagAliasQuery) GetQuery() []*OpsUnit {
	if m != nil {
		return m.Query
	}
	return nil
}

// for remain result!
type TagAliasQueryII struct {
	ReqNo            *int64                        `protobuf:"varint,1,opt,name=reqNo" json:"reqNo,omitempty"`
	Total            *int32                        `protobuf:"varint,2,opt,name=total" json:"total,omitempty"`
	Page             *int32                        `protobuf:"varint,3,opt,name=page" json:"page,omitempty"`
	Cmd              *tagalias_common.QUERY_ACTION `protobuf:"varint,4,opt,name=cmd,enum=QUERY_ACTION" json:"cmd,omitempty"`
	QueryK           []byte                        `protobuf:"bytes,5,opt,name=queryK" json:"queryK,omitempty"`
	XXX_unrecognized []byte                        `json:"-"`
}

func (m *TagAliasQueryII) Reset()         { *m = TagAliasQueryII{} }
func (m *TagAliasQueryII) String() string { return proto.CompactTextString(m) }
func (*TagAliasQueryII) ProtoMessage()    {}
func (*TagAliasQueryII) Descriptor() ([]byte, []int) {
	return fileDescriptorTagaliasQueryInterface, []int{2}
}

func (m *TagAliasQueryII) GetReqNo() int64 {
	if m != nil && m.ReqNo != nil {
		return *m.ReqNo
	}
	return 0
}

func (m *TagAliasQueryII) GetTotal() int32 {
	if m != nil && m.Total != nil {
		return *m.Total
	}
	return 0
}

func (m *TagAliasQueryII) GetPage() int32 {
	if m != nil && m.Page != nil {
		return *m.Page
	}
	return 0
}

func (m *TagAliasQueryII) GetCmd() tagalias_common.QUERY_ACTION {
	if m != nil && m.Cmd != nil {
		return *m.Cmd
	}
	return tagalias_common.QUERY_ACTION_GET_TAGS_BY_USER
}

func (m *TagAliasQueryII) GetQueryK() []byte {
	if m != nil {
		return m.QueryK
	}
	return nil
}

// result
// 响应：
type TagAlsResult struct {
	ReqType          *tagalias_common.QUERY_ACTION `protobuf:"varint,1,opt,name=req_type,enum=QUERY_ACTION" json:"req_type,omitempty"`
	Code             *tagalias_common.STATUS       `protobuf:"varint,2,opt,name=code,enum=STATUS,def=0" json:"code,omitempty"`
	Msg              []byte                        `protobuf:"bytes,3,opt,name=msg,def=SUCCESS" json:"msg,omitempty"`
	Total            *int32                        `protobuf:"varint,4,opt,name=total,def=1" json:"total,omitempty"`
	Cur              *int32                        `protobuf:"varint,5,opt,name=cur,def=1" json:"cur,omitempty"`
	Expired          *uint32                       `protobuf:"varint,6,opt,name=expired" json:"expired,omitempty"`
	QueryK           []byte                        `protobuf:"bytes,7,opt,name=queryK" json:"queryK,omitempty"`
	Uid              []int64                       `protobuf:"varint,8,rep,name=uid" json:"uid,omitempty"`
	Ouid             []int64                       `protobuf:"varint,9,rep,name=ouid" json:"ouid,omitempty"`
	UidCount         *int32                        `protobuf:"varint,10,opt,name=uid_count" json:"uid_count,omitempty"`
	Tags             [][]byte                      `protobuf:"bytes,11,rep,name=tags" json:"tags,omitempty"`
	Alias            [][]byte                      `protobuf:"bytes,12,rep,name=alias" json:"alias,omitempty"`
	DevType          *tagalias_common.DEVSUBTYPE   `protobuf:"varint,13,opt,name=dev_type,enum=DEVSUBTYPE,def=1" json:"dev_type,omitempty"`
	XXX_unrecognized []byte                        `json:"-"`
}

func (m *TagAlsResult) Reset()         { *m = TagAlsResult{} }
func (m *TagAlsResult) String() string { return proto.CompactTextString(m) }
func (*TagAlsResult) ProtoMessage()    {}
func (*TagAlsResult) Descriptor() ([]byte, []int) {
	return fileDescriptorTagaliasQueryInterface, []int{3}
}

const Default_TagAlsResult_Code tagalias_common.STATUS = tagalias_common.STATUS_SUCCESS

var Default_TagAlsResult_Msg []byte = []byte("SUCCESS")

const Default_TagAlsResult_Total int32 = 1
const Default_TagAlsResult_Cur int32 = 1
const Default_TagAlsResult_DevType tagalias_common.DEVSUBTYPE = tagalias_common.DEVSUBTYPE_NORMAL_TYPE

func (m *TagAlsResult) GetReqType() tagalias_common.QUERY_ACTION {
	if m != nil && m.ReqType != nil {
		return *m.ReqType
	}
	return tagalias_common.QUERY_ACTION_GET_TAGS_BY_USER
}

func (m *TagAlsResult) GetCode() tagalias_common.STATUS {
	if m != nil && m.Code != nil {
		return *m.Code
	}
	return Default_TagAlsResult_Code
}

func (m *TagAlsResult) GetMsg() []byte {
	if m != nil && m.Msg != nil {
		return m.Msg
	}
	return append([]byte(nil), Default_TagAlsResult_Msg...)
}

func (m *TagAlsResult) GetTotal() int32 {
	if m != nil && m.Total != nil {
		return *m.Total
	}
	return Default_TagAlsResult_Total
}

func (m *TagAlsResult) GetCur() int32 {
	if m != nil && m.Cur != nil {
		return *m.Cur
	}
	return Default_TagAlsResult_Cur
}

func (m *TagAlsResult) GetExpired() uint32 {
	if m != nil && m.Expired != nil {
		return *m.Expired
	}
	return 0
}

func (m *TagAlsResult) GetQueryK() []byte {
	if m != nil {
		return m.QueryK
	}
	return nil
}

func (m *TagAlsResult) GetUid() []int64 {
	if m != nil {
		return m.Uid
	}
	return nil
}

func (m *TagAlsResult) GetOuid() []int64 {
	if m != nil {
		return m.Ouid
	}
	return nil
}

func (m *TagAlsResult) GetUidCount() int32 {
	if m != nil && m.UidCount != nil {
		return *m.UidCount
	}
	return 0
}

func (m *TagAlsResult) GetTags() [][]byte {
	if m != nil {
		return m.Tags
	}
	return nil
}

func (m *TagAlsResult) GetAlias() [][]byte {
	if m != nil {
		return m.Alias
	}
	return nil
}

func (m *TagAlsResult) GetDevType() tagalias_common.DEVSUBTYPE {
	if m != nil && m.DevType != nil {
		return *m.DevType
	}
	return Default_TagAlsResult_DevType
}

type TagAlsResp struct {
	ReqNo            *int64                    `protobuf:"varint,1,opt,name=reqNo" json:"reqNo,omitempty"`
	Code             *int32                    `protobuf:"varint,2,opt,name=code" json:"code,omitempty"`
	Appkey           []byte                    `protobuf:"bytes,3,opt,name=appkey" json:"appkey,omitempty"`
	Platform         *tagalias_common.PLATFORM `protobuf:"varint,4,opt,name=platform,enum=PLATFORM" json:"platform,omitempty"`
	Result           []*TagAlsResult           `protobuf:"bytes,5,rep,name=result" json:"result,omitempty"`
	XXX_unrecognized []byte                    `json:"-"`
}

func (m *TagAlsResp) Reset()                    { *m = TagAlsResp{} }
func (m *TagAlsResp) String() string            { return proto.CompactTextString(m) }
func (*TagAlsResp) ProtoMessage()               {}
func (*TagAlsResp) Descriptor() ([]byte, []int) { return fileDescriptorTagaliasQueryInterface, []int{4} }

func (m *TagAlsResp) GetReqNo() int64 {
	if m != nil && m.ReqNo != nil {
		return *m.ReqNo
	}
	return 0
}

func (m *TagAlsResp) GetCode() int32 {
	if m != nil && m.Code != nil {
		return *m.Code
	}
	return 0
}

func (m *TagAlsResp) GetAppkey() []byte {
	if m != nil {
		return m.Appkey
	}
	return nil
}

func (m *TagAlsResp) GetPlatform() tagalias_common.PLATFORM {
	if m != nil && m.Platform != nil {
		return *m.Platform
	}
	return tagalias_common.PLATFORM_ANDROID
}

func (m *TagAlsResp) GetResult() []*TagAlsResult {
	if m != nil {
		return m.Result
	}
	return nil
}

func init() {
	proto.RegisterType((*OpsUnit)(nil), "TagAliasBatchQuery.OpsUnit")
	proto.RegisterType((*TagAliasQuery)(nil), "TagAliasBatchQuery.TagAliasQuery")
	proto.RegisterType((*TagAliasQueryII)(nil), "TagAliasBatchQuery.TagAliasQueryII")
	proto.RegisterType((*TagAlsResult)(nil), "TagAliasBatchQuery.TagAlsResult")
	proto.RegisterType((*TagAlsResp)(nil), "TagAliasBatchQuery.TagAlsResp")
}
func (m *OpsUnit) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *OpsUnit) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Cmd != nil {
		dAtA[i] = 0x8
		i++
		i = encodeVarintTagaliasQueryInterface(dAtA, i, uint64(*m.Cmd))
	}
	if m.Page != nil {
		dAtA[i] = 0x10
		i++
		i = encodeVarintTagaliasQueryInterface(dAtA, i, uint64(*m.Page))
	}
	if len(m.Uid) > 0 {
		for _, num := range m.Uid {
			dAtA[i] = 0x18
			i++
			i = encodeVarintTagaliasQueryInterface(dAtA, i, uint64(num))
		}
	}
	if len(m.Tags) > 0 {
		for _, b := range m.Tags {
			dAtA[i] = 0x22
			i++
			i = encodeVarintTagaliasQueryInterface(dAtA, i, uint64(len(b)))
			i += copy(dAtA[i:], b)
		}
	}
	if len(m.Alias) > 0 {
		for _, b := range m.Alias {
			dAtA[i] = 0x2a
			i++
			i = encodeVarintTagaliasQueryInterface(dAtA, i, uint64(len(b)))
			i += copy(dAtA[i:], b)
		}
	}
	if m.Queryk != nil {
		dAtA[i] = 0x32
		i++
		i = encodeVarintTagaliasQueryInterface(dAtA, i, uint64(len(m.Queryk)))
		i += copy(dAtA[i:], m.Queryk)
	}
	if m.DevType != nil {
		dAtA[i] = 0x38
		i++
		i = encodeVarintTagaliasQueryInterface(dAtA, i, uint64(*m.DevType))
	}
	if len(m.Total) > 0 {
		for _, num := range m.Total {
			dAtA[i] = 0x40
			i++
			i = encodeVarintTagaliasQueryInterface(dAtA, i, uint64(num))
		}
	}
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func (m *TagAliasQuery) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *TagAliasQuery) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.ReqNo != nil {
		dAtA[i] = 0x8
		i++
		i = encodeVarintTagaliasQueryInterface(dAtA, i, uint64(*m.ReqNo))
	}
	if m.Appkey != nil {
		dAtA[i] = 0x12
		i++
		i = encodeVarintTagaliasQueryInterface(dAtA, i, uint64(len(m.Appkey)))
		i += copy(dAtA[i:], m.Appkey)
	}
	if m.Platform != nil {
		dAtA[i] = 0x18
		i++
		i = encodeVarintTagaliasQueryInterface(dAtA, i, uint64(*m.Platform))
	}
	if len(m.Query) > 0 {
		for _, msg := range m.Query {
			dAtA[i] = 0x22
			i++
			i = encodeVarintTagaliasQueryInterface(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func (m *TagAliasQueryII) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *TagAliasQueryII) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.ReqNo != nil {
		dAtA[i] = 0x8
		i++
		i = encodeVarintTagaliasQueryInterface(dAtA, i, uint64(*m.ReqNo))
	}
	if m.Total != nil {
		dAtA[i] = 0x10
		i++
		i = encodeVarintTagaliasQueryInterface(dAtA, i, uint64(*m.Total))
	}
	if m.Page != nil {
		dAtA[i] = 0x18
		i++
		i = encodeVarintTagaliasQueryInterface(dAtA, i, uint64(*m.Page))
	}
	if m.Cmd != nil {
		dAtA[i] = 0x20
		i++
		i = encodeVarintTagaliasQueryInterface(dAtA, i, uint64(*m.Cmd))
	}
	if m.QueryK != nil {
		dAtA[i] = 0x2a
		i++
		i = encodeVarintTagaliasQueryInterface(dAtA, i, uint64(len(m.QueryK)))
		i += copy(dAtA[i:], m.QueryK)
	}
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func (m *TagAlsResult) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *TagAlsResult) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.ReqType != nil {
		dAtA[i] = 0x8
		i++
		i = encodeVarintTagaliasQueryInterface(dAtA, i, uint64(*m.ReqType))
	}
	if m.Code != nil {
		dAtA[i] = 0x10
		i++
		i = encodeVarintTagaliasQueryInterface(dAtA, i, uint64(*m.Code))
	}
	if m.Msg != nil {
		dAtA[i] = 0x1a
		i++
		i = encodeVarintTagaliasQueryInterface(dAtA, i, uint64(len(m.Msg)))
		i += copy(dAtA[i:], m.Msg)
	}
	if m.Total != nil {
		dAtA[i] = 0x20
		i++
		i = encodeVarintTagaliasQueryInterface(dAtA, i, uint64(*m.Total))
	}
	if m.Cur != nil {
		dAtA[i] = 0x28
		i++
		i = encodeVarintTagaliasQueryInterface(dAtA, i, uint64(*m.Cur))
	}
	if m.Expired != nil {
		dAtA[i] = 0x30
		i++
		i = encodeVarintTagaliasQueryInterface(dAtA, i, uint64(*m.Expired))
	}
	if m.QueryK != nil {
		dAtA[i] = 0x3a
		i++
		i = encodeVarintTagaliasQueryInterface(dAtA, i, uint64(len(m.QueryK)))
		i += copy(dAtA[i:], m.QueryK)
	}
	if len(m.Uid) > 0 {
		for _, num := range m.Uid {
			dAtA[i] = 0x40
			i++
			i = encodeVarintTagaliasQueryInterface(dAtA, i, uint64(num))
		}
	}
	if len(m.Ouid) > 0 {
		for _, num := range m.Ouid {
			dAtA[i] = 0x48
			i++
			i = encodeVarintTagaliasQueryInterface(dAtA, i, uint64(num))
		}
	}
	if m.UidCount != nil {
		dAtA[i] = 0x50
		i++
		i = encodeVarintTagaliasQueryInterface(dAtA, i, uint64(*m.UidCount))
	}
	if len(m.Tags) > 0 {
		for _, b := range m.Tags {
			dAtA[i] = 0x5a
			i++
			i = encodeVarintTagaliasQueryInterface(dAtA, i, uint64(len(b)))
			i += copy(dAtA[i:], b)
		}
	}
	if len(m.Alias) > 0 {
		for _, b := range m.Alias {
			dAtA[i] = 0x62
			i++
			i = encodeVarintTagaliasQueryInterface(dAtA, i, uint64(len(b)))
			i += copy(dAtA[i:], b)
		}
	}
	if m.DevType != nil {
		dAtA[i] = 0x68
		i++
		i = encodeVarintTagaliasQueryInterface(dAtA, i, uint64(*m.DevType))
	}
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func (m *TagAlsResp) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *TagAlsResp) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.ReqNo != nil {
		dAtA[i] = 0x8
		i++
		i = encodeVarintTagaliasQueryInterface(dAtA, i, uint64(*m.ReqNo))
	}
	if m.Code != nil {
		dAtA[i] = 0x10
		i++
		i = encodeVarintTagaliasQueryInterface(dAtA, i, uint64(*m.Code))
	}
	if m.Appkey != nil {
		dAtA[i] = 0x1a
		i++
		i = encodeVarintTagaliasQueryInterface(dAtA, i, uint64(len(m.Appkey)))
		i += copy(dAtA[i:], m.Appkey)
	}
	if m.Platform != nil {
		dAtA[i] = 0x20
		i++
		i = encodeVarintTagaliasQueryInterface(dAtA, i, uint64(*m.Platform))
	}
	if len(m.Result) > 0 {
		for _, msg := range m.Result {
			dAtA[i] = 0x2a
			i++
			i = encodeVarintTagaliasQueryInterface(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func encodeVarintTagaliasQueryInterface(dAtA []byte, offset int, v uint64) int {
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return offset + 1
}
func (m *OpsUnit) Size() (n int) {
	var l int
	_ = l
	if m.Cmd != nil {
		n += 1 + sovTagaliasQueryInterface(uint64(*m.Cmd))
	}
	if m.Page != nil {
		n += 1 + sovTagaliasQueryInterface(uint64(*m.Page))
	}
	if len(m.Uid) > 0 {
		for _, e := range m.Uid {
			n += 1 + sovTagaliasQueryInterface(uint64(e))
		}
	}
	if len(m.Tags) > 0 {
		for _, b := range m.Tags {
			l = len(b)
			n += 1 + l + sovTagaliasQueryInterface(uint64(l))
		}
	}
	if len(m.Alias) > 0 {
		for _, b := range m.Alias {
			l = len(b)
			n += 1 + l + sovTagaliasQueryInterface(uint64(l))
		}
	}
	if m.Queryk != nil {
		l = len(m.Queryk)
		n += 1 + l + sovTagaliasQueryInterface(uint64(l))
	}
	if m.DevType != nil {
		n += 1 + sovTagaliasQueryInterface(uint64(*m.DevType))
	}
	if len(m.Total) > 0 {
		for _, e := range m.Total {
			n += 1 + sovTagaliasQueryInterface(uint64(e))
		}
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *TagAliasQuery) Size() (n int) {
	var l int
	_ = l
	if m.ReqNo != nil {
		n += 1 + sovTagaliasQueryInterface(uint64(*m.ReqNo))
	}
	if m.Appkey != nil {
		l = len(m.Appkey)
		n += 1 + l + sovTagaliasQueryInterface(uint64(l))
	}
	if m.Platform != nil {
		n += 1 + sovTagaliasQueryInterface(uint64(*m.Platform))
	}
	if len(m.Query) > 0 {
		for _, e := range m.Query {
			l = e.Size()
			n += 1 + l + sovTagaliasQueryInterface(uint64(l))
		}
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *TagAliasQueryII) Size() (n int) {
	var l int
	_ = l
	if m.ReqNo != nil {
		n += 1 + sovTagaliasQueryInterface(uint64(*m.ReqNo))
	}
	if m.Total != nil {
		n += 1 + sovTagaliasQueryInterface(uint64(*m.Total))
	}
	if m.Page != nil {
		n += 1 + sovTagaliasQueryInterface(uint64(*m.Page))
	}
	if m.Cmd != nil {
		n += 1 + sovTagaliasQueryInterface(uint64(*m.Cmd))
	}
	if m.QueryK != nil {
		l = len(m.QueryK)
		n += 1 + l + sovTagaliasQueryInterface(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *TagAlsResult) Size() (n int) {
	var l int
	_ = l
	if m.ReqType != nil {
		n += 1 + sovTagaliasQueryInterface(uint64(*m.ReqType))
	}
	if m.Code != nil {
		n += 1 + sovTagaliasQueryInterface(uint64(*m.Code))
	}
	if m.Msg != nil {
		l = len(m.Msg)
		n += 1 + l + sovTagaliasQueryInterface(uint64(l))
	}
	if m.Total != nil {
		n += 1 + sovTagaliasQueryInterface(uint64(*m.Total))
	}
	if m.Cur != nil {
		n += 1 + sovTagaliasQueryInterface(uint64(*m.Cur))
	}
	if m.Expired != nil {
		n += 1 + sovTagaliasQueryInterface(uint64(*m.Expired))
	}
	if m.QueryK != nil {
		l = len(m.QueryK)
		n += 1 + l + sovTagaliasQueryInterface(uint64(l))
	}
	if len(m.Uid) > 0 {
		for _, e := range m.Uid {
			n += 1 + sovTagaliasQueryInterface(uint64(e))
		}
	}
	if len(m.Ouid) > 0 {
		for _, e := range m.Ouid {
			n += 1 + sovTagaliasQueryInterface(uint64(e))
		}
	}
	if m.UidCount != nil {
		n += 1 + sovTagaliasQueryInterface(uint64(*m.UidCount))
	}
	if len(m.Tags) > 0 {
		for _, b := range m.Tags {
			l = len(b)
			n += 1 + l + sovTagaliasQueryInterface(uint64(l))
		}
	}
	if len(m.Alias) > 0 {
		for _, b := range m.Alias {
			l = len(b)
			n += 1 + l + sovTagaliasQueryInterface(uint64(l))
		}
	}
	if m.DevType != nil {
		n += 1 + sovTagaliasQueryInterface(uint64(*m.DevType))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *TagAlsResp) Size() (n int) {
	var l int
	_ = l
	if m.ReqNo != nil {
		n += 1 + sovTagaliasQueryInterface(uint64(*m.ReqNo))
	}
	if m.Code != nil {
		n += 1 + sovTagaliasQueryInterface(uint64(*m.Code))
	}
	if m.Appkey != nil {
		l = len(m.Appkey)
		n += 1 + l + sovTagaliasQueryInterface(uint64(l))
	}
	if m.Platform != nil {
		n += 1 + sovTagaliasQueryInterface(uint64(*m.Platform))
	}
	if len(m.Result) > 0 {
		for _, e := range m.Result {
			l = e.Size()
			n += 1 + l + sovTagaliasQueryInterface(uint64(l))
		}
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func sovTagaliasQueryInterface(x uint64) (n int) {
	for {
		n++
		x >>= 7
		if x == 0 {
			break
		}
	}
	return n
}
func sozTagaliasQueryInterface(x uint64) (n int) {
	return sovTagaliasQueryInterface(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *OpsUnit) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTagaliasQueryInterface
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: OpsUnit: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: OpsUnit: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Cmd", wireType)
			}
			var v tagalias_common.QUERY_ACTION
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTagaliasQueryInterface
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (tagalias_common.QUERY_ACTION(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Cmd = &v
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Page", wireType)
			}
			var v int32
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTagaliasQueryInterface
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Page = &v
		case 3:
			if wireType == 0 {
				var v int64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowTagaliasQueryInterface
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					v |= (int64(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				m.Uid = append(m.Uid, v)
			} else if wireType == 2 {
				var packedLen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowTagaliasQueryInterface
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					packedLen |= (int(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if packedLen < 0 {
					return ErrInvalidLengthTagaliasQueryInterface
				}
				postIndex := iNdEx + packedLen
				if postIndex > l {
					return io.ErrUnexpectedEOF
				}
				for iNdEx < postIndex {
					var v int64
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowTagaliasQueryInterface
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						v |= (int64(b) & 0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					m.Uid = append(m.Uid, v)
				}
			} else {
				return fmt.Errorf("proto: wrong wireType = %d for field Uid", wireType)
			}
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Tags", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTagaliasQueryInterface
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthTagaliasQueryInterface
			}
			postIndex := iNdEx + byteLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Tags = append(m.Tags, make([]byte, postIndex-iNdEx))
			copy(m.Tags[len(m.Tags)-1], dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Alias", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTagaliasQueryInterface
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthTagaliasQueryInterface
			}
			postIndex := iNdEx + byteLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Alias = append(m.Alias, make([]byte, postIndex-iNdEx))
			copy(m.Alias[len(m.Alias)-1], dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Queryk", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTagaliasQueryInterface
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthTagaliasQueryInterface
			}
			postIndex := iNdEx + byteLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Queryk = append(m.Queryk[:0], dAtA[iNdEx:postIndex]...)
			if m.Queryk == nil {
				m.Queryk = []byte{}
			}
			iNdEx = postIndex
		case 7:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field DevType", wireType)
			}
			var v tagalias_common.DEVSUBTYPE
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTagaliasQueryInterface
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (tagalias_common.DEVSUBTYPE(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.DevType = &v
		case 8:
			if wireType == 0 {
				var v int32
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowTagaliasQueryInterface
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					v |= (int32(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				m.Total = append(m.Total, v)
			} else if wireType == 2 {
				var packedLen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowTagaliasQueryInterface
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					packedLen |= (int(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if packedLen < 0 {
					return ErrInvalidLengthTagaliasQueryInterface
				}
				postIndex := iNdEx + packedLen
				if postIndex > l {
					return io.ErrUnexpectedEOF
				}
				for iNdEx < postIndex {
					var v int32
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowTagaliasQueryInterface
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						v |= (int32(b) & 0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					m.Total = append(m.Total, v)
				}
			} else {
				return fmt.Errorf("proto: wrong wireType = %d for field Total", wireType)
			}
		default:
			iNdEx = preIndex
			skippy, err := skipTagaliasQueryInterface(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthTagaliasQueryInterface
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *TagAliasQuery) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTagaliasQueryInterface
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: TagAliasQuery: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: TagAliasQuery: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ReqNo", wireType)
			}
			var v int64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTagaliasQueryInterface
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.ReqNo = &v
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Appkey", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTagaliasQueryInterface
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthTagaliasQueryInterface
			}
			postIndex := iNdEx + byteLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Appkey = append(m.Appkey[:0], dAtA[iNdEx:postIndex]...)
			if m.Appkey == nil {
				m.Appkey = []byte{}
			}
			iNdEx = postIndex
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Platform", wireType)
			}
			var v tagalias_common.PLATFORM
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTagaliasQueryInterface
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (tagalias_common.PLATFORM(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Platform = &v
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Query", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTagaliasQueryInterface
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTagaliasQueryInterface
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Query = append(m.Query, &OpsUnit{})
			if err := m.Query[len(m.Query)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTagaliasQueryInterface(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthTagaliasQueryInterface
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *TagAliasQueryII) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTagaliasQueryInterface
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: TagAliasQueryII: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: TagAliasQueryII: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ReqNo", wireType)
			}
			var v int64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTagaliasQueryInterface
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.ReqNo = &v
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Total", wireType)
			}
			var v int32
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTagaliasQueryInterface
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Total = &v
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Page", wireType)
			}
			var v int32
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTagaliasQueryInterface
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Page = &v
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Cmd", wireType)
			}
			var v tagalias_common.QUERY_ACTION
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTagaliasQueryInterface
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (tagalias_common.QUERY_ACTION(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Cmd = &v
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field QueryK", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTagaliasQueryInterface
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthTagaliasQueryInterface
			}
			postIndex := iNdEx + byteLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.QueryK = append(m.QueryK[:0], dAtA[iNdEx:postIndex]...)
			if m.QueryK == nil {
				m.QueryK = []byte{}
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTagaliasQueryInterface(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthTagaliasQueryInterface
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *TagAlsResult) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTagaliasQueryInterface
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: TagAlsResult: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: TagAlsResult: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ReqType", wireType)
			}
			var v tagalias_common.QUERY_ACTION
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTagaliasQueryInterface
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (tagalias_common.QUERY_ACTION(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.ReqType = &v
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Code", wireType)
			}
			var v tagalias_common.STATUS
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTagaliasQueryInterface
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (tagalias_common.STATUS(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Code = &v
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Msg", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTagaliasQueryInterface
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthTagaliasQueryInterface
			}
			postIndex := iNdEx + byteLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Msg = append(m.Msg[:0], dAtA[iNdEx:postIndex]...)
			if m.Msg == nil {
				m.Msg = []byte{}
			}
			iNdEx = postIndex
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Total", wireType)
			}
			var v int32
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTagaliasQueryInterface
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Total = &v
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Cur", wireType)
			}
			var v int32
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTagaliasQueryInterface
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Cur = &v
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Expired", wireType)
			}
			var v uint32
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTagaliasQueryInterface
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Expired = &v
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field QueryK", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTagaliasQueryInterface
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthTagaliasQueryInterface
			}
			postIndex := iNdEx + byteLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.QueryK = append(m.QueryK[:0], dAtA[iNdEx:postIndex]...)
			if m.QueryK == nil {
				m.QueryK = []byte{}
			}
			iNdEx = postIndex
		case 8:
			if wireType == 0 {
				var v int64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowTagaliasQueryInterface
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					v |= (int64(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				m.Uid = append(m.Uid, v)
			} else if wireType == 2 {
				var packedLen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowTagaliasQueryInterface
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					packedLen |= (int(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if packedLen < 0 {
					return ErrInvalidLengthTagaliasQueryInterface
				}
				postIndex := iNdEx + packedLen
				if postIndex > l {
					return io.ErrUnexpectedEOF
				}
				for iNdEx < postIndex {
					var v int64
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowTagaliasQueryInterface
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						v |= (int64(b) & 0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					m.Uid = append(m.Uid, v)
				}
			} else {
				return fmt.Errorf("proto: wrong wireType = %d for field Uid", wireType)
			}
		case 9:
			if wireType == 0 {
				var v int64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowTagaliasQueryInterface
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					v |= (int64(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				m.Ouid = append(m.Ouid, v)
			} else if wireType == 2 {
				var packedLen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowTagaliasQueryInterface
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					packedLen |= (int(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if packedLen < 0 {
					return ErrInvalidLengthTagaliasQueryInterface
				}
				postIndex := iNdEx + packedLen
				if postIndex > l {
					return io.ErrUnexpectedEOF
				}
				for iNdEx < postIndex {
					var v int64
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowTagaliasQueryInterface
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						v |= (int64(b) & 0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					m.Ouid = append(m.Ouid, v)
				}
			} else {
				return fmt.Errorf("proto: wrong wireType = %d for field Ouid", wireType)
			}
		case 10:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field UidCount", wireType)
			}
			var v int32
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTagaliasQueryInterface
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.UidCount = &v
		case 11:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Tags", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTagaliasQueryInterface
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthTagaliasQueryInterface
			}
			postIndex := iNdEx + byteLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Tags = append(m.Tags, make([]byte, postIndex-iNdEx))
			copy(m.Tags[len(m.Tags)-1], dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 12:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Alias", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTagaliasQueryInterface
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthTagaliasQueryInterface
			}
			postIndex := iNdEx + byteLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Alias = append(m.Alias, make([]byte, postIndex-iNdEx))
			copy(m.Alias[len(m.Alias)-1], dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 13:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field DevType", wireType)
			}
			var v tagalias_common.DEVSUBTYPE
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTagaliasQueryInterface
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (tagalias_common.DEVSUBTYPE(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.DevType = &v
		default:
			iNdEx = preIndex
			skippy, err := skipTagaliasQueryInterface(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthTagaliasQueryInterface
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *TagAlsResp) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTagaliasQueryInterface
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: TagAlsResp: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: TagAlsResp: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ReqNo", wireType)
			}
			var v int64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTagaliasQueryInterface
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.ReqNo = &v
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Code", wireType)
			}
			var v int32
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTagaliasQueryInterface
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Code = &v
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Appkey", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTagaliasQueryInterface
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthTagaliasQueryInterface
			}
			postIndex := iNdEx + byteLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Appkey = append(m.Appkey[:0], dAtA[iNdEx:postIndex]...)
			if m.Appkey == nil {
				m.Appkey = []byte{}
			}
			iNdEx = postIndex
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Platform", wireType)
			}
			var v tagalias_common.PLATFORM
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTagaliasQueryInterface
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (tagalias_common.PLATFORM(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Platform = &v
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Result", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTagaliasQueryInterface
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTagaliasQueryInterface
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Result = append(m.Result, &TagAlsResult{})
			if err := m.Result[len(m.Result)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTagaliasQueryInterface(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthTagaliasQueryInterface
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipTagaliasQueryInterface(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowTagaliasQueryInterface
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowTagaliasQueryInterface
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
			return iNdEx, nil
		case 1:
			iNdEx += 8
			return iNdEx, nil
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowTagaliasQueryInterface
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			iNdEx += length
			if length < 0 {
				return 0, ErrInvalidLengthTagaliasQueryInterface
			}
			return iNdEx, nil
		case 3:
			for {
				var innerWire uint64
				var start int = iNdEx
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return 0, ErrIntOverflowTagaliasQueryInterface
					}
					if iNdEx >= l {
						return 0, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					innerWire |= (uint64(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				innerWireType := int(innerWire & 0x7)
				if innerWireType == 4 {
					break
				}
				next, err := skipTagaliasQueryInterface(dAtA[start:])
				if err != nil {
					return 0, err
				}
				iNdEx = start + next
			}
			return iNdEx, nil
		case 4:
			return iNdEx, nil
		case 5:
			iNdEx += 4
			return iNdEx, nil
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
	}
	panic("unreachable")
}

var (
	ErrInvalidLengthTagaliasQueryInterface = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowTagaliasQueryInterface   = fmt.Errorf("proto: integer overflow")
)

func init() {
	proto.RegisterFile("TagAliasBatchQuery/tagalias_query_interface.proto", fileDescriptorTagaliasQueryInterface)
}

var fileDescriptorTagaliasQueryInterface = []byte{
	// 536 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x7c, 0x92, 0x4f, 0x6e, 0xda, 0x5c,
	0x14, 0xc5, 0x3f, 0xe7, 0xd9, 0x18, 0xae, 0xcd, 0x9f, 0xef, 0xa9, 0x03, 0x2b, 0x91, 0xa8, 0x85,
	0x54, 0xc9, 0xca, 0xc0, 0x49, 0x18, 0x32, 0x03, 0x4a, 0x25, 0xd4, 0x04, 0x12, 0x6c, 0x2a, 0x65,
	0x64, 0x59, 0xf6, 0x0b, 0xb5, 0x02, 0xd8, 0xd8, 0xcf, 0x55, 0xe9, 0x0a, 0xba, 0x84, 0xce, 0xba,
	0x80, 0x6e, 0xa4, 0xc3, 0x2e, 0xa1, 0xa2, 0x1b, 0xa9, 0x7c, 0xc1, 0x89, 0x03, 0xa8, 0xc3, 0x63,
	0xe9, 0xfa, 0x9c, 0xf7, 0x3b, 0x07, 0xae, 0x6c, 0x77, 0xd6, 0x9d, 0x07, 0x6e, 0xd2, 0x73, 0xb9,
	0xf7, 0xf1, 0x2e, 0x65, 0xf1, 0xfa, 0x82, 0xbb, 0x33, 0x37, 0xfb, 0xe4, 0xac, 0x32, 0xe9, 0x04,
	0x4b, 0xce, 0xe2, 0x07, 0xd7, 0x63, 0x66, 0x14, 0x87, 0x3c, 0xa4, 0xf4, 0xf0, 0xe4, 0xf4, 0xcd,
	0xd3, 0x8d, 0x17, 0x2e, 0x16, 0xe1, 0xf2, 0x62, 0x4f, 0x6f, 0x4f, 0x5b, 0x3f, 0x04, 0x90, 0xc7,
	0x51, 0x32, 0x5d, 0x06, 0x9c, 0x9e, 0x02, 0xf1, 0x16, 0xbe, 0x26, 0xe8, 0x82, 0x51, 0x6b, 0x57,
	0xcd, 0xbb, 0xe9, 0x60, 0x72, 0xef, 0x74, 0xfb, 0xf6, 0x70, 0x3c, 0xa2, 0x75, 0x10, 0x23, 0x77,
	0xc6, 0xb4, 0x13, 0x5d, 0x30, 0xa4, 0x8e, 0x70, 0x45, 0x15, 0x20, 0x69, 0xe0, 0x6b, 0x44, 0x27,
	0x06, 0xa1, 0x2a, 0x88, 0xdc, 0x9d, 0x25, 0x9a, 0xa8, 0x13, 0x43, 0xa5, 0x55, 0x90, 0xd0, 0x49,
	0x93, 0x50, 0xd6, 0xa0, 0x84, 0xb1, 0x1f, 0xb5, 0x92, 0x2e, 0x18, 0x2a, 0x3d, 0x87, 0xb2, 0xcf,
	0x3e, 0x39, 0x7c, 0x1d, 0x31, 0x4d, 0x46, 0x2f, 0xc5, 0x7c, 0x3b, 0xf8, 0x60, 0x4d, 0x7b, 0xf6,
	0xfd, 0xed, 0xa0, 0xa3, 0x8c, 0xc6, 0x93, 0x9b, 0xee, 0xb5, 0x93, 0x89, 0xec, 0x57, 0x3c, 0xe4,
	0xee, 0x5c, 0x2b, 0xeb, 0xc4, 0x90, 0x5a, 0x5f, 0xa0, 0x9a, 0x3f, 0x15, 0x5f, 0x49, 0x1b, 0x20,
	0xc5, 0x6c, 0x35, 0x0a, 0x31, 0x34, 0xe9, 0x08, 0x97, 0x99, 0x9b, 0x1b, 0x45, 0x8f, 0x6c, 0x8d,
	0x51, 0x55, 0x7a, 0x06, 0xe5, 0x68, 0xee, 0xf2, 0x87, 0x30, 0x5e, 0x68, 0x04, 0xdd, 0x2a, 0xe6,
	0xed, 0x75, 0xd7, 0x7e, 0x37, 0x9e, 0xdc, 0xd0, 0x73, 0x90, 0x30, 0x1a, 0x06, 0x57, 0xda, 0x67,
	0xe6, 0x21, 0x48, 0x73, 0x47, 0xa7, 0x15, 0x40, 0xfd, 0x85, 0xf7, 0x70, 0x98, 0xa5, 0x2b, 0xb8,
	0x3f, 0x87, 0x45, 0x48, 0x19, 0x14, 0x44, 0x46, 0x50, 0xed, 0xe0, 0x8a, 0xc7, 0xe0, 0xe6, 0x84,
	0xde, 0x6b, 0x52, 0x96, 0xb9, 0xf5, 0xfd, 0x04, 0x54, 0xf4, 0x4a, 0x26, 0x2c, 0x49, 0xe7, 0x9c,
	0xbe, 0x86, 0x72, 0xcc, 0x56, 0x5b, 0x64, 0x47, 0xeb, 0x69, 0x82, 0xe8, 0x85, 0xfe, 0xb6, 0x9e,
	0x5a, 0x5b, 0x36, 0x2d, 0xbb, 0x6b, 0x4f, 0xad, 0x8e, 0x6c, 0x4d, 0xfb, 0xfd, 0x81, 0x65, 0xd1,
	0x57, 0x40, 0x16, 0xc9, 0x0c, 0xa3, 0xa8, 0xcf, 0x5f, 0x1b, 0x79, 0x60, 0x31, 0x6f, 0xb5, 0x06,
	0xc4, 0x4b, 0x63, 0x8c, 0x81, 0xba, 0x0e, 0x32, 0xfb, 0x1c, 0x05, 0x31, 0xf3, 0xb1, 0xbc, 0x6a,
	0x21, 0xaa, 0x8c, 0x78, 0x77, 0x33, 0x28, 0xe7, 0x33, 0x08, 0x33, 0x55, 0x41, 0xf5, 0x3f, 0x54,
	0xd2, 0xc0, 0x77, 0xbc, 0x30, 0x5d, 0x72, 0x0d, 0x72, 0x24, 0xb8, 0x13, 0xe5, 0xe5, 0x4e, 0x54,
	0x94, 0xc5, 0x5d, 0x54, 0xff, 0xbd, 0x8b, 0xd6, 0x57, 0x01, 0xe0, 0x89, 0x50, 0xb4, 0x5f, 0x84,
	0x5a, 0xa0, 0x21, 0x15, 0x16, 0x41, 0x0e, 0x16, 0x21, 0xee, 0x2f, 0xe2, 0x12, 0x4a, 0x31, 0x32,
	0xc7, 0xf1, 0x2a, 0x6d, 0xfd, 0xd8, 0x24, 0x8a, 0xdd, 0xf4, 0x1a, 0x3f, 0x37, 0x4d, 0xe1, 0xd7,
	0xa6, 0x29, 0xfc, 0xde, 0x34, 0x85, 0x6f, 0x7f, 0x9a, 0xff, 0xfd, 0x0d, 0x00, 0x00, 0xff, 0xff,
	0xf7, 0x1d, 0x2f, 0xd8, 0xc2, 0x03, 0x00, 0x00,
}
