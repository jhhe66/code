// **********************************************************************
//
// Copyright (c) 2003-2016 ZeroC, Inc. All rights reserved.
//
// This copy of Ice is licensed to you under the terms described in the
// ICE_LICENSE file included in this distribution.
//
// **********************************************************************
//
// Ice version 3.6.3
//
// <auto-generated>
//
// Generated from file `tagAlias.ice'
//
// Warning: do not edit this file.
//
// </auto-generated>
//

#include <tagAlias.h>
#include <IceUtil/PushDisableWarnings.h>
#include <Ice/LocalException.h>
#include <Ice/ObjectFactory.h>
#include <Ice/Outgoing.h>
#include <Ice/OutgoingAsync.h>
#include <Ice/BasicStream.h>
#include <IceUtil/Iterator.h>
#include <IceUtil/PopDisableWarnings.h>

#ifndef ICE_IGNORE_VERSION
#   if ICE_INT_VERSION / 100 != 306
#       error Ice version mismatch!
#   endif
#   if ICE_INT_VERSION % 100 > 50
#       error Beta header file detected
#   endif
#   if ICE_INT_VERSION % 100 < 3
#       error Ice patch level mismatch!
#   endif
#endif

namespace
{

const ::std::string __TagAlias__TagAliasOp__request_name = "request";

const ::std::string __TagAlias__TagAliasOp__request_next_name = "request_next";

const ::std::string __TagAlias__TagAliasOp__getTaglist_name = "getTaglist";

const ::std::string __TagAlias__TagAliasOp__getUsersByTag_name = "getUsersByTag";

const ::std::string __TagAlias__TagAliasOp__getUsersByAlias_name = "getUsersByAlias";

const ::std::string __TagAlias__TagAliasOp__getTagsByUser_name = "getTagsByUser";

const ::std::string __TagAlias__TagAliasOp__getAliasByUser_name = "getAliasByUser";

const ::std::string __TagAlias__TagAliasOp__checkUserBelongTag_name = "checkUserBelongTag";

const ::std::string __TagAlias__TagAliasOp__checkUserBelongAlias_name = "checkUserBelongAlias";

const ::std::string __TagAlias__TagAliasOp__getUsersCountByTag_name = "getUsersCountByTag";

const ::std::string __TagAlias__TagAliasOp__getUsersCountByAlias_name = "getUsersCountByAlias";

const ::std::string __TagAlias__TagAliasOp__validateTags_name = "validateTags";

const ::std::string __TagAlias__TagAliasOp__validateAlias_name = "validateAlias";

const ::std::string __TagAlias__TagAliasOp__shutdown_name = "shutdown";

const ::std::string __TagAlias__TagAliasOpAdd__getTagsCountByUser_name = "getTagsCountByUser";

}

namespace
{

const ::IceInternal::DefaultUserExceptionFactoryInit< ::TagAlias::RequestCanceledException> __TagAlias__RequestCanceledException_init("::TagAlias::RequestCanceledException");

}

TagAlias::RequestCanceledException::~RequestCanceledException() throw()
{
}

::std::string
TagAlias::RequestCanceledException::ice_name() const
{
    return "TagAlias::RequestCanceledException";
}

TagAlias::RequestCanceledException*
TagAlias::RequestCanceledException::ice_clone() const
{
    return new RequestCanceledException(*this);
}

void
TagAlias::RequestCanceledException::ice_throw() const
{
    throw *this;
}

void
TagAlias::RequestCanceledException::__writeImpl(::IceInternal::BasicStream* __os) const
{
    __os->startWriteSlice("::TagAlias::RequestCanceledException", -1, true);
    __os->endWriteSlice();
}

void
TagAlias::RequestCanceledException::__readImpl(::IceInternal::BasicStream* __is)
{
    __is->startReadSlice();
    __is->endReadSlice();
}

namespace Ice
{
}

IceAsync::TagAlias::AMD_TagAliasOp_request::AMD_TagAliasOp_request(::IceInternal::Incoming& in) :
    ::IceInternal::IncomingAsync(in)
{
}

void
IceAsync::TagAlias::AMD_TagAliasOp_request::ice_response(const ::std::string& res)
{
    if(__validateResponse(true))
    {
        try
        {
            ::IceInternal::BasicStream* __os = __startWriteParams(::Ice::DefaultFormat);
            __os->write(res);
            __endWriteParams(true);
        }
        catch(const ::Ice::Exception& __ex)
        {
            __exception(__ex);
            return;
        }
        __response();
    }
}

void
IceAsync::TagAlias::AMD_TagAliasOp_request::ice_exception(const ::std::exception& ex)
{
    if(const ::TagAlias::RequestCanceledException* __ex = dynamic_cast<const ::TagAlias::RequestCanceledException*>(&ex))
    {
        if(__validateResponse(false))
        {
            __writeUserException(*__ex, ::Ice::DefaultFormat);
            __response();
        }
    }
    else
    {
        ::IceInternal::IncomingAsync::ice_exception(ex);
    }
}

IceAsync::TagAlias::AMD_TagAliasOp_request_next::AMD_TagAliasOp_request_next(::IceInternal::Incoming& in) :
    ::IceInternal::IncomingAsync(in)
{
}

void
IceAsync::TagAlias::AMD_TagAliasOp_request_next::ice_response(const ::std::string& res)
{
    if(__validateResponse(true))
    {
        try
        {
            ::IceInternal::BasicStream* __os = __startWriteParams(::Ice::DefaultFormat);
            __os->write(res);
            __endWriteParams(true);
        }
        catch(const ::Ice::Exception& __ex)
        {
            __exception(__ex);
            return;
        }
        __response();
    }
}

void
IceAsync::TagAlias::AMD_TagAliasOp_request_next::ice_exception(const ::std::exception& ex)
{
    if(const ::TagAlias::RequestCanceledException* __ex = dynamic_cast<const ::TagAlias::RequestCanceledException*>(&ex))
    {
        if(__validateResponse(false))
        {
            __writeUserException(*__ex, ::Ice::DefaultFormat);
            __response();
        }
    }
    else
    {
        ::IceInternal::IncomingAsync::ice_exception(ex);
    }
}

IceAsync::TagAlias::AMD_TagAliasOp_getTaglist::AMD_TagAliasOp_getTaglist(::IceInternal::Incoming& in) :
    ::IceInternal::IncomingAsync(in)
{
}

void
IceAsync::TagAlias::AMD_TagAliasOp_getTaglist::ice_response(const ::TagAlias::bytes& res)
{
    if(__validateResponse(true))
    {
        try
        {
            ::IceInternal::BasicStream* __os = __startWriteParams(::Ice::DefaultFormat);
            __os->write(res);
            __endWriteParams(true);
        }
        catch(const ::Ice::Exception& __ex)
        {
            __exception(__ex);
            return;
        }
        __response();
    }
}

void
IceAsync::TagAlias::AMD_TagAliasOp_getTaglist::ice_exception(const ::std::exception& ex)
{
    if(const ::TagAlias::RequestCanceledException* __ex = dynamic_cast<const ::TagAlias::RequestCanceledException*>(&ex))
    {
        if(__validateResponse(false))
        {
            __writeUserException(*__ex, ::Ice::DefaultFormat);
            __response();
        }
    }
    else
    {
        ::IceInternal::IncomingAsync::ice_exception(ex);
    }
}

IceAsync::TagAlias::AMD_TagAliasOp_getUsersByTag::AMD_TagAliasOp_getUsersByTag(::IceInternal::Incoming& in) :
    ::IceInternal::IncomingAsync(in)
{
}

void
IceAsync::TagAlias::AMD_TagAliasOp_getUsersByTag::ice_response(const ::TagAlias::bytes& res)
{
    if(__validateResponse(true))
    {
        try
        {
            ::IceInternal::BasicStream* __os = __startWriteParams(::Ice::DefaultFormat);
            __os->write(res);
            __endWriteParams(true);
        }
        catch(const ::Ice::Exception& __ex)
        {
            __exception(__ex);
            return;
        }
        __response();
    }
}

void
IceAsync::TagAlias::AMD_TagAliasOp_getUsersByTag::ice_exception(const ::std::exception& ex)
{
    if(const ::TagAlias::RequestCanceledException* __ex = dynamic_cast<const ::TagAlias::RequestCanceledException*>(&ex))
    {
        if(__validateResponse(false))
        {
            __writeUserException(*__ex, ::Ice::DefaultFormat);
            __response();
        }
    }
    else
    {
        ::IceInternal::IncomingAsync::ice_exception(ex);
    }
}

IceAsync::TagAlias::AMD_TagAliasOp_getUsersByAlias::AMD_TagAliasOp_getUsersByAlias(::IceInternal::Incoming& in) :
    ::IceInternal::IncomingAsync(in)
{
}

void
IceAsync::TagAlias::AMD_TagAliasOp_getUsersByAlias::ice_response(const ::TagAlias::bytes& res)
{
    if(__validateResponse(true))
    {
        try
        {
            ::IceInternal::BasicStream* __os = __startWriteParams(::Ice::DefaultFormat);
            __os->write(res);
            __endWriteParams(true);
        }
        catch(const ::Ice::Exception& __ex)
        {
            __exception(__ex);
            return;
        }
        __response();
    }
}

void
IceAsync::TagAlias::AMD_TagAliasOp_getUsersByAlias::ice_exception(const ::std::exception& ex)
{
    if(const ::TagAlias::RequestCanceledException* __ex = dynamic_cast<const ::TagAlias::RequestCanceledException*>(&ex))
    {
        if(__validateResponse(false))
        {
            __writeUserException(*__ex, ::Ice::DefaultFormat);
            __response();
        }
    }
    else
    {
        ::IceInternal::IncomingAsync::ice_exception(ex);
    }
}

IceAsync::TagAlias::AMD_TagAliasOp_getTagsByUser::AMD_TagAliasOp_getTagsByUser(::IceInternal::Incoming& in) :
    ::IceInternal::IncomingAsync(in)
{
}

void
IceAsync::TagAlias::AMD_TagAliasOp_getTagsByUser::ice_response(const ::TagAlias::bytes& res)
{
    if(__validateResponse(true))
    {
        try
        {
            ::IceInternal::BasicStream* __os = __startWriteParams(::Ice::DefaultFormat);
            __os->write(res);
            __endWriteParams(true);
        }
        catch(const ::Ice::Exception& __ex)
        {
            __exception(__ex);
            return;
        }
        __response();
    }
}

void
IceAsync::TagAlias::AMD_TagAliasOp_getTagsByUser::ice_exception(const ::std::exception& ex)
{
    if(const ::TagAlias::RequestCanceledException* __ex = dynamic_cast<const ::TagAlias::RequestCanceledException*>(&ex))
    {
        if(__validateResponse(false))
        {
            __writeUserException(*__ex, ::Ice::DefaultFormat);
            __response();
        }
    }
    else
    {
        ::IceInternal::IncomingAsync::ice_exception(ex);
    }
}

IceAsync::TagAlias::AMD_TagAliasOp_getAliasByUser::AMD_TagAliasOp_getAliasByUser(::IceInternal::Incoming& in) :
    ::IceInternal::IncomingAsync(in)
{
}

void
IceAsync::TagAlias::AMD_TagAliasOp_getAliasByUser::ice_response(const ::TagAlias::bytes& res)
{
    if(__validateResponse(true))
    {
        try
        {
            ::IceInternal::BasicStream* __os = __startWriteParams(::Ice::DefaultFormat);
            __os->write(res);
            __endWriteParams(true);
        }
        catch(const ::Ice::Exception& __ex)
        {
            __exception(__ex);
            return;
        }
        __response();
    }
}

void
IceAsync::TagAlias::AMD_TagAliasOp_getAliasByUser::ice_exception(const ::std::exception& ex)
{
    if(const ::TagAlias::RequestCanceledException* __ex = dynamic_cast<const ::TagAlias::RequestCanceledException*>(&ex))
    {
        if(__validateResponse(false))
        {
            __writeUserException(*__ex, ::Ice::DefaultFormat);
            __response();
        }
    }
    else
    {
        ::IceInternal::IncomingAsync::ice_exception(ex);
    }
}

IceAsync::TagAlias::AMD_TagAliasOp_checkUserBelongTag::AMD_TagAliasOp_checkUserBelongTag(::IceInternal::Incoming& in) :
    ::IceInternal::IncomingAsync(in)
{
}

void
IceAsync::TagAlias::AMD_TagAliasOp_checkUserBelongTag::ice_response(const ::TagAlias::bytes& res)
{
    if(__validateResponse(true))
    {
        try
        {
            ::IceInternal::BasicStream* __os = __startWriteParams(::Ice::DefaultFormat);
            __os->write(res);
            __endWriteParams(true);
        }
        catch(const ::Ice::Exception& __ex)
        {
            __exception(__ex);
            return;
        }
        __response();
    }
}

void
IceAsync::TagAlias::AMD_TagAliasOp_checkUserBelongTag::ice_exception(const ::std::exception& ex)
{
    if(const ::TagAlias::RequestCanceledException* __ex = dynamic_cast<const ::TagAlias::RequestCanceledException*>(&ex))
    {
        if(__validateResponse(false))
        {
            __writeUserException(*__ex, ::Ice::DefaultFormat);
            __response();
        }
    }
    else
    {
        ::IceInternal::IncomingAsync::ice_exception(ex);
    }
}

IceAsync::TagAlias::AMD_TagAliasOp_checkUserBelongAlias::AMD_TagAliasOp_checkUserBelongAlias(::IceInternal::Incoming& in) :
    ::IceInternal::IncomingAsync(in)
{
}

void
IceAsync::TagAlias::AMD_TagAliasOp_checkUserBelongAlias::ice_response(const ::TagAlias::bytes& res)
{
    if(__validateResponse(true))
    {
        try
        {
            ::IceInternal::BasicStream* __os = __startWriteParams(::Ice::DefaultFormat);
            __os->write(res);
            __endWriteParams(true);
        }
        catch(const ::Ice::Exception& __ex)
        {
            __exception(__ex);
            return;
        }
        __response();
    }
}

void
IceAsync::TagAlias::AMD_TagAliasOp_checkUserBelongAlias::ice_exception(const ::std::exception& ex)
{
    if(const ::TagAlias::RequestCanceledException* __ex = dynamic_cast<const ::TagAlias::RequestCanceledException*>(&ex))
    {
        if(__validateResponse(false))
        {
            __writeUserException(*__ex, ::Ice::DefaultFormat);
            __response();
        }
    }
    else
    {
        ::IceInternal::IncomingAsync::ice_exception(ex);
    }
}

IceAsync::TagAlias::AMD_TagAliasOp_getUsersCountByTag::AMD_TagAliasOp_getUsersCountByTag(::IceInternal::Incoming& in) :
    ::IceInternal::IncomingAsync(in)
{
}

void
IceAsync::TagAlias::AMD_TagAliasOp_getUsersCountByTag::ice_response(const ::TagAlias::bytes& res)
{
    if(__validateResponse(true))
    {
        try
        {
            ::IceInternal::BasicStream* __os = __startWriteParams(::Ice::DefaultFormat);
            __os->write(res);
            __endWriteParams(true);
        }
        catch(const ::Ice::Exception& __ex)
        {
            __exception(__ex);
            return;
        }
        __response();
    }
}

void
IceAsync::TagAlias::AMD_TagAliasOp_getUsersCountByTag::ice_exception(const ::std::exception& ex)
{
    if(const ::TagAlias::RequestCanceledException* __ex = dynamic_cast<const ::TagAlias::RequestCanceledException*>(&ex))
    {
        if(__validateResponse(false))
        {
            __writeUserException(*__ex, ::Ice::DefaultFormat);
            __response();
        }
    }
    else
    {
        ::IceInternal::IncomingAsync::ice_exception(ex);
    }
}

IceAsync::TagAlias::AMD_TagAliasOp_getUsersCountByAlias::AMD_TagAliasOp_getUsersCountByAlias(::IceInternal::Incoming& in) :
    ::IceInternal::IncomingAsync(in)
{
}

void
IceAsync::TagAlias::AMD_TagAliasOp_getUsersCountByAlias::ice_response(const ::TagAlias::bytes& res)
{
    if(__validateResponse(true))
    {
        try
        {
            ::IceInternal::BasicStream* __os = __startWriteParams(::Ice::DefaultFormat);
            __os->write(res);
            __endWriteParams(true);
        }
        catch(const ::Ice::Exception& __ex)
        {
            __exception(__ex);
            return;
        }
        __response();
    }
}

void
IceAsync::TagAlias::AMD_TagAliasOp_getUsersCountByAlias::ice_exception(const ::std::exception& ex)
{
    if(const ::TagAlias::RequestCanceledException* __ex = dynamic_cast<const ::TagAlias::RequestCanceledException*>(&ex))
    {
        if(__validateResponse(false))
        {
            __writeUserException(*__ex, ::Ice::DefaultFormat);
            __response();
        }
    }
    else
    {
        ::IceInternal::IncomingAsync::ice_exception(ex);
    }
}

IceAsync::TagAlias::AMD_TagAliasOp_validateTags::AMD_TagAliasOp_validateTags(::IceInternal::Incoming& in) :
    ::IceInternal::IncomingAsync(in)
{
}

void
IceAsync::TagAlias::AMD_TagAliasOp_validateTags::ice_response(const ::TagAlias::bytes& res)
{
    if(__validateResponse(true))
    {
        try
        {
            ::IceInternal::BasicStream* __os = __startWriteParams(::Ice::DefaultFormat);
            __os->write(res);
            __endWriteParams(true);
        }
        catch(const ::Ice::Exception& __ex)
        {
            __exception(__ex);
            return;
        }
        __response();
    }
}

void
IceAsync::TagAlias::AMD_TagAliasOp_validateTags::ice_exception(const ::std::exception& ex)
{
    if(const ::TagAlias::RequestCanceledException* __ex = dynamic_cast<const ::TagAlias::RequestCanceledException*>(&ex))
    {
        if(__validateResponse(false))
        {
            __writeUserException(*__ex, ::Ice::DefaultFormat);
            __response();
        }
    }
    else
    {
        ::IceInternal::IncomingAsync::ice_exception(ex);
    }
}

IceAsync::TagAlias::AMD_TagAliasOp_validateAlias::AMD_TagAliasOp_validateAlias(::IceInternal::Incoming& in) :
    ::IceInternal::IncomingAsync(in)
{
}

void
IceAsync::TagAlias::AMD_TagAliasOp_validateAlias::ice_response(const ::TagAlias::bytes& res)
{
    if(__validateResponse(true))
    {
        try
        {
            ::IceInternal::BasicStream* __os = __startWriteParams(::Ice::DefaultFormat);
            __os->write(res);
            __endWriteParams(true);
        }
        catch(const ::Ice::Exception& __ex)
        {
            __exception(__ex);
            return;
        }
        __response();
    }
}

void
IceAsync::TagAlias::AMD_TagAliasOp_validateAlias::ice_exception(const ::std::exception& ex)
{
    if(const ::TagAlias::RequestCanceledException* __ex = dynamic_cast<const ::TagAlias::RequestCanceledException*>(&ex))
    {
        if(__validateResponse(false))
        {
            __writeUserException(*__ex, ::Ice::DefaultFormat);
            __response();
        }
    }
    else
    {
        ::IceInternal::IncomingAsync::ice_exception(ex);
    }
}

IceAsync::TagAlias::AMD_TagAliasOpAdd_getTagsCountByUser::AMD_TagAliasOpAdd_getTagsCountByUser(::IceInternal::Incoming& in) :
    ::IceInternal::IncomingAsync(in)
{
}

void
IceAsync::TagAlias::AMD_TagAliasOpAdd_getTagsCountByUser::ice_response(const ::TagAlias::bytes& res)
{
    if(__validateResponse(true))
    {
        try
        {
            ::IceInternal::BasicStream* __os = __startWriteParams(::Ice::DefaultFormat);
            __os->write(res);
            __endWriteParams(true);
        }
        catch(const ::Ice::Exception& __ex)
        {
            __exception(__ex);
            return;
        }
        __response();
    }
}

void
IceAsync::TagAlias::AMD_TagAliasOpAdd_getTagsCountByUser::ice_exception(const ::std::exception& ex)
{
    if(const ::TagAlias::RequestCanceledException* __ex = dynamic_cast<const ::TagAlias::RequestCanceledException*>(&ex))
    {
        if(__validateResponse(false))
        {
            __writeUserException(*__ex, ::Ice::DefaultFormat);
            __response();
        }
    }
    else
    {
        ::IceInternal::IncomingAsync::ice_exception(ex);
    }
}
::IceProxy::Ice::Object* ::IceProxy::TagAlias::upCast(::IceProxy::TagAlias::TagAliasOp* p) { return p; }

void
::IceProxy::TagAlias::__read(::IceInternal::BasicStream* __is, ::IceInternal::ProxyHandle< ::IceProxy::TagAlias::TagAliasOp>& v)
{
    ::Ice::ObjectPrx proxy;
    __is->read(proxy);
    if(!proxy)
    {
        v = 0;
    }
    else
    {
        v = new ::IceProxy::TagAlias::TagAliasOp;
        v->__copyFrom(proxy);
    }
}

void
IceProxy::TagAlias::TagAliasOp::request(const ::std::string& __p_req, ::std::string& __p_res, const ::Ice::Context* __ctx)
{
    __checkTwowayOnly(__TagAlias__TagAliasOp__request_name);
    ::IceInternal::Outgoing __og(this, __TagAlias__TagAliasOp__request_name, ::Ice::Normal, __ctx);
    try
    {
        ::IceInternal::BasicStream* __os = __og.startWriteParams(::Ice::DefaultFormat);
        __os->write(__p_req);
        __og.endWriteParams();
    }
    catch(const ::Ice::LocalException& __ex)
    {
        __og.abort(__ex);
    }
    if(!__og.invoke())
    {
        try
        {
            __og.throwUserException();
        }
        catch(const ::TagAlias::RequestCanceledException&)
        {
            throw;
        }
        catch(const ::Ice::UserException& __ex)
        {
            ::Ice::UnknownUserException __uue(__FILE__, __LINE__, __ex.ice_name());
            throw __uue;
        }
    }
    ::IceInternal::BasicStream* __is = __og.startReadParams();
    __is->read(__p_res);
    __og.endReadParams();
}

::Ice::AsyncResultPtr
IceProxy::TagAlias::TagAliasOp::begin_request(const ::std::string& __p_req, const ::Ice::Context* __ctx, const ::IceInternal::CallbackBasePtr& __del, const ::Ice::LocalObjectPtr& __cookie)
{
    __checkAsyncTwowayOnly(__TagAlias__TagAliasOp__request_name);
    ::IceInternal::OutgoingAsyncPtr __result = new ::IceInternal::OutgoingAsync(this, __TagAlias__TagAliasOp__request_name, __del, __cookie);
    try
    {
        __result->prepare(__TagAlias__TagAliasOp__request_name, ::Ice::Normal, __ctx);
        ::IceInternal::BasicStream* __os = __result->startWriteParams(::Ice::DefaultFormat);
        __os->write(__p_req);
        __result->endWriteParams();
        __result->invoke();
    }
    catch(const ::Ice::Exception& __ex)
    {
        __result->abort(__ex);
    }
    return __result;
}

#ifdef ICE_CPP11

::Ice::AsyncResultPtr
IceProxy::TagAlias::TagAliasOp::__begin_request(const ::std::string& __p_req, const ::Ice::Context* __ctx, const ::IceInternal::Function<void (const ::std::string&)>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception, const ::IceInternal::Function<void (bool)>& __sent)
{
    class Cpp11CB : public ::IceInternal::Cpp11FnCallbackNC
    {
    public:

        Cpp11CB(const ::std::function<void (const ::std::string&)>& responseFunc, const ::std::function<void (const ::Ice::Exception&)>& exceptionFunc, const ::std::function<void (bool)>& sentFunc) :
            ::IceInternal::Cpp11FnCallbackNC(exceptionFunc, sentFunc),
            _response(responseFunc)
        {
            CallbackBase::checkCallback(true, responseFunc || exceptionFunc != nullptr);
        }

        virtual void completed(const ::Ice::AsyncResultPtr& __result) const
        {
            ::TagAlias::TagAliasOpPrx __proxy = ::TagAlias::TagAliasOpPrx::uncheckedCast(__result->getProxy());
            ::std::string __p_res;
            try
            {
                __proxy->end_request(__p_res, __result);
            }
            catch(const ::Ice::Exception& ex)
            {
                Cpp11FnCallbackNC::exception(__result, ex);
                return;
            }
            if(_response != nullptr)
            {
                _response(__p_res);
            }
        }
    
    private:
        
        ::std::function<void (const ::std::string&)> _response;
    };
    return begin_request(__p_req, __ctx, new Cpp11CB(__response, __exception, __sent));
}
#endif

void
IceProxy::TagAlias::TagAliasOp::end_request(::std::string& __p_res, const ::Ice::AsyncResultPtr& __result)
{
    ::Ice::AsyncResult::__check(__result, this, __TagAlias__TagAliasOp__request_name);
    if(!__result->__wait())
    {
        try
        {
            __result->__throwUserException();
        }
        catch(const ::TagAlias::RequestCanceledException&)
        {
            throw;
        }
        catch(const ::Ice::UserException& __ex)
        {
            throw ::Ice::UnknownUserException(__FILE__, __LINE__, __ex.ice_name());
        }
    }
    ::IceInternal::BasicStream* __is = __result->__startReadParams();
    __is->read(__p_res);
    __result->__endReadParams();
}

void
IceProxy::TagAlias::TagAliasOp::request_next(const ::std::string& __p_req, ::std::string& __p_res, const ::Ice::Context* __ctx)
{
    __checkTwowayOnly(__TagAlias__TagAliasOp__request_next_name);
    ::IceInternal::Outgoing __og(this, __TagAlias__TagAliasOp__request_next_name, ::Ice::Normal, __ctx);
    try
    {
        ::IceInternal::BasicStream* __os = __og.startWriteParams(::Ice::DefaultFormat);
        __os->write(__p_req);
        __og.endWriteParams();
    }
    catch(const ::Ice::LocalException& __ex)
    {
        __og.abort(__ex);
    }
    if(!__og.invoke())
    {
        try
        {
            __og.throwUserException();
        }
        catch(const ::TagAlias::RequestCanceledException&)
        {
            throw;
        }
        catch(const ::Ice::UserException& __ex)
        {
            ::Ice::UnknownUserException __uue(__FILE__, __LINE__, __ex.ice_name());
            throw __uue;
        }
    }
    ::IceInternal::BasicStream* __is = __og.startReadParams();
    __is->read(__p_res);
    __og.endReadParams();
}

::Ice::AsyncResultPtr
IceProxy::TagAlias::TagAliasOp::begin_request_next(const ::std::string& __p_req, const ::Ice::Context* __ctx, const ::IceInternal::CallbackBasePtr& __del, const ::Ice::LocalObjectPtr& __cookie)
{
    __checkAsyncTwowayOnly(__TagAlias__TagAliasOp__request_next_name);
    ::IceInternal::OutgoingAsyncPtr __result = new ::IceInternal::OutgoingAsync(this, __TagAlias__TagAliasOp__request_next_name, __del, __cookie);
    try
    {
        __result->prepare(__TagAlias__TagAliasOp__request_next_name, ::Ice::Normal, __ctx);
        ::IceInternal::BasicStream* __os = __result->startWriteParams(::Ice::DefaultFormat);
        __os->write(__p_req);
        __result->endWriteParams();
        __result->invoke();
    }
    catch(const ::Ice::Exception& __ex)
    {
        __result->abort(__ex);
    }
    return __result;
}

#ifdef ICE_CPP11

::Ice::AsyncResultPtr
IceProxy::TagAlias::TagAliasOp::__begin_request_next(const ::std::string& __p_req, const ::Ice::Context* __ctx, const ::IceInternal::Function<void (const ::std::string&)>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception, const ::IceInternal::Function<void (bool)>& __sent)
{
    class Cpp11CB : public ::IceInternal::Cpp11FnCallbackNC
    {
    public:

        Cpp11CB(const ::std::function<void (const ::std::string&)>& responseFunc, const ::std::function<void (const ::Ice::Exception&)>& exceptionFunc, const ::std::function<void (bool)>& sentFunc) :
            ::IceInternal::Cpp11FnCallbackNC(exceptionFunc, sentFunc),
            _response(responseFunc)
        {
            CallbackBase::checkCallback(true, responseFunc || exceptionFunc != nullptr);
        }

        virtual void completed(const ::Ice::AsyncResultPtr& __result) const
        {
            ::TagAlias::TagAliasOpPrx __proxy = ::TagAlias::TagAliasOpPrx::uncheckedCast(__result->getProxy());
            ::std::string __p_res;
            try
            {
                __proxy->end_request_next(__p_res, __result);
            }
            catch(const ::Ice::Exception& ex)
            {
                Cpp11FnCallbackNC::exception(__result, ex);
                return;
            }
            if(_response != nullptr)
            {
                _response(__p_res);
            }
        }
    
    private:
        
        ::std::function<void (const ::std::string&)> _response;
    };
    return begin_request_next(__p_req, __ctx, new Cpp11CB(__response, __exception, __sent));
}
#endif

void
IceProxy::TagAlias::TagAliasOp::end_request_next(::std::string& __p_res, const ::Ice::AsyncResultPtr& __result)
{
    ::Ice::AsyncResult::__check(__result, this, __TagAlias__TagAliasOp__request_next_name);
    if(!__result->__wait())
    {
        try
        {
            __result->__throwUserException();
        }
        catch(const ::TagAlias::RequestCanceledException&)
        {
            throw;
        }
        catch(const ::Ice::UserException& __ex)
        {
            throw ::Ice::UnknownUserException(__FILE__, __LINE__, __ex.ice_name());
        }
    }
    ::IceInternal::BasicStream* __is = __result->__startReadParams();
    __is->read(__p_res);
    __result->__endReadParams();
}

void
IceProxy::TagAlias::TagAliasOp::getTaglist(const ::TagAlias::bytes& __p_req, ::TagAlias::bytes& __p_res, const ::Ice::Context* __ctx)
{
    __checkTwowayOnly(__TagAlias__TagAliasOp__getTaglist_name);
    ::IceInternal::Outgoing __og(this, __TagAlias__TagAliasOp__getTaglist_name, ::Ice::Idempotent, __ctx);
    try
    {
        ::IceInternal::BasicStream* __os = __og.startWriteParams(::Ice::DefaultFormat);
        __os->write(__p_req);
        __og.endWriteParams();
    }
    catch(const ::Ice::LocalException& __ex)
    {
        __og.abort(__ex);
    }
    if(!__og.invoke())
    {
        try
        {
            __og.throwUserException();
        }
        catch(const ::TagAlias::RequestCanceledException&)
        {
            throw;
        }
        catch(const ::Ice::UserException& __ex)
        {
            ::Ice::UnknownUserException __uue(__FILE__, __LINE__, __ex.ice_name());
            throw __uue;
        }
    }
    ::IceInternal::BasicStream* __is = __og.startReadParams();
    __is->read(__p_res);
    __og.endReadParams();
}

::Ice::AsyncResultPtr
IceProxy::TagAlias::TagAliasOp::begin_getTaglist(const ::TagAlias::bytes& __p_req, const ::Ice::Context* __ctx, const ::IceInternal::CallbackBasePtr& __del, const ::Ice::LocalObjectPtr& __cookie)
{
    __checkAsyncTwowayOnly(__TagAlias__TagAliasOp__getTaglist_name);
    ::IceInternal::OutgoingAsyncPtr __result = new ::IceInternal::OutgoingAsync(this, __TagAlias__TagAliasOp__getTaglist_name, __del, __cookie);
    try
    {
        __result->prepare(__TagAlias__TagAliasOp__getTaglist_name, ::Ice::Idempotent, __ctx);
        ::IceInternal::BasicStream* __os = __result->startWriteParams(::Ice::DefaultFormat);
        __os->write(__p_req);
        __result->endWriteParams();
        __result->invoke();
    }
    catch(const ::Ice::Exception& __ex)
    {
        __result->abort(__ex);
    }
    return __result;
}

#ifdef ICE_CPP11

::Ice::AsyncResultPtr
IceProxy::TagAlias::TagAliasOp::__begin_getTaglist(const ::TagAlias::bytes& __p_req, const ::Ice::Context* __ctx, const ::IceInternal::Function<void (const ::TagAlias::bytes&)>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception, const ::IceInternal::Function<void (bool)>& __sent)
{
    class Cpp11CB : public ::IceInternal::Cpp11FnCallbackNC
    {
    public:

        Cpp11CB(const ::std::function<void (const ::TagAlias::bytes&)>& responseFunc, const ::std::function<void (const ::Ice::Exception&)>& exceptionFunc, const ::std::function<void (bool)>& sentFunc) :
            ::IceInternal::Cpp11FnCallbackNC(exceptionFunc, sentFunc),
            _response(responseFunc)
        {
            CallbackBase::checkCallback(true, responseFunc || exceptionFunc != nullptr);
        }

        virtual void completed(const ::Ice::AsyncResultPtr& __result) const
        {
            ::TagAlias::TagAliasOpPrx __proxy = ::TagAlias::TagAliasOpPrx::uncheckedCast(__result->getProxy());
            ::TagAlias::bytes __p_res;
            try
            {
                __proxy->end_getTaglist(__p_res, __result);
            }
            catch(const ::Ice::Exception& ex)
            {
                Cpp11FnCallbackNC::exception(__result, ex);
                return;
            }
            if(_response != nullptr)
            {
                _response(__p_res);
            }
        }
    
    private:
        
        ::std::function<void (const ::TagAlias::bytes&)> _response;
    };
    return begin_getTaglist(__p_req, __ctx, new Cpp11CB(__response, __exception, __sent));
}
#endif

void
IceProxy::TagAlias::TagAliasOp::end_getTaglist(::TagAlias::bytes& __p_res, const ::Ice::AsyncResultPtr& __result)
{
    ::Ice::AsyncResult::__check(__result, this, __TagAlias__TagAliasOp__getTaglist_name);
    if(!__result->__wait())
    {
        try
        {
            __result->__throwUserException();
        }
        catch(const ::TagAlias::RequestCanceledException&)
        {
            throw;
        }
        catch(const ::Ice::UserException& __ex)
        {
            throw ::Ice::UnknownUserException(__FILE__, __LINE__, __ex.ice_name());
        }
    }
    ::IceInternal::BasicStream* __is = __result->__startReadParams();
    __is->read(__p_res);
    __result->__endReadParams();
}

void
IceProxy::TagAlias::TagAliasOp::getUsersByTag(const ::TagAlias::bytes& __p_req, ::TagAlias::bytes& __p_res, const ::Ice::Context* __ctx)
{
    __checkTwowayOnly(__TagAlias__TagAliasOp__getUsersByTag_name);
    ::IceInternal::Outgoing __og(this, __TagAlias__TagAliasOp__getUsersByTag_name, ::Ice::Idempotent, __ctx);
    try
    {
        ::IceInternal::BasicStream* __os = __og.startWriteParams(::Ice::DefaultFormat);
        __os->write(__p_req);
        __og.endWriteParams();
    }
    catch(const ::Ice::LocalException& __ex)
    {
        __og.abort(__ex);
    }
    if(!__og.invoke())
    {
        try
        {
            __og.throwUserException();
        }
        catch(const ::TagAlias::RequestCanceledException&)
        {
            throw;
        }
        catch(const ::Ice::UserException& __ex)
        {
            ::Ice::UnknownUserException __uue(__FILE__, __LINE__, __ex.ice_name());
            throw __uue;
        }
    }
    ::IceInternal::BasicStream* __is = __og.startReadParams();
    __is->read(__p_res);
    __og.endReadParams();
}

::Ice::AsyncResultPtr
IceProxy::TagAlias::TagAliasOp::begin_getUsersByTag(const ::TagAlias::bytes& __p_req, const ::Ice::Context* __ctx, const ::IceInternal::CallbackBasePtr& __del, const ::Ice::LocalObjectPtr& __cookie)
{
    __checkAsyncTwowayOnly(__TagAlias__TagAliasOp__getUsersByTag_name);
    ::IceInternal::OutgoingAsyncPtr __result = new ::IceInternal::OutgoingAsync(this, __TagAlias__TagAliasOp__getUsersByTag_name, __del, __cookie);
    try
    {
        __result->prepare(__TagAlias__TagAliasOp__getUsersByTag_name, ::Ice::Idempotent, __ctx);
        ::IceInternal::BasicStream* __os = __result->startWriteParams(::Ice::DefaultFormat);
        __os->write(__p_req);
        __result->endWriteParams();
        __result->invoke();
    }
    catch(const ::Ice::Exception& __ex)
    {
        __result->abort(__ex);
    }
    return __result;
}

#ifdef ICE_CPP11

::Ice::AsyncResultPtr
IceProxy::TagAlias::TagAliasOp::__begin_getUsersByTag(const ::TagAlias::bytes& __p_req, const ::Ice::Context* __ctx, const ::IceInternal::Function<void (const ::TagAlias::bytes&)>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception, const ::IceInternal::Function<void (bool)>& __sent)
{
    class Cpp11CB : public ::IceInternal::Cpp11FnCallbackNC
    {
    public:

        Cpp11CB(const ::std::function<void (const ::TagAlias::bytes&)>& responseFunc, const ::std::function<void (const ::Ice::Exception&)>& exceptionFunc, const ::std::function<void (bool)>& sentFunc) :
            ::IceInternal::Cpp11FnCallbackNC(exceptionFunc, sentFunc),
            _response(responseFunc)
        {
            CallbackBase::checkCallback(true, responseFunc || exceptionFunc != nullptr);
        }

        virtual void completed(const ::Ice::AsyncResultPtr& __result) const
        {
            ::TagAlias::TagAliasOpPrx __proxy = ::TagAlias::TagAliasOpPrx::uncheckedCast(__result->getProxy());
            ::TagAlias::bytes __p_res;
            try
            {
                __proxy->end_getUsersByTag(__p_res, __result);
            }
            catch(const ::Ice::Exception& ex)
            {
                Cpp11FnCallbackNC::exception(__result, ex);
                return;
            }
            if(_response != nullptr)
            {
                _response(__p_res);
            }
        }
    
    private:
        
        ::std::function<void (const ::TagAlias::bytes&)> _response;
    };
    return begin_getUsersByTag(__p_req, __ctx, new Cpp11CB(__response, __exception, __sent));
}
#endif

void
IceProxy::TagAlias::TagAliasOp::end_getUsersByTag(::TagAlias::bytes& __p_res, const ::Ice::AsyncResultPtr& __result)
{
    ::Ice::AsyncResult::__check(__result, this, __TagAlias__TagAliasOp__getUsersByTag_name);
    if(!__result->__wait())
    {
        try
        {
            __result->__throwUserException();
        }
        catch(const ::TagAlias::RequestCanceledException&)
        {
            throw;
        }
        catch(const ::Ice::UserException& __ex)
        {
            throw ::Ice::UnknownUserException(__FILE__, __LINE__, __ex.ice_name());
        }
    }
    ::IceInternal::BasicStream* __is = __result->__startReadParams();
    __is->read(__p_res);
    __result->__endReadParams();
}

void
IceProxy::TagAlias::TagAliasOp::getUsersByAlias(const ::TagAlias::bytes& __p_req, ::TagAlias::bytes& __p_res, const ::Ice::Context* __ctx)
{
    __checkTwowayOnly(__TagAlias__TagAliasOp__getUsersByAlias_name);
    ::IceInternal::Outgoing __og(this, __TagAlias__TagAliasOp__getUsersByAlias_name, ::Ice::Idempotent, __ctx);
    try
    {
        ::IceInternal::BasicStream* __os = __og.startWriteParams(::Ice::DefaultFormat);
        __os->write(__p_req);
        __og.endWriteParams();
    }
    catch(const ::Ice::LocalException& __ex)
    {
        __og.abort(__ex);
    }
    if(!__og.invoke())
    {
        try
        {
            __og.throwUserException();
        }
        catch(const ::TagAlias::RequestCanceledException&)
        {
            throw;
        }
        catch(const ::Ice::UserException& __ex)
        {
            ::Ice::UnknownUserException __uue(__FILE__, __LINE__, __ex.ice_name());
            throw __uue;
        }
    }
    ::IceInternal::BasicStream* __is = __og.startReadParams();
    __is->read(__p_res);
    __og.endReadParams();
}

::Ice::AsyncResultPtr
IceProxy::TagAlias::TagAliasOp::begin_getUsersByAlias(const ::TagAlias::bytes& __p_req, const ::Ice::Context* __ctx, const ::IceInternal::CallbackBasePtr& __del, const ::Ice::LocalObjectPtr& __cookie)
{
    __checkAsyncTwowayOnly(__TagAlias__TagAliasOp__getUsersByAlias_name);
    ::IceInternal::OutgoingAsyncPtr __result = new ::IceInternal::OutgoingAsync(this, __TagAlias__TagAliasOp__getUsersByAlias_name, __del, __cookie);
    try
    {
        __result->prepare(__TagAlias__TagAliasOp__getUsersByAlias_name, ::Ice::Idempotent, __ctx);
        ::IceInternal::BasicStream* __os = __result->startWriteParams(::Ice::DefaultFormat);
        __os->write(__p_req);
        __result->endWriteParams();
        __result->invoke();
    }
    catch(const ::Ice::Exception& __ex)
    {
        __result->abort(__ex);
    }
    return __result;
}

#ifdef ICE_CPP11

::Ice::AsyncResultPtr
IceProxy::TagAlias::TagAliasOp::__begin_getUsersByAlias(const ::TagAlias::bytes& __p_req, const ::Ice::Context* __ctx, const ::IceInternal::Function<void (const ::TagAlias::bytes&)>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception, const ::IceInternal::Function<void (bool)>& __sent)
{
    class Cpp11CB : public ::IceInternal::Cpp11FnCallbackNC
    {
    public:

        Cpp11CB(const ::std::function<void (const ::TagAlias::bytes&)>& responseFunc, const ::std::function<void (const ::Ice::Exception&)>& exceptionFunc, const ::std::function<void (bool)>& sentFunc) :
            ::IceInternal::Cpp11FnCallbackNC(exceptionFunc, sentFunc),
            _response(responseFunc)
        {
            CallbackBase::checkCallback(true, responseFunc || exceptionFunc != nullptr);
        }

        virtual void completed(const ::Ice::AsyncResultPtr& __result) const
        {
            ::TagAlias::TagAliasOpPrx __proxy = ::TagAlias::TagAliasOpPrx::uncheckedCast(__result->getProxy());
            ::TagAlias::bytes __p_res;
            try
            {
                __proxy->end_getUsersByAlias(__p_res, __result);
            }
            catch(const ::Ice::Exception& ex)
            {
                Cpp11FnCallbackNC::exception(__result, ex);
                return;
            }
            if(_response != nullptr)
            {
                _response(__p_res);
            }
        }
    
    private:
        
        ::std::function<void (const ::TagAlias::bytes&)> _response;
    };
    return begin_getUsersByAlias(__p_req, __ctx, new Cpp11CB(__response, __exception, __sent));
}
#endif

void
IceProxy::TagAlias::TagAliasOp::end_getUsersByAlias(::TagAlias::bytes& __p_res, const ::Ice::AsyncResultPtr& __result)
{
    ::Ice::AsyncResult::__check(__result, this, __TagAlias__TagAliasOp__getUsersByAlias_name);
    if(!__result->__wait())
    {
        try
        {
            __result->__throwUserException();
        }
        catch(const ::TagAlias::RequestCanceledException&)
        {
            throw;
        }
        catch(const ::Ice::UserException& __ex)
        {
            throw ::Ice::UnknownUserException(__FILE__, __LINE__, __ex.ice_name());
        }
    }
    ::IceInternal::BasicStream* __is = __result->__startReadParams();
    __is->read(__p_res);
    __result->__endReadParams();
}

void
IceProxy::TagAlias::TagAliasOp::getTagsByUser(const ::TagAlias::bytes& __p_req, ::TagAlias::bytes& __p_res, const ::Ice::Context* __ctx)
{
    __checkTwowayOnly(__TagAlias__TagAliasOp__getTagsByUser_name);
    ::IceInternal::Outgoing __og(this, __TagAlias__TagAliasOp__getTagsByUser_name, ::Ice::Idempotent, __ctx);
    try
    {
        ::IceInternal::BasicStream* __os = __og.startWriteParams(::Ice::DefaultFormat);
        __os->write(__p_req);
        __og.endWriteParams();
    }
    catch(const ::Ice::LocalException& __ex)
    {
        __og.abort(__ex);
    }
    if(!__og.invoke())
    {
        try
        {
            __og.throwUserException();
        }
        catch(const ::TagAlias::RequestCanceledException&)
        {
            throw;
        }
        catch(const ::Ice::UserException& __ex)
        {
            ::Ice::UnknownUserException __uue(__FILE__, __LINE__, __ex.ice_name());
            throw __uue;
        }
    }
    ::IceInternal::BasicStream* __is = __og.startReadParams();
    __is->read(__p_res);
    __og.endReadParams();
}

::Ice::AsyncResultPtr
IceProxy::TagAlias::TagAliasOp::begin_getTagsByUser(const ::TagAlias::bytes& __p_req, const ::Ice::Context* __ctx, const ::IceInternal::CallbackBasePtr& __del, const ::Ice::LocalObjectPtr& __cookie)
{
    __checkAsyncTwowayOnly(__TagAlias__TagAliasOp__getTagsByUser_name);
    ::IceInternal::OutgoingAsyncPtr __result = new ::IceInternal::OutgoingAsync(this, __TagAlias__TagAliasOp__getTagsByUser_name, __del, __cookie);
    try
    {
        __result->prepare(__TagAlias__TagAliasOp__getTagsByUser_name, ::Ice::Idempotent, __ctx);
        ::IceInternal::BasicStream* __os = __result->startWriteParams(::Ice::DefaultFormat);
        __os->write(__p_req);
        __result->endWriteParams();
        __result->invoke();
    }
    catch(const ::Ice::Exception& __ex)
    {
        __result->abort(__ex);
    }
    return __result;
}

#ifdef ICE_CPP11

::Ice::AsyncResultPtr
IceProxy::TagAlias::TagAliasOp::__begin_getTagsByUser(const ::TagAlias::bytes& __p_req, const ::Ice::Context* __ctx, const ::IceInternal::Function<void (const ::TagAlias::bytes&)>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception, const ::IceInternal::Function<void (bool)>& __sent)
{
    class Cpp11CB : public ::IceInternal::Cpp11FnCallbackNC
    {
    public:

        Cpp11CB(const ::std::function<void (const ::TagAlias::bytes&)>& responseFunc, const ::std::function<void (const ::Ice::Exception&)>& exceptionFunc, const ::std::function<void (bool)>& sentFunc) :
            ::IceInternal::Cpp11FnCallbackNC(exceptionFunc, sentFunc),
            _response(responseFunc)
        {
            CallbackBase::checkCallback(true, responseFunc || exceptionFunc != nullptr);
        }

        virtual void completed(const ::Ice::AsyncResultPtr& __result) const
        {
            ::TagAlias::TagAliasOpPrx __proxy = ::TagAlias::TagAliasOpPrx::uncheckedCast(__result->getProxy());
            ::TagAlias::bytes __p_res;
            try
            {
                __proxy->end_getTagsByUser(__p_res, __result);
            }
            catch(const ::Ice::Exception& ex)
            {
                Cpp11FnCallbackNC::exception(__result, ex);
                return;
            }
            if(_response != nullptr)
            {
                _response(__p_res);
            }
        }
    
    private:
        
        ::std::function<void (const ::TagAlias::bytes&)> _response;
    };
    return begin_getTagsByUser(__p_req, __ctx, new Cpp11CB(__response, __exception, __sent));
}
#endif

void
IceProxy::TagAlias::TagAliasOp::end_getTagsByUser(::TagAlias::bytes& __p_res, const ::Ice::AsyncResultPtr& __result)
{
    ::Ice::AsyncResult::__check(__result, this, __TagAlias__TagAliasOp__getTagsByUser_name);
    if(!__result->__wait())
    {
        try
        {
            __result->__throwUserException();
        }
        catch(const ::TagAlias::RequestCanceledException&)
        {
            throw;
        }
        catch(const ::Ice::UserException& __ex)
        {
            throw ::Ice::UnknownUserException(__FILE__, __LINE__, __ex.ice_name());
        }
    }
    ::IceInternal::BasicStream* __is = __result->__startReadParams();
    __is->read(__p_res);
    __result->__endReadParams();
}

void
IceProxy::TagAlias::TagAliasOp::getAliasByUser(const ::TagAlias::bytes& __p_req, ::TagAlias::bytes& __p_res, const ::Ice::Context* __ctx)
{
    __checkTwowayOnly(__TagAlias__TagAliasOp__getAliasByUser_name);
    ::IceInternal::Outgoing __og(this, __TagAlias__TagAliasOp__getAliasByUser_name, ::Ice::Idempotent, __ctx);
    try
    {
        ::IceInternal::BasicStream* __os = __og.startWriteParams(::Ice::DefaultFormat);
        __os->write(__p_req);
        __og.endWriteParams();
    }
    catch(const ::Ice::LocalException& __ex)
    {
        __og.abort(__ex);
    }
    if(!__og.invoke())
    {
        try
        {
            __og.throwUserException();
        }
        catch(const ::TagAlias::RequestCanceledException&)
        {
            throw;
        }
        catch(const ::Ice::UserException& __ex)
        {
            ::Ice::UnknownUserException __uue(__FILE__, __LINE__, __ex.ice_name());
            throw __uue;
        }
    }
    ::IceInternal::BasicStream* __is = __og.startReadParams();
    __is->read(__p_res);
    __og.endReadParams();
}

::Ice::AsyncResultPtr
IceProxy::TagAlias::TagAliasOp::begin_getAliasByUser(const ::TagAlias::bytes& __p_req, const ::Ice::Context* __ctx, const ::IceInternal::CallbackBasePtr& __del, const ::Ice::LocalObjectPtr& __cookie)
{
    __checkAsyncTwowayOnly(__TagAlias__TagAliasOp__getAliasByUser_name);
    ::IceInternal::OutgoingAsyncPtr __result = new ::IceInternal::OutgoingAsync(this, __TagAlias__TagAliasOp__getAliasByUser_name, __del, __cookie);
    try
    {
        __result->prepare(__TagAlias__TagAliasOp__getAliasByUser_name, ::Ice::Idempotent, __ctx);
        ::IceInternal::BasicStream* __os = __result->startWriteParams(::Ice::DefaultFormat);
        __os->write(__p_req);
        __result->endWriteParams();
        __result->invoke();
    }
    catch(const ::Ice::Exception& __ex)
    {
        __result->abort(__ex);
    }
    return __result;
}

#ifdef ICE_CPP11

::Ice::AsyncResultPtr
IceProxy::TagAlias::TagAliasOp::__begin_getAliasByUser(const ::TagAlias::bytes& __p_req, const ::Ice::Context* __ctx, const ::IceInternal::Function<void (const ::TagAlias::bytes&)>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception, const ::IceInternal::Function<void (bool)>& __sent)
{
    class Cpp11CB : public ::IceInternal::Cpp11FnCallbackNC
    {
    public:

        Cpp11CB(const ::std::function<void (const ::TagAlias::bytes&)>& responseFunc, const ::std::function<void (const ::Ice::Exception&)>& exceptionFunc, const ::std::function<void (bool)>& sentFunc) :
            ::IceInternal::Cpp11FnCallbackNC(exceptionFunc, sentFunc),
            _response(responseFunc)
        {
            CallbackBase::checkCallback(true, responseFunc || exceptionFunc != nullptr);
        }

        virtual void completed(const ::Ice::AsyncResultPtr& __result) const
        {
            ::TagAlias::TagAliasOpPrx __proxy = ::TagAlias::TagAliasOpPrx::uncheckedCast(__result->getProxy());
            ::TagAlias::bytes __p_res;
            try
            {
                __proxy->end_getAliasByUser(__p_res, __result);
            }
            catch(const ::Ice::Exception& ex)
            {
                Cpp11FnCallbackNC::exception(__result, ex);
                return;
            }
            if(_response != nullptr)
            {
                _response(__p_res);
            }
        }
    
    private:
        
        ::std::function<void (const ::TagAlias::bytes&)> _response;
    };
    return begin_getAliasByUser(__p_req, __ctx, new Cpp11CB(__response, __exception, __sent));
}
#endif

void
IceProxy::TagAlias::TagAliasOp::end_getAliasByUser(::TagAlias::bytes& __p_res, const ::Ice::AsyncResultPtr& __result)
{
    ::Ice::AsyncResult::__check(__result, this, __TagAlias__TagAliasOp__getAliasByUser_name);
    if(!__result->__wait())
    {
        try
        {
            __result->__throwUserException();
        }
        catch(const ::TagAlias::RequestCanceledException&)
        {
            throw;
        }
        catch(const ::Ice::UserException& __ex)
        {
            throw ::Ice::UnknownUserException(__FILE__, __LINE__, __ex.ice_name());
        }
    }
    ::IceInternal::BasicStream* __is = __result->__startReadParams();
    __is->read(__p_res);
    __result->__endReadParams();
}

void
IceProxy::TagAlias::TagAliasOp::checkUserBelongTag(const ::TagAlias::bytes& __p_req, ::TagAlias::bytes& __p_res, const ::Ice::Context* __ctx)
{
    __checkTwowayOnly(__TagAlias__TagAliasOp__checkUserBelongTag_name);
    ::IceInternal::Outgoing __og(this, __TagAlias__TagAliasOp__checkUserBelongTag_name, ::Ice::Idempotent, __ctx);
    try
    {
        ::IceInternal::BasicStream* __os = __og.startWriteParams(::Ice::DefaultFormat);
        __os->write(__p_req);
        __og.endWriteParams();
    }
    catch(const ::Ice::LocalException& __ex)
    {
        __og.abort(__ex);
    }
    if(!__og.invoke())
    {
        try
        {
            __og.throwUserException();
        }
        catch(const ::TagAlias::RequestCanceledException&)
        {
            throw;
        }
        catch(const ::Ice::UserException& __ex)
        {
            ::Ice::UnknownUserException __uue(__FILE__, __LINE__, __ex.ice_name());
            throw __uue;
        }
    }
    ::IceInternal::BasicStream* __is = __og.startReadParams();
    __is->read(__p_res);
    __og.endReadParams();
}

::Ice::AsyncResultPtr
IceProxy::TagAlias::TagAliasOp::begin_checkUserBelongTag(const ::TagAlias::bytes& __p_req, const ::Ice::Context* __ctx, const ::IceInternal::CallbackBasePtr& __del, const ::Ice::LocalObjectPtr& __cookie)
{
    __checkAsyncTwowayOnly(__TagAlias__TagAliasOp__checkUserBelongTag_name);
    ::IceInternal::OutgoingAsyncPtr __result = new ::IceInternal::OutgoingAsync(this, __TagAlias__TagAliasOp__checkUserBelongTag_name, __del, __cookie);
    try
    {
        __result->prepare(__TagAlias__TagAliasOp__checkUserBelongTag_name, ::Ice::Idempotent, __ctx);
        ::IceInternal::BasicStream* __os = __result->startWriteParams(::Ice::DefaultFormat);
        __os->write(__p_req);
        __result->endWriteParams();
        __result->invoke();
    }
    catch(const ::Ice::Exception& __ex)
    {
        __result->abort(__ex);
    }
    return __result;
}

#ifdef ICE_CPP11

::Ice::AsyncResultPtr
IceProxy::TagAlias::TagAliasOp::__begin_checkUserBelongTag(const ::TagAlias::bytes& __p_req, const ::Ice::Context* __ctx, const ::IceInternal::Function<void (const ::TagAlias::bytes&)>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception, const ::IceInternal::Function<void (bool)>& __sent)
{
    class Cpp11CB : public ::IceInternal::Cpp11FnCallbackNC
    {
    public:

        Cpp11CB(const ::std::function<void (const ::TagAlias::bytes&)>& responseFunc, const ::std::function<void (const ::Ice::Exception&)>& exceptionFunc, const ::std::function<void (bool)>& sentFunc) :
            ::IceInternal::Cpp11FnCallbackNC(exceptionFunc, sentFunc),
            _response(responseFunc)
        {
            CallbackBase::checkCallback(true, responseFunc || exceptionFunc != nullptr);
        }

        virtual void completed(const ::Ice::AsyncResultPtr& __result) const
        {
            ::TagAlias::TagAliasOpPrx __proxy = ::TagAlias::TagAliasOpPrx::uncheckedCast(__result->getProxy());
            ::TagAlias::bytes __p_res;
            try
            {
                __proxy->end_checkUserBelongTag(__p_res, __result);
            }
            catch(const ::Ice::Exception& ex)
            {
                Cpp11FnCallbackNC::exception(__result, ex);
                return;
            }
            if(_response != nullptr)
            {
                _response(__p_res);
            }
        }
    
    private:
        
        ::std::function<void (const ::TagAlias::bytes&)> _response;
    };
    return begin_checkUserBelongTag(__p_req, __ctx, new Cpp11CB(__response, __exception, __sent));
}
#endif

void
IceProxy::TagAlias::TagAliasOp::end_checkUserBelongTag(::TagAlias::bytes& __p_res, const ::Ice::AsyncResultPtr& __result)
{
    ::Ice::AsyncResult::__check(__result, this, __TagAlias__TagAliasOp__checkUserBelongTag_name);
    if(!__result->__wait())
    {
        try
        {
            __result->__throwUserException();
        }
        catch(const ::TagAlias::RequestCanceledException&)
        {
            throw;
        }
        catch(const ::Ice::UserException& __ex)
        {
            throw ::Ice::UnknownUserException(__FILE__, __LINE__, __ex.ice_name());
        }
    }
    ::IceInternal::BasicStream* __is = __result->__startReadParams();
    __is->read(__p_res);
    __result->__endReadParams();
}

void
IceProxy::TagAlias::TagAliasOp::checkUserBelongAlias(const ::TagAlias::bytes& __p_req, ::TagAlias::bytes& __p_res, const ::Ice::Context* __ctx)
{
    __checkTwowayOnly(__TagAlias__TagAliasOp__checkUserBelongAlias_name);
    ::IceInternal::Outgoing __og(this, __TagAlias__TagAliasOp__checkUserBelongAlias_name, ::Ice::Idempotent, __ctx);
    try
    {
        ::IceInternal::BasicStream* __os = __og.startWriteParams(::Ice::DefaultFormat);
        __os->write(__p_req);
        __og.endWriteParams();
    }
    catch(const ::Ice::LocalException& __ex)
    {
        __og.abort(__ex);
    }
    if(!__og.invoke())
    {
        try
        {
            __og.throwUserException();
        }
        catch(const ::TagAlias::RequestCanceledException&)
        {
            throw;
        }
        catch(const ::Ice::UserException& __ex)
        {
            ::Ice::UnknownUserException __uue(__FILE__, __LINE__, __ex.ice_name());
            throw __uue;
        }
    }
    ::IceInternal::BasicStream* __is = __og.startReadParams();
    __is->read(__p_res);
    __og.endReadParams();
}

::Ice::AsyncResultPtr
IceProxy::TagAlias::TagAliasOp::begin_checkUserBelongAlias(const ::TagAlias::bytes& __p_req, const ::Ice::Context* __ctx, const ::IceInternal::CallbackBasePtr& __del, const ::Ice::LocalObjectPtr& __cookie)
{
    __checkAsyncTwowayOnly(__TagAlias__TagAliasOp__checkUserBelongAlias_name);
    ::IceInternal::OutgoingAsyncPtr __result = new ::IceInternal::OutgoingAsync(this, __TagAlias__TagAliasOp__checkUserBelongAlias_name, __del, __cookie);
    try
    {
        __result->prepare(__TagAlias__TagAliasOp__checkUserBelongAlias_name, ::Ice::Idempotent, __ctx);
        ::IceInternal::BasicStream* __os = __result->startWriteParams(::Ice::DefaultFormat);
        __os->write(__p_req);
        __result->endWriteParams();
        __result->invoke();
    }
    catch(const ::Ice::Exception& __ex)
    {
        __result->abort(__ex);
    }
    return __result;
}

#ifdef ICE_CPP11

::Ice::AsyncResultPtr
IceProxy::TagAlias::TagAliasOp::__begin_checkUserBelongAlias(const ::TagAlias::bytes& __p_req, const ::Ice::Context* __ctx, const ::IceInternal::Function<void (const ::TagAlias::bytes&)>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception, const ::IceInternal::Function<void (bool)>& __sent)
{
    class Cpp11CB : public ::IceInternal::Cpp11FnCallbackNC
    {
    public:

        Cpp11CB(const ::std::function<void (const ::TagAlias::bytes&)>& responseFunc, const ::std::function<void (const ::Ice::Exception&)>& exceptionFunc, const ::std::function<void (bool)>& sentFunc) :
            ::IceInternal::Cpp11FnCallbackNC(exceptionFunc, sentFunc),
            _response(responseFunc)
        {
            CallbackBase::checkCallback(true, responseFunc || exceptionFunc != nullptr);
        }

        virtual void completed(const ::Ice::AsyncResultPtr& __result) const
        {
            ::TagAlias::TagAliasOpPrx __proxy = ::TagAlias::TagAliasOpPrx::uncheckedCast(__result->getProxy());
            ::TagAlias::bytes __p_res;
            try
            {
                __proxy->end_checkUserBelongAlias(__p_res, __result);
            }
            catch(const ::Ice::Exception& ex)
            {
                Cpp11FnCallbackNC::exception(__result, ex);
                return;
            }
            if(_response != nullptr)
            {
                _response(__p_res);
            }
        }
    
    private:
        
        ::std::function<void (const ::TagAlias::bytes&)> _response;
    };
    return begin_checkUserBelongAlias(__p_req, __ctx, new Cpp11CB(__response, __exception, __sent));
}
#endif

void
IceProxy::TagAlias::TagAliasOp::end_checkUserBelongAlias(::TagAlias::bytes& __p_res, const ::Ice::AsyncResultPtr& __result)
{
    ::Ice::AsyncResult::__check(__result, this, __TagAlias__TagAliasOp__checkUserBelongAlias_name);
    if(!__result->__wait())
    {
        try
        {
            __result->__throwUserException();
        }
        catch(const ::TagAlias::RequestCanceledException&)
        {
            throw;
        }
        catch(const ::Ice::UserException& __ex)
        {
            throw ::Ice::UnknownUserException(__FILE__, __LINE__, __ex.ice_name());
        }
    }
    ::IceInternal::BasicStream* __is = __result->__startReadParams();
    __is->read(__p_res);
    __result->__endReadParams();
}

void
IceProxy::TagAlias::TagAliasOp::getUsersCountByTag(const ::TagAlias::bytes& __p_req, ::TagAlias::bytes& __p_res, const ::Ice::Context* __ctx)
{
    __checkTwowayOnly(__TagAlias__TagAliasOp__getUsersCountByTag_name);
    ::IceInternal::Outgoing __og(this, __TagAlias__TagAliasOp__getUsersCountByTag_name, ::Ice::Idempotent, __ctx);
    try
    {
        ::IceInternal::BasicStream* __os = __og.startWriteParams(::Ice::DefaultFormat);
        __os->write(__p_req);
        __og.endWriteParams();
    }
    catch(const ::Ice::LocalException& __ex)
    {
        __og.abort(__ex);
    }
    if(!__og.invoke())
    {
        try
        {
            __og.throwUserException();
        }
        catch(const ::TagAlias::RequestCanceledException&)
        {
            throw;
        }
        catch(const ::Ice::UserException& __ex)
        {
            ::Ice::UnknownUserException __uue(__FILE__, __LINE__, __ex.ice_name());
            throw __uue;
        }
    }
    ::IceInternal::BasicStream* __is = __og.startReadParams();
    __is->read(__p_res);
    __og.endReadParams();
}

::Ice::AsyncResultPtr
IceProxy::TagAlias::TagAliasOp::begin_getUsersCountByTag(const ::TagAlias::bytes& __p_req, const ::Ice::Context* __ctx, const ::IceInternal::CallbackBasePtr& __del, const ::Ice::LocalObjectPtr& __cookie)
{
    __checkAsyncTwowayOnly(__TagAlias__TagAliasOp__getUsersCountByTag_name);
    ::IceInternal::OutgoingAsyncPtr __result = new ::IceInternal::OutgoingAsync(this, __TagAlias__TagAliasOp__getUsersCountByTag_name, __del, __cookie);
    try
    {
        __result->prepare(__TagAlias__TagAliasOp__getUsersCountByTag_name, ::Ice::Idempotent, __ctx);
        ::IceInternal::BasicStream* __os = __result->startWriteParams(::Ice::DefaultFormat);
        __os->write(__p_req);
        __result->endWriteParams();
        __result->invoke();
    }
    catch(const ::Ice::Exception& __ex)
    {
        __result->abort(__ex);
    }
    return __result;
}

#ifdef ICE_CPP11

::Ice::AsyncResultPtr
IceProxy::TagAlias::TagAliasOp::__begin_getUsersCountByTag(const ::TagAlias::bytes& __p_req, const ::Ice::Context* __ctx, const ::IceInternal::Function<void (const ::TagAlias::bytes&)>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception, const ::IceInternal::Function<void (bool)>& __sent)
{
    class Cpp11CB : public ::IceInternal::Cpp11FnCallbackNC
    {
    public:

        Cpp11CB(const ::std::function<void (const ::TagAlias::bytes&)>& responseFunc, const ::std::function<void (const ::Ice::Exception&)>& exceptionFunc, const ::std::function<void (bool)>& sentFunc) :
            ::IceInternal::Cpp11FnCallbackNC(exceptionFunc, sentFunc),
            _response(responseFunc)
        {
            CallbackBase::checkCallback(true, responseFunc || exceptionFunc != nullptr);
        }

        virtual void completed(const ::Ice::AsyncResultPtr& __result) const
        {
            ::TagAlias::TagAliasOpPrx __proxy = ::TagAlias::TagAliasOpPrx::uncheckedCast(__result->getProxy());
            ::TagAlias::bytes __p_res;
            try
            {
                __proxy->end_getUsersCountByTag(__p_res, __result);
            }
            catch(const ::Ice::Exception& ex)
            {
                Cpp11FnCallbackNC::exception(__result, ex);
                return;
            }
            if(_response != nullptr)
            {
                _response(__p_res);
            }
        }
    
    private:
        
        ::std::function<void (const ::TagAlias::bytes&)> _response;
    };
    return begin_getUsersCountByTag(__p_req, __ctx, new Cpp11CB(__response, __exception, __sent));
}
#endif

void
IceProxy::TagAlias::TagAliasOp::end_getUsersCountByTag(::TagAlias::bytes& __p_res, const ::Ice::AsyncResultPtr& __result)
{
    ::Ice::AsyncResult::__check(__result, this, __TagAlias__TagAliasOp__getUsersCountByTag_name);
    if(!__result->__wait())
    {
        try
        {
            __result->__throwUserException();
        }
        catch(const ::TagAlias::RequestCanceledException&)
        {
            throw;
        }
        catch(const ::Ice::UserException& __ex)
        {
            throw ::Ice::UnknownUserException(__FILE__, __LINE__, __ex.ice_name());
        }
    }
    ::IceInternal::BasicStream* __is = __result->__startReadParams();
    __is->read(__p_res);
    __result->__endReadParams();
}

void
IceProxy::TagAlias::TagAliasOp::getUsersCountByAlias(const ::TagAlias::bytes& __p_req, ::TagAlias::bytes& __p_res, const ::Ice::Context* __ctx)
{
    __checkTwowayOnly(__TagAlias__TagAliasOp__getUsersCountByAlias_name);
    ::IceInternal::Outgoing __og(this, __TagAlias__TagAliasOp__getUsersCountByAlias_name, ::Ice::Idempotent, __ctx);
    try
    {
        ::IceInternal::BasicStream* __os = __og.startWriteParams(::Ice::DefaultFormat);
        __os->write(__p_req);
        __og.endWriteParams();
    }
    catch(const ::Ice::LocalException& __ex)
    {
        __og.abort(__ex);
    }
    if(!__og.invoke())
    {
        try
        {
            __og.throwUserException();
        }
        catch(const ::TagAlias::RequestCanceledException&)
        {
            throw;
        }
        catch(const ::Ice::UserException& __ex)
        {
            ::Ice::UnknownUserException __uue(__FILE__, __LINE__, __ex.ice_name());
            throw __uue;
        }
    }
    ::IceInternal::BasicStream* __is = __og.startReadParams();
    __is->read(__p_res);
    __og.endReadParams();
}

::Ice::AsyncResultPtr
IceProxy::TagAlias::TagAliasOp::begin_getUsersCountByAlias(const ::TagAlias::bytes& __p_req, const ::Ice::Context* __ctx, const ::IceInternal::CallbackBasePtr& __del, const ::Ice::LocalObjectPtr& __cookie)
{
    __checkAsyncTwowayOnly(__TagAlias__TagAliasOp__getUsersCountByAlias_name);
    ::IceInternal::OutgoingAsyncPtr __result = new ::IceInternal::OutgoingAsync(this, __TagAlias__TagAliasOp__getUsersCountByAlias_name, __del, __cookie);
    try
    {
        __result->prepare(__TagAlias__TagAliasOp__getUsersCountByAlias_name, ::Ice::Idempotent, __ctx);
        ::IceInternal::BasicStream* __os = __result->startWriteParams(::Ice::DefaultFormat);
        __os->write(__p_req);
        __result->endWriteParams();
        __result->invoke();
    }
    catch(const ::Ice::Exception& __ex)
    {
        __result->abort(__ex);
    }
    return __result;
}

#ifdef ICE_CPP11

::Ice::AsyncResultPtr
IceProxy::TagAlias::TagAliasOp::__begin_getUsersCountByAlias(const ::TagAlias::bytes& __p_req, const ::Ice::Context* __ctx, const ::IceInternal::Function<void (const ::TagAlias::bytes&)>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception, const ::IceInternal::Function<void (bool)>& __sent)
{
    class Cpp11CB : public ::IceInternal::Cpp11FnCallbackNC
    {
    public:

        Cpp11CB(const ::std::function<void (const ::TagAlias::bytes&)>& responseFunc, const ::std::function<void (const ::Ice::Exception&)>& exceptionFunc, const ::std::function<void (bool)>& sentFunc) :
            ::IceInternal::Cpp11FnCallbackNC(exceptionFunc, sentFunc),
            _response(responseFunc)
        {
            CallbackBase::checkCallback(true, responseFunc || exceptionFunc != nullptr);
        }

        virtual void completed(const ::Ice::AsyncResultPtr& __result) const
        {
            ::TagAlias::TagAliasOpPrx __proxy = ::TagAlias::TagAliasOpPrx::uncheckedCast(__result->getProxy());
            ::TagAlias::bytes __p_res;
            try
            {
                __proxy->end_getUsersCountByAlias(__p_res, __result);
            }
            catch(const ::Ice::Exception& ex)
            {
                Cpp11FnCallbackNC::exception(__result, ex);
                return;
            }
            if(_response != nullptr)
            {
                _response(__p_res);
            }
        }
    
    private:
        
        ::std::function<void (const ::TagAlias::bytes&)> _response;
    };
    return begin_getUsersCountByAlias(__p_req, __ctx, new Cpp11CB(__response, __exception, __sent));
}
#endif

void
IceProxy::TagAlias::TagAliasOp::end_getUsersCountByAlias(::TagAlias::bytes& __p_res, const ::Ice::AsyncResultPtr& __result)
{
    ::Ice::AsyncResult::__check(__result, this, __TagAlias__TagAliasOp__getUsersCountByAlias_name);
    if(!__result->__wait())
    {
        try
        {
            __result->__throwUserException();
        }
        catch(const ::TagAlias::RequestCanceledException&)
        {
            throw;
        }
        catch(const ::Ice::UserException& __ex)
        {
            throw ::Ice::UnknownUserException(__FILE__, __LINE__, __ex.ice_name());
        }
    }
    ::IceInternal::BasicStream* __is = __result->__startReadParams();
    __is->read(__p_res);
    __result->__endReadParams();
}

void
IceProxy::TagAlias::TagAliasOp::validateTags(const ::TagAlias::bytes& __p_req, ::TagAlias::bytes& __p_res, const ::Ice::Context* __ctx)
{
    __checkTwowayOnly(__TagAlias__TagAliasOp__validateTags_name);
    ::IceInternal::Outgoing __og(this, __TagAlias__TagAliasOp__validateTags_name, ::Ice::Idempotent, __ctx);
    try
    {
        ::IceInternal::BasicStream* __os = __og.startWriteParams(::Ice::DefaultFormat);
        __os->write(__p_req);
        __og.endWriteParams();
    }
    catch(const ::Ice::LocalException& __ex)
    {
        __og.abort(__ex);
    }
    if(!__og.invoke())
    {
        try
        {
            __og.throwUserException();
        }
        catch(const ::TagAlias::RequestCanceledException&)
        {
            throw;
        }
        catch(const ::Ice::UserException& __ex)
        {
            ::Ice::UnknownUserException __uue(__FILE__, __LINE__, __ex.ice_name());
            throw __uue;
        }
    }
    ::IceInternal::BasicStream* __is = __og.startReadParams();
    __is->read(__p_res);
    __og.endReadParams();
}

::Ice::AsyncResultPtr
IceProxy::TagAlias::TagAliasOp::begin_validateTags(const ::TagAlias::bytes& __p_req, const ::Ice::Context* __ctx, const ::IceInternal::CallbackBasePtr& __del, const ::Ice::LocalObjectPtr& __cookie)
{
    __checkAsyncTwowayOnly(__TagAlias__TagAliasOp__validateTags_name);
    ::IceInternal::OutgoingAsyncPtr __result = new ::IceInternal::OutgoingAsync(this, __TagAlias__TagAliasOp__validateTags_name, __del, __cookie);
    try
    {
        __result->prepare(__TagAlias__TagAliasOp__validateTags_name, ::Ice::Idempotent, __ctx);
        ::IceInternal::BasicStream* __os = __result->startWriteParams(::Ice::DefaultFormat);
        __os->write(__p_req);
        __result->endWriteParams();
        __result->invoke();
    }
    catch(const ::Ice::Exception& __ex)
    {
        __result->abort(__ex);
    }
    return __result;
}

#ifdef ICE_CPP11

::Ice::AsyncResultPtr
IceProxy::TagAlias::TagAliasOp::__begin_validateTags(const ::TagAlias::bytes& __p_req, const ::Ice::Context* __ctx, const ::IceInternal::Function<void (const ::TagAlias::bytes&)>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception, const ::IceInternal::Function<void (bool)>& __sent)
{
    class Cpp11CB : public ::IceInternal::Cpp11FnCallbackNC
    {
    public:

        Cpp11CB(const ::std::function<void (const ::TagAlias::bytes&)>& responseFunc, const ::std::function<void (const ::Ice::Exception&)>& exceptionFunc, const ::std::function<void (bool)>& sentFunc) :
            ::IceInternal::Cpp11FnCallbackNC(exceptionFunc, sentFunc),
            _response(responseFunc)
        {
            CallbackBase::checkCallback(true, responseFunc || exceptionFunc != nullptr);
        }

        virtual void completed(const ::Ice::AsyncResultPtr& __result) const
        {
            ::TagAlias::TagAliasOpPrx __proxy = ::TagAlias::TagAliasOpPrx::uncheckedCast(__result->getProxy());
            ::TagAlias::bytes __p_res;
            try
            {
                __proxy->end_validateTags(__p_res, __result);
            }
            catch(const ::Ice::Exception& ex)
            {
                Cpp11FnCallbackNC::exception(__result, ex);
                return;
            }
            if(_response != nullptr)
            {
                _response(__p_res);
            }
        }
    
    private:
        
        ::std::function<void (const ::TagAlias::bytes&)> _response;
    };
    return begin_validateTags(__p_req, __ctx, new Cpp11CB(__response, __exception, __sent));
}
#endif

void
IceProxy::TagAlias::TagAliasOp::end_validateTags(::TagAlias::bytes& __p_res, const ::Ice::AsyncResultPtr& __result)
{
    ::Ice::AsyncResult::__check(__result, this, __TagAlias__TagAliasOp__validateTags_name);
    if(!__result->__wait())
    {
        try
        {
            __result->__throwUserException();
        }
        catch(const ::TagAlias::RequestCanceledException&)
        {
            throw;
        }
        catch(const ::Ice::UserException& __ex)
        {
            throw ::Ice::UnknownUserException(__FILE__, __LINE__, __ex.ice_name());
        }
    }
    ::IceInternal::BasicStream* __is = __result->__startReadParams();
    __is->read(__p_res);
    __result->__endReadParams();
}

void
IceProxy::TagAlias::TagAliasOp::validateAlias(const ::TagAlias::bytes& __p_req, ::TagAlias::bytes& __p_res, const ::Ice::Context* __ctx)
{
    __checkTwowayOnly(__TagAlias__TagAliasOp__validateAlias_name);
    ::IceInternal::Outgoing __og(this, __TagAlias__TagAliasOp__validateAlias_name, ::Ice::Idempotent, __ctx);
    try
    {
        ::IceInternal::BasicStream* __os = __og.startWriteParams(::Ice::DefaultFormat);
        __os->write(__p_req);
        __og.endWriteParams();
    }
    catch(const ::Ice::LocalException& __ex)
    {
        __og.abort(__ex);
    }
    if(!__og.invoke())
    {
        try
        {
            __og.throwUserException();
        }
        catch(const ::TagAlias::RequestCanceledException&)
        {
            throw;
        }
        catch(const ::Ice::UserException& __ex)
        {
            ::Ice::UnknownUserException __uue(__FILE__, __LINE__, __ex.ice_name());
            throw __uue;
        }
    }
    ::IceInternal::BasicStream* __is = __og.startReadParams();
    __is->read(__p_res);
    __og.endReadParams();
}

::Ice::AsyncResultPtr
IceProxy::TagAlias::TagAliasOp::begin_validateAlias(const ::TagAlias::bytes& __p_req, const ::Ice::Context* __ctx, const ::IceInternal::CallbackBasePtr& __del, const ::Ice::LocalObjectPtr& __cookie)
{
    __checkAsyncTwowayOnly(__TagAlias__TagAliasOp__validateAlias_name);
    ::IceInternal::OutgoingAsyncPtr __result = new ::IceInternal::OutgoingAsync(this, __TagAlias__TagAliasOp__validateAlias_name, __del, __cookie);
    try
    {
        __result->prepare(__TagAlias__TagAliasOp__validateAlias_name, ::Ice::Idempotent, __ctx);
        ::IceInternal::BasicStream* __os = __result->startWriteParams(::Ice::DefaultFormat);
        __os->write(__p_req);
        __result->endWriteParams();
        __result->invoke();
    }
    catch(const ::Ice::Exception& __ex)
    {
        __result->abort(__ex);
    }
    return __result;
}

#ifdef ICE_CPP11

::Ice::AsyncResultPtr
IceProxy::TagAlias::TagAliasOp::__begin_validateAlias(const ::TagAlias::bytes& __p_req, const ::Ice::Context* __ctx, const ::IceInternal::Function<void (const ::TagAlias::bytes&)>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception, const ::IceInternal::Function<void (bool)>& __sent)
{
    class Cpp11CB : public ::IceInternal::Cpp11FnCallbackNC
    {
    public:

        Cpp11CB(const ::std::function<void (const ::TagAlias::bytes&)>& responseFunc, const ::std::function<void (const ::Ice::Exception&)>& exceptionFunc, const ::std::function<void (bool)>& sentFunc) :
            ::IceInternal::Cpp11FnCallbackNC(exceptionFunc, sentFunc),
            _response(responseFunc)
        {
            CallbackBase::checkCallback(true, responseFunc || exceptionFunc != nullptr);
        }

        virtual void completed(const ::Ice::AsyncResultPtr& __result) const
        {
            ::TagAlias::TagAliasOpPrx __proxy = ::TagAlias::TagAliasOpPrx::uncheckedCast(__result->getProxy());
            ::TagAlias::bytes __p_res;
            try
            {
                __proxy->end_validateAlias(__p_res, __result);
            }
            catch(const ::Ice::Exception& ex)
            {
                Cpp11FnCallbackNC::exception(__result, ex);
                return;
            }
            if(_response != nullptr)
            {
                _response(__p_res);
            }
        }
    
    private:
        
        ::std::function<void (const ::TagAlias::bytes&)> _response;
    };
    return begin_validateAlias(__p_req, __ctx, new Cpp11CB(__response, __exception, __sent));
}
#endif

void
IceProxy::TagAlias::TagAliasOp::end_validateAlias(::TagAlias::bytes& __p_res, const ::Ice::AsyncResultPtr& __result)
{
    ::Ice::AsyncResult::__check(__result, this, __TagAlias__TagAliasOp__validateAlias_name);
    if(!__result->__wait())
    {
        try
        {
            __result->__throwUserException();
        }
        catch(const ::TagAlias::RequestCanceledException&)
        {
            throw;
        }
        catch(const ::Ice::UserException& __ex)
        {
            throw ::Ice::UnknownUserException(__FILE__, __LINE__, __ex.ice_name());
        }
    }
    ::IceInternal::BasicStream* __is = __result->__startReadParams();
    __is->read(__p_res);
    __result->__endReadParams();
}

void
IceProxy::TagAlias::TagAliasOp::shutdown(const ::Ice::Context* __ctx)
{
    ::IceInternal::Outgoing __og(this, __TagAlias__TagAliasOp__shutdown_name, ::Ice::Normal, __ctx);
    __og.writeEmptyParams();
    __invoke(__og);
}

::Ice::AsyncResultPtr
IceProxy::TagAlias::TagAliasOp::begin_shutdown(const ::Ice::Context* __ctx, const ::IceInternal::CallbackBasePtr& __del, const ::Ice::LocalObjectPtr& __cookie)
{
    ::IceInternal::OutgoingAsyncPtr __result = new ::IceInternal::OutgoingAsync(this, __TagAlias__TagAliasOp__shutdown_name, __del, __cookie);
    try
    {
        __result->prepare(__TagAlias__TagAliasOp__shutdown_name, ::Ice::Normal, __ctx);
        __result->writeEmptyParams();
        __result->invoke();
    }
    catch(const ::Ice::Exception& __ex)
    {
        __result->abort(__ex);
    }
    return __result;
}

void
IceProxy::TagAlias::TagAliasOp::end_shutdown(const ::Ice::AsyncResultPtr& __result)
{
    __end(__result, __TagAlias__TagAliasOp__shutdown_name);
}

const ::std::string&
IceProxy::TagAlias::TagAliasOp::ice_staticId()
{
    return ::TagAlias::TagAliasOp::ice_staticId();
}

::IceProxy::Ice::Object*
IceProxy::TagAlias::TagAliasOp::__newInstance() const
{
    return new TagAliasOp;
}
::IceProxy::Ice::Object* ::IceProxy::TagAlias::upCast(::IceProxy::TagAlias::TagAliasOpAdd* p) { return p; }

void
::IceProxy::TagAlias::__read(::IceInternal::BasicStream* __is, ::IceInternal::ProxyHandle< ::IceProxy::TagAlias::TagAliasOpAdd>& v)
{
    ::Ice::ObjectPrx proxy;
    __is->read(proxy);
    if(!proxy)
    {
        v = 0;
    }
    else
    {
        v = new ::IceProxy::TagAlias::TagAliasOpAdd;
        v->__copyFrom(proxy);
    }
}

void
IceProxy::TagAlias::TagAliasOpAdd::getTagsCountByUser(const ::TagAlias::bytes& __p_req, ::TagAlias::bytes& __p_res, const ::Ice::Context* __ctx)
{
    __checkTwowayOnly(__TagAlias__TagAliasOpAdd__getTagsCountByUser_name);
    ::IceInternal::Outgoing __og(this, __TagAlias__TagAliasOpAdd__getTagsCountByUser_name, ::Ice::Idempotent, __ctx);
    try
    {
        ::IceInternal::BasicStream* __os = __og.startWriteParams(::Ice::DefaultFormat);
        __os->write(__p_req);
        __og.endWriteParams();
    }
    catch(const ::Ice::LocalException& __ex)
    {
        __og.abort(__ex);
    }
    if(!__og.invoke())
    {
        try
        {
            __og.throwUserException();
        }
        catch(const ::TagAlias::RequestCanceledException&)
        {
            throw;
        }
        catch(const ::Ice::UserException& __ex)
        {
            ::Ice::UnknownUserException __uue(__FILE__, __LINE__, __ex.ice_name());
            throw __uue;
        }
    }
    ::IceInternal::BasicStream* __is = __og.startReadParams();
    __is->read(__p_res);
    __og.endReadParams();
}

::Ice::AsyncResultPtr
IceProxy::TagAlias::TagAliasOpAdd::begin_getTagsCountByUser(const ::TagAlias::bytes& __p_req, const ::Ice::Context* __ctx, const ::IceInternal::CallbackBasePtr& __del, const ::Ice::LocalObjectPtr& __cookie)
{
    __checkAsyncTwowayOnly(__TagAlias__TagAliasOpAdd__getTagsCountByUser_name);
    ::IceInternal::OutgoingAsyncPtr __result = new ::IceInternal::OutgoingAsync(this, __TagAlias__TagAliasOpAdd__getTagsCountByUser_name, __del, __cookie);
    try
    {
        __result->prepare(__TagAlias__TagAliasOpAdd__getTagsCountByUser_name, ::Ice::Idempotent, __ctx);
        ::IceInternal::BasicStream* __os = __result->startWriteParams(::Ice::DefaultFormat);
        __os->write(__p_req);
        __result->endWriteParams();
        __result->invoke();
    }
    catch(const ::Ice::Exception& __ex)
    {
        __result->abort(__ex);
    }
    return __result;
}

#ifdef ICE_CPP11

::Ice::AsyncResultPtr
IceProxy::TagAlias::TagAliasOpAdd::__begin_getTagsCountByUser(const ::TagAlias::bytes& __p_req, const ::Ice::Context* __ctx, const ::IceInternal::Function<void (const ::TagAlias::bytes&)>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception, const ::IceInternal::Function<void (bool)>& __sent)
{
    class Cpp11CB : public ::IceInternal::Cpp11FnCallbackNC
    {
    public:

        Cpp11CB(const ::std::function<void (const ::TagAlias::bytes&)>& responseFunc, const ::std::function<void (const ::Ice::Exception&)>& exceptionFunc, const ::std::function<void (bool)>& sentFunc) :
            ::IceInternal::Cpp11FnCallbackNC(exceptionFunc, sentFunc),
            _response(responseFunc)
        {
            CallbackBase::checkCallback(true, responseFunc || exceptionFunc != nullptr);
        }

        virtual void completed(const ::Ice::AsyncResultPtr& __result) const
        {
            ::TagAlias::TagAliasOpAddPrx __proxy = ::TagAlias::TagAliasOpAddPrx::uncheckedCast(__result->getProxy());
            ::TagAlias::bytes __p_res;
            try
            {
                __proxy->end_getTagsCountByUser(__p_res, __result);
            }
            catch(const ::Ice::Exception& ex)
            {
                Cpp11FnCallbackNC::exception(__result, ex);
                return;
            }
            if(_response != nullptr)
            {
                _response(__p_res);
            }
        }
    
    private:
        
        ::std::function<void (const ::TagAlias::bytes&)> _response;
    };
    return begin_getTagsCountByUser(__p_req, __ctx, new Cpp11CB(__response, __exception, __sent));
}
#endif

void
IceProxy::TagAlias::TagAliasOpAdd::end_getTagsCountByUser(::TagAlias::bytes& __p_res, const ::Ice::AsyncResultPtr& __result)
{
    ::Ice::AsyncResult::__check(__result, this, __TagAlias__TagAliasOpAdd__getTagsCountByUser_name);
    if(!__result->__wait())
    {
        try
        {
            __result->__throwUserException();
        }
        catch(const ::TagAlias::RequestCanceledException&)
        {
            throw;
        }
        catch(const ::Ice::UserException& __ex)
        {
            throw ::Ice::UnknownUserException(__FILE__, __LINE__, __ex.ice_name());
        }
    }
    ::IceInternal::BasicStream* __is = __result->__startReadParams();
    __is->read(__p_res);
    __result->__endReadParams();
}

const ::std::string&
IceProxy::TagAlias::TagAliasOpAdd::ice_staticId()
{
    return ::TagAlias::TagAliasOpAdd::ice_staticId();
}

::IceProxy::Ice::Object*
IceProxy::TagAlias::TagAliasOpAdd::__newInstance() const
{
    return new TagAliasOpAdd;
}

::Ice::Object* TagAlias::upCast(::TagAlias::TagAliasOp* p) { return p; }

namespace
{
const ::std::string __TagAlias__TagAliasOp_ids[2] =
{
    "::Ice::Object",
    "::TagAlias::TagAliasOp"
};

}

bool
TagAlias::TagAliasOp::ice_isA(const ::std::string& _s, const ::Ice::Current&) const
{
    return ::std::binary_search(__TagAlias__TagAliasOp_ids, __TagAlias__TagAliasOp_ids + 2, _s);
}

::std::vector< ::std::string>
TagAlias::TagAliasOp::ice_ids(const ::Ice::Current&) const
{
    return ::std::vector< ::std::string>(&__TagAlias__TagAliasOp_ids[0], &__TagAlias__TagAliasOp_ids[2]);
}

const ::std::string&
TagAlias::TagAliasOp::ice_id(const ::Ice::Current&) const
{
    return __TagAlias__TagAliasOp_ids[1];
}

const ::std::string&
TagAlias::TagAliasOp::ice_staticId()
{
#ifdef ICE_HAS_THREAD_SAFE_LOCAL_STATIC
    static const ::std::string typeId = "::TagAlias::TagAliasOp";
    return typeId;
#else
    return __TagAlias__TagAliasOp_ids[1];
#endif
}

::Ice::DispatchStatus
TagAlias::TagAliasOp::___request(::IceInternal::Incoming& __inS, const ::Ice::Current& __current)
{
    __checkMode(::Ice::Normal, __current.mode);
    ::IceInternal::BasicStream* __is = __inS.startReadParams();
    ::std::string __p_req;
    __is->read(__p_req);
    __inS.endReadParams();
    ::TagAlias::AMD_TagAliasOp_requestPtr __cb = new IceAsync::TagAlias::AMD_TagAliasOp_request(__inS);
    try
    {
        request_async(__cb, __p_req, __current);
    }
    catch(const ::std::exception& __ex)
    {
        __cb->ice_exception(__ex);
    }
    catch(...)
    {
        __cb->ice_exception();
    }
    return ::Ice::DispatchAsync;
}

::Ice::DispatchStatus
TagAlias::TagAliasOp::___request_next(::IceInternal::Incoming& __inS, const ::Ice::Current& __current)
{
    __checkMode(::Ice::Normal, __current.mode);
    ::IceInternal::BasicStream* __is = __inS.startReadParams();
    ::std::string __p_req;
    __is->read(__p_req);
    __inS.endReadParams();
    ::TagAlias::AMD_TagAliasOp_request_nextPtr __cb = new IceAsync::TagAlias::AMD_TagAliasOp_request_next(__inS);
    try
    {
        request_next_async(__cb, __p_req, __current);
    }
    catch(const ::std::exception& __ex)
    {
        __cb->ice_exception(__ex);
    }
    catch(...)
    {
        __cb->ice_exception();
    }
    return ::Ice::DispatchAsync;
}

::Ice::DispatchStatus
TagAlias::TagAliasOp::___getTaglist(::IceInternal::Incoming& __inS, const ::Ice::Current& __current)
{
    __checkMode(::Ice::Idempotent, __current.mode);
    ::IceInternal::BasicStream* __is = __inS.startReadParams();
    ::TagAlias::bytes __p_req;
    __is->read(__p_req);
    __inS.endReadParams();
    ::TagAlias::AMD_TagAliasOp_getTaglistPtr __cb = new IceAsync::TagAlias::AMD_TagAliasOp_getTaglist(__inS);
    try
    {
        getTaglist_async(__cb, __p_req, __current);
    }
    catch(const ::std::exception& __ex)
    {
        __cb->ice_exception(__ex);
    }
    catch(...)
    {
        __cb->ice_exception();
    }
    return ::Ice::DispatchAsync;
}

::Ice::DispatchStatus
TagAlias::TagAliasOp::___getUsersByTag(::IceInternal::Incoming& __inS, const ::Ice::Current& __current)
{
    __checkMode(::Ice::Idempotent, __current.mode);
    ::IceInternal::BasicStream* __is = __inS.startReadParams();
    ::TagAlias::bytes __p_req;
    __is->read(__p_req);
    __inS.endReadParams();
    ::TagAlias::AMD_TagAliasOp_getUsersByTagPtr __cb = new IceAsync::TagAlias::AMD_TagAliasOp_getUsersByTag(__inS);
    try
    {
        getUsersByTag_async(__cb, __p_req, __current);
    }
    catch(const ::std::exception& __ex)
    {
        __cb->ice_exception(__ex);
    }
    catch(...)
    {
        __cb->ice_exception();
    }
    return ::Ice::DispatchAsync;
}

::Ice::DispatchStatus
TagAlias::TagAliasOp::___getUsersByAlias(::IceInternal::Incoming& __inS, const ::Ice::Current& __current)
{
    __checkMode(::Ice::Idempotent, __current.mode);
    ::IceInternal::BasicStream* __is = __inS.startReadParams();
    ::TagAlias::bytes __p_req;
    __is->read(__p_req);
    __inS.endReadParams();
    ::TagAlias::AMD_TagAliasOp_getUsersByAliasPtr __cb = new IceAsync::TagAlias::AMD_TagAliasOp_getUsersByAlias(__inS);
    try
    {
        getUsersByAlias_async(__cb, __p_req, __current);
    }
    catch(const ::std::exception& __ex)
    {
        __cb->ice_exception(__ex);
    }
    catch(...)
    {
        __cb->ice_exception();
    }
    return ::Ice::DispatchAsync;
}

::Ice::DispatchStatus
TagAlias::TagAliasOp::___getTagsByUser(::IceInternal::Incoming& __inS, const ::Ice::Current& __current)
{
    __checkMode(::Ice::Idempotent, __current.mode);
    ::IceInternal::BasicStream* __is = __inS.startReadParams();
    ::TagAlias::bytes __p_req;
    __is->read(__p_req);
    __inS.endReadParams();
    ::TagAlias::AMD_TagAliasOp_getTagsByUserPtr __cb = new IceAsync::TagAlias::AMD_TagAliasOp_getTagsByUser(__inS);
    try
    {
        getTagsByUser_async(__cb, __p_req, __current);
    }
    catch(const ::std::exception& __ex)
    {
        __cb->ice_exception(__ex);
    }
    catch(...)
    {
        __cb->ice_exception();
    }
    return ::Ice::DispatchAsync;
}

::Ice::DispatchStatus
TagAlias::TagAliasOp::___getAliasByUser(::IceInternal::Incoming& __inS, const ::Ice::Current& __current)
{
    __checkMode(::Ice::Idempotent, __current.mode);
    ::IceInternal::BasicStream* __is = __inS.startReadParams();
    ::TagAlias::bytes __p_req;
    __is->read(__p_req);
    __inS.endReadParams();
    ::TagAlias::AMD_TagAliasOp_getAliasByUserPtr __cb = new IceAsync::TagAlias::AMD_TagAliasOp_getAliasByUser(__inS);
    try
    {
        getAliasByUser_async(__cb, __p_req, __current);
    }
    catch(const ::std::exception& __ex)
    {
        __cb->ice_exception(__ex);
    }
    catch(...)
    {
        __cb->ice_exception();
    }
    return ::Ice::DispatchAsync;
}

::Ice::DispatchStatus
TagAlias::TagAliasOp::___checkUserBelongTag(::IceInternal::Incoming& __inS, const ::Ice::Current& __current)
{
    __checkMode(::Ice::Idempotent, __current.mode);
    ::IceInternal::BasicStream* __is = __inS.startReadParams();
    ::TagAlias::bytes __p_req;
    __is->read(__p_req);
    __inS.endReadParams();
    ::TagAlias::AMD_TagAliasOp_checkUserBelongTagPtr __cb = new IceAsync::TagAlias::AMD_TagAliasOp_checkUserBelongTag(__inS);
    try
    {
        checkUserBelongTag_async(__cb, __p_req, __current);
    }
    catch(const ::std::exception& __ex)
    {
        __cb->ice_exception(__ex);
    }
    catch(...)
    {
        __cb->ice_exception();
    }
    return ::Ice::DispatchAsync;
}

::Ice::DispatchStatus
TagAlias::TagAliasOp::___checkUserBelongAlias(::IceInternal::Incoming& __inS, const ::Ice::Current& __current)
{
    __checkMode(::Ice::Idempotent, __current.mode);
    ::IceInternal::BasicStream* __is = __inS.startReadParams();
    ::TagAlias::bytes __p_req;
    __is->read(__p_req);
    __inS.endReadParams();
    ::TagAlias::AMD_TagAliasOp_checkUserBelongAliasPtr __cb = new IceAsync::TagAlias::AMD_TagAliasOp_checkUserBelongAlias(__inS);
    try
    {
        checkUserBelongAlias_async(__cb, __p_req, __current);
    }
    catch(const ::std::exception& __ex)
    {
        __cb->ice_exception(__ex);
    }
    catch(...)
    {
        __cb->ice_exception();
    }
    return ::Ice::DispatchAsync;
}

::Ice::DispatchStatus
TagAlias::TagAliasOp::___getUsersCountByTag(::IceInternal::Incoming& __inS, const ::Ice::Current& __current)
{
    __checkMode(::Ice::Idempotent, __current.mode);
    ::IceInternal::BasicStream* __is = __inS.startReadParams();
    ::TagAlias::bytes __p_req;
    __is->read(__p_req);
    __inS.endReadParams();
    ::TagAlias::AMD_TagAliasOp_getUsersCountByTagPtr __cb = new IceAsync::TagAlias::AMD_TagAliasOp_getUsersCountByTag(__inS);
    try
    {
        getUsersCountByTag_async(__cb, __p_req, __current);
    }
    catch(const ::std::exception& __ex)
    {
        __cb->ice_exception(__ex);
    }
    catch(...)
    {
        __cb->ice_exception();
    }
    return ::Ice::DispatchAsync;
}

::Ice::DispatchStatus
TagAlias::TagAliasOp::___getUsersCountByAlias(::IceInternal::Incoming& __inS, const ::Ice::Current& __current)
{
    __checkMode(::Ice::Idempotent, __current.mode);
    ::IceInternal::BasicStream* __is = __inS.startReadParams();
    ::TagAlias::bytes __p_req;
    __is->read(__p_req);
    __inS.endReadParams();
    ::TagAlias::AMD_TagAliasOp_getUsersCountByAliasPtr __cb = new IceAsync::TagAlias::AMD_TagAliasOp_getUsersCountByAlias(__inS);
    try
    {
        getUsersCountByAlias_async(__cb, __p_req, __current);
    }
    catch(const ::std::exception& __ex)
    {
        __cb->ice_exception(__ex);
    }
    catch(...)
    {
        __cb->ice_exception();
    }
    return ::Ice::DispatchAsync;
}

::Ice::DispatchStatus
TagAlias::TagAliasOp::___validateTags(::IceInternal::Incoming& __inS, const ::Ice::Current& __current)
{
    __checkMode(::Ice::Idempotent, __current.mode);
    ::IceInternal::BasicStream* __is = __inS.startReadParams();
    ::TagAlias::bytes __p_req;
    __is->read(__p_req);
    __inS.endReadParams();
    ::TagAlias::AMD_TagAliasOp_validateTagsPtr __cb = new IceAsync::TagAlias::AMD_TagAliasOp_validateTags(__inS);
    try
    {
        validateTags_async(__cb, __p_req, __current);
    }
    catch(const ::std::exception& __ex)
    {
        __cb->ice_exception(__ex);
    }
    catch(...)
    {
        __cb->ice_exception();
    }
    return ::Ice::DispatchAsync;
}

::Ice::DispatchStatus
TagAlias::TagAliasOp::___validateAlias(::IceInternal::Incoming& __inS, const ::Ice::Current& __current)
{
    __checkMode(::Ice::Idempotent, __current.mode);
    ::IceInternal::BasicStream* __is = __inS.startReadParams();
    ::TagAlias::bytes __p_req;
    __is->read(__p_req);
    __inS.endReadParams();
    ::TagAlias::AMD_TagAliasOp_validateAliasPtr __cb = new IceAsync::TagAlias::AMD_TagAliasOp_validateAlias(__inS);
    try
    {
        validateAlias_async(__cb, __p_req, __current);
    }
    catch(const ::std::exception& __ex)
    {
        __cb->ice_exception(__ex);
    }
    catch(...)
    {
        __cb->ice_exception();
    }
    return ::Ice::DispatchAsync;
}

::Ice::DispatchStatus
TagAlias::TagAliasOp::___shutdown(::IceInternal::Incoming& __inS, const ::Ice::Current& __current)
{
    __checkMode(::Ice::Normal, __current.mode);
    __inS.readEmptyParams();
    shutdown(__current);
    __inS.__writeEmptyParams();
    return ::Ice::DispatchOK;
}

namespace
{
const ::std::string __TagAlias__TagAliasOp_all[] =
{
    "checkUserBelongAlias",
    "checkUserBelongTag",
    "getAliasByUser",
    "getTaglist",
    "getTagsByUser",
    "getUsersByAlias",
    "getUsersByTag",
    "getUsersCountByAlias",
    "getUsersCountByTag",
    "ice_id",
    "ice_ids",
    "ice_isA",
    "ice_ping",
    "request",
    "request_next",
    "shutdown",
    "validateAlias",
    "validateTags"
};

}

::Ice::DispatchStatus
TagAlias::TagAliasOp::__dispatch(::IceInternal::Incoming& in, const ::Ice::Current& current)
{
    ::std::pair< const ::std::string*, const ::std::string*> r = ::std::equal_range(__TagAlias__TagAliasOp_all, __TagAlias__TagAliasOp_all + 18, current.operation);
    if(r.first == r.second)
    {
        throw ::Ice::OperationNotExistException(__FILE__, __LINE__, current.id, current.facet, current.operation);
    }

    switch(r.first - __TagAlias__TagAliasOp_all)
    {
        case 0:
        {
            return ___checkUserBelongAlias(in, current);
        }
        case 1:
        {
            return ___checkUserBelongTag(in, current);
        }
        case 2:
        {
            return ___getAliasByUser(in, current);
        }
        case 3:
        {
            return ___getTaglist(in, current);
        }
        case 4:
        {
            return ___getTagsByUser(in, current);
        }
        case 5:
        {
            return ___getUsersByAlias(in, current);
        }
        case 6:
        {
            return ___getUsersByTag(in, current);
        }
        case 7:
        {
            return ___getUsersCountByAlias(in, current);
        }
        case 8:
        {
            return ___getUsersCountByTag(in, current);
        }
        case 9:
        {
            return ___ice_id(in, current);
        }
        case 10:
        {
            return ___ice_ids(in, current);
        }
        case 11:
        {
            return ___ice_isA(in, current);
        }
        case 12:
        {
            return ___ice_ping(in, current);
        }
        case 13:
        {
            return ___request(in, current);
        }
        case 14:
        {
            return ___request_next(in, current);
        }
        case 15:
        {
            return ___shutdown(in, current);
        }
        case 16:
        {
            return ___validateAlias(in, current);
        }
        case 17:
        {
            return ___validateTags(in, current);
        }
    }

    assert(false);
    throw ::Ice::OperationNotExistException(__FILE__, __LINE__, current.id, current.facet, current.operation);
}

void
TagAlias::TagAliasOp::__writeImpl(::IceInternal::BasicStream* __os) const
{
    __os->startWriteSlice(ice_staticId(), -1, true);
    __os->endWriteSlice();
}

void
TagAlias::TagAliasOp::__readImpl(::IceInternal::BasicStream* __is)
{
    __is->startReadSlice();
    __is->endReadSlice();
}

void 
TagAlias::__patch(TagAliasOpPtr& handle, const ::Ice::ObjectPtr& v)
{
    handle = ::TagAlias::TagAliasOpPtr::dynamicCast(v);
    if(v && !handle)
    {
        IceInternal::Ex::throwUOE(::TagAlias::TagAliasOp::ice_staticId(), v);
    }
}

::Ice::Object* TagAlias::upCast(::TagAlias::TagAliasOpAdd* p) { return p; }

namespace
{
const ::std::string __TagAlias__TagAliasOpAdd_ids[3] =
{
    "::Ice::Object",
    "::TagAlias::TagAliasOp",
    "::TagAlias::TagAliasOpAdd"
};

}

bool
TagAlias::TagAliasOpAdd::ice_isA(const ::std::string& _s, const ::Ice::Current&) const
{
    return ::std::binary_search(__TagAlias__TagAliasOpAdd_ids, __TagAlias__TagAliasOpAdd_ids + 3, _s);
}

::std::vector< ::std::string>
TagAlias::TagAliasOpAdd::ice_ids(const ::Ice::Current&) const
{
    return ::std::vector< ::std::string>(&__TagAlias__TagAliasOpAdd_ids[0], &__TagAlias__TagAliasOpAdd_ids[3]);
}

const ::std::string&
TagAlias::TagAliasOpAdd::ice_id(const ::Ice::Current&) const
{
    return __TagAlias__TagAliasOpAdd_ids[2];
}

const ::std::string&
TagAlias::TagAliasOpAdd::ice_staticId()
{
#ifdef ICE_HAS_THREAD_SAFE_LOCAL_STATIC
    static const ::std::string typeId = "::TagAlias::TagAliasOpAdd";
    return typeId;
#else
    return __TagAlias__TagAliasOpAdd_ids[2];
#endif
}

::Ice::DispatchStatus
TagAlias::TagAliasOpAdd::___getTagsCountByUser(::IceInternal::Incoming& __inS, const ::Ice::Current& __current)
{
    __checkMode(::Ice::Idempotent, __current.mode);
    ::IceInternal::BasicStream* __is = __inS.startReadParams();
    ::TagAlias::bytes __p_req;
    __is->read(__p_req);
    __inS.endReadParams();
    ::TagAlias::AMD_TagAliasOpAdd_getTagsCountByUserPtr __cb = new IceAsync::TagAlias::AMD_TagAliasOpAdd_getTagsCountByUser(__inS);
    try
    {
        getTagsCountByUser_async(__cb, __p_req, __current);
    }
    catch(const ::std::exception& __ex)
    {
        __cb->ice_exception(__ex);
    }
    catch(...)
    {
        __cb->ice_exception();
    }
    return ::Ice::DispatchAsync;
}

namespace
{
const ::std::string __TagAlias__TagAliasOpAdd_all[] =
{
    "checkUserBelongAlias",
    "checkUserBelongTag",
    "getAliasByUser",
    "getTaglist",
    "getTagsByUser",
    "getTagsCountByUser",
    "getUsersByAlias",
    "getUsersByTag",
    "getUsersCountByAlias",
    "getUsersCountByTag",
    "ice_id",
    "ice_ids",
    "ice_isA",
    "ice_ping",
    "request",
    "request_next",
    "shutdown",
    "validateAlias",
    "validateTags"
};

}

::Ice::DispatchStatus
TagAlias::TagAliasOpAdd::__dispatch(::IceInternal::Incoming& in, const ::Ice::Current& current)
{
    ::std::pair< const ::std::string*, const ::std::string*> r = ::std::equal_range(__TagAlias__TagAliasOpAdd_all, __TagAlias__TagAliasOpAdd_all + 19, current.operation);
    if(r.first == r.second)
    {
        throw ::Ice::OperationNotExistException(__FILE__, __LINE__, current.id, current.facet, current.operation);
    }

    switch(r.first - __TagAlias__TagAliasOpAdd_all)
    {
        case 0:
        {
            return ___checkUserBelongAlias(in, current);
        }
        case 1:
        {
            return ___checkUserBelongTag(in, current);
        }
        case 2:
        {
            return ___getAliasByUser(in, current);
        }
        case 3:
        {
            return ___getTaglist(in, current);
        }
        case 4:
        {
            return ___getTagsByUser(in, current);
        }
        case 5:
        {
            return ___getTagsCountByUser(in, current);
        }
        case 6:
        {
            return ___getUsersByAlias(in, current);
        }
        case 7:
        {
            return ___getUsersByTag(in, current);
        }
        case 8:
        {
            return ___getUsersCountByAlias(in, current);
        }
        case 9:
        {
            return ___getUsersCountByTag(in, current);
        }
        case 10:
        {
            return ___ice_id(in, current);
        }
        case 11:
        {
            return ___ice_ids(in, current);
        }
        case 12:
        {
            return ___ice_isA(in, current);
        }
        case 13:
        {
            return ___ice_ping(in, current);
        }
        case 14:
        {
            return ___request(in, current);
        }
        case 15:
        {
            return ___request_next(in, current);
        }
        case 16:
        {
            return ___shutdown(in, current);
        }
        case 17:
        {
            return ___validateAlias(in, current);
        }
        case 18:
        {
            return ___validateTags(in, current);
        }
    }

    assert(false);
    throw ::Ice::OperationNotExistException(__FILE__, __LINE__, current.id, current.facet, current.operation);
}

void
TagAlias::TagAliasOpAdd::__writeImpl(::IceInternal::BasicStream* __os) const
{
    __os->startWriteSlice(ice_staticId(), -1, true);
    __os->endWriteSlice();
}

void
TagAlias::TagAliasOpAdd::__readImpl(::IceInternal::BasicStream* __is)
{
    __is->startReadSlice();
    __is->endReadSlice();
}

void 
TagAlias::__patch(TagAliasOpAddPtr& handle, const ::Ice::ObjectPtr& v)
{
    handle = ::TagAlias::TagAliasOpAddPtr::dynamicCast(v);
    if(v && !handle)
    {
        IceInternal::Ex::throwUOE(::TagAlias::TagAliasOpAdd::ice_staticId(), v);
    }
}
