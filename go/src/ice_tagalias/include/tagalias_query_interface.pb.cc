// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: tagalias_query_interface.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "tagalias_query_interface.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace TagAliasBatchQuery {

namespace {

const ::google::protobuf::Descriptor* OpsUnit_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  OpsUnit_reflection_ = NULL;
const ::google::protobuf::Descriptor* TagAliasQuery_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  TagAliasQuery_reflection_ = NULL;
const ::google::protobuf::Descriptor* TagAliasQueryII_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  TagAliasQueryII_reflection_ = NULL;
const ::google::protobuf::Descriptor* TagAlsResult_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  TagAlsResult_reflection_ = NULL;
const ::google::protobuf::Descriptor* TagAlsResp_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  TagAlsResp_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_tagalias_5fquery_5finterface_2eproto() {
  protobuf_AddDesc_tagalias_5fquery_5finterface_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "tagalias_query_interface.proto");
  GOOGLE_CHECK(file != NULL);
  OpsUnit_descriptor_ = file->message_type(0);
  static const int OpsUnit_offsets_[8] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OpsUnit, cmd_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OpsUnit, page_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OpsUnit, uid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OpsUnit, tags_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OpsUnit, alias_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OpsUnit, queryk_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OpsUnit, dev_type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OpsUnit, total_),
  };
  OpsUnit_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      OpsUnit_descriptor_,
      OpsUnit::default_instance_,
      OpsUnit_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OpsUnit, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OpsUnit, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(OpsUnit));
  TagAliasQuery_descriptor_ = file->message_type(1);
  static const int TagAliasQuery_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TagAliasQuery, reqno_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TagAliasQuery, appkey_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TagAliasQuery, platform_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TagAliasQuery, query_),
  };
  TagAliasQuery_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      TagAliasQuery_descriptor_,
      TagAliasQuery::default_instance_,
      TagAliasQuery_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TagAliasQuery, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TagAliasQuery, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(TagAliasQuery));
  TagAliasQueryII_descriptor_ = file->message_type(2);
  static const int TagAliasQueryII_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TagAliasQueryII, reqno_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TagAliasQueryII, total_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TagAliasQueryII, page_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TagAliasQueryII, cmd_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TagAliasQueryII, queryk_),
  };
  TagAliasQueryII_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      TagAliasQueryII_descriptor_,
      TagAliasQueryII::default_instance_,
      TagAliasQueryII_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TagAliasQueryII, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TagAliasQueryII, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(TagAliasQueryII));
  TagAlsResult_descriptor_ = file->message_type(3);
  static const int TagAlsResult_offsets_[13] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TagAlsResult, req_type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TagAlsResult, code_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TagAlsResult, msg_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TagAlsResult, total_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TagAlsResult, cur_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TagAlsResult, expired_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TagAlsResult, queryk_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TagAlsResult, uid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TagAlsResult, ouid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TagAlsResult, uid_count_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TagAlsResult, tags_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TagAlsResult, alias_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TagAlsResult, dev_type_),
  };
  TagAlsResult_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      TagAlsResult_descriptor_,
      TagAlsResult::default_instance_,
      TagAlsResult_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TagAlsResult, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TagAlsResult, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(TagAlsResult));
  TagAlsResp_descriptor_ = file->message_type(4);
  static const int TagAlsResp_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TagAlsResp, reqno_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TagAlsResp, code_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TagAlsResp, appkey_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TagAlsResp, platform_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TagAlsResp, result_),
  };
  TagAlsResp_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      TagAlsResp_descriptor_,
      TagAlsResp::default_instance_,
      TagAlsResp_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TagAlsResp, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TagAlsResp, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(TagAlsResp));
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_tagalias_5fquery_5finterface_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    OpsUnit_descriptor_, &OpsUnit::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    TagAliasQuery_descriptor_, &TagAliasQuery::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    TagAliasQueryII_descriptor_, &TagAliasQueryII::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    TagAlsResult_descriptor_, &TagAlsResult::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    TagAlsResp_descriptor_, &TagAlsResp::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_tagalias_5fquery_5finterface_2eproto() {
  delete OpsUnit::default_instance_;
  delete OpsUnit_reflection_;
  delete TagAliasQuery::default_instance_;
  delete TagAliasQuery_reflection_;
  delete TagAliasQueryII::default_instance_;
  delete TagAliasQueryII_reflection_;
  delete TagAlsResult::default_instance_;
  delete TagAlsResult_reflection_;
  delete TagAlsResult::_default_msg_;
  delete TagAlsResp::default_instance_;
  delete TagAlsResp_reflection_;
}

void protobuf_AddDesc_tagalias_5fquery_5finterface_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::protobuf_AddDesc_tagalias_5fcommon_2eproto();
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\036tagalias_query_interface.proto\022\022TagAli"
    "asBatchQuery\032\025tagalias_common.proto\"\253\001\n\007"
    "OpsUnit\022\032\n\003cmd\030\001 \001(\0162\r.QUERY_ACTION\022\017\n\004p"
    "age\030\002 \001(\005:\0011\022\013\n\003uid\030\003 \003(\003\022\014\n\004tags\030\004 \003(\014\022"
    "\r\n\005alias\030\005 \003(\014\022\016\n\006queryk\030\006 \001(\014\022*\n\010dev_ty"
    "pe\030\007 \001(\0162\013.DEVSUBTYPE:\013NORMAL_TYPE\022\r\n\005to"
    "tal\030\010 \003(\005\"z\n\rTagAliasQuery\022\020\n\005reqNo\030\001 \001("
    "\003:\0010\022\016\n\006appkey\030\002 \001(\014\022\033\n\010platform\030\003 \001(\0162\t"
    ".PLATFORM\022*\n\005query\030\004 \003(\0132\033.TagAliasBatch"
    "Query.OpsUnit\"i\n\017TagAliasQueryII\022\r\n\005reqN"
    "o\030\001 \001(\003\022\r\n\005total\030\002 \001(\005\022\014\n\004page\030\003 \001(\005\022\032\n\003"
    "cmd\030\004 \001(\0162\r.QUERY_ACTION\022\016\n\006queryK\030\005 \001(\014"
    "\"\237\002\n\014TagAlsResult\022\037\n\010req_type\030\001 \001(\0162\r.QU"
    "ERY_ACTION\022\036\n\004code\030\002 \001(\0162\007.STATUS:\007SUCCE"
    "SS\022\024\n\003msg\030\003 \001(\014:\007SUCCESS\022\020\n\005total\030\004 \001(\005:"
    "\0011\022\016\n\003cur\030\005 \001(\005:\0011\022\017\n\007expired\030\006 \001(\r\022\016\n\006q"
    "ueryK\030\007 \001(\014\022\013\n\003uid\030\010 \003(\003\022\014\n\004ouid\030\t \003(\003\022\021"
    "\n\tuid_count\030\n \001(\005\022\014\n\004tags\030\013 \003(\014\022\r\n\005alias"
    "\030\014 \003(\014\022*\n\010dev_type\030\r \001(\0162\013.DEVSUBTYPE:\013N"
    "ORMAL_TYPE\"\210\001\n\nTagAlsResp\022\r\n\005reqNo\030\001 \001(\003"
    "\022\014\n\004code\030\002 \001(\005\022\016\n\006appkey\030\003 \001(\014\022\033\n\010platfo"
    "rm\030\004 \001(\0162\t.PLATFORM\0220\n\006result\030\005 \003(\0132 .Ta"
    "gAliasBatchQuery.TagAlsResult", 909);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "tagalias_query_interface.proto", &protobuf_RegisterTypes);
  OpsUnit::default_instance_ = new OpsUnit();
  TagAliasQuery::default_instance_ = new TagAliasQuery();
  TagAliasQueryII::default_instance_ = new TagAliasQueryII();
  TagAlsResult::_default_msg_ =
      new ::std::string("SUCCESS", 7);
  TagAlsResult::default_instance_ = new TagAlsResult();
  TagAlsResp::default_instance_ = new TagAlsResp();
  OpsUnit::default_instance_->InitAsDefaultInstance();
  TagAliasQuery::default_instance_->InitAsDefaultInstance();
  TagAliasQueryII::default_instance_->InitAsDefaultInstance();
  TagAlsResult::default_instance_->InitAsDefaultInstance();
  TagAlsResp::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_tagalias_5fquery_5finterface_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_tagalias_5fquery_5finterface_2eproto {
  StaticDescriptorInitializer_tagalias_5fquery_5finterface_2eproto() {
    protobuf_AddDesc_tagalias_5fquery_5finterface_2eproto();
  }
} static_descriptor_initializer_tagalias_5fquery_5finterface_2eproto_;

// ===================================================================

#ifndef _MSC_VER
const int OpsUnit::kCmdFieldNumber;
const int OpsUnit::kPageFieldNumber;
const int OpsUnit::kUidFieldNumber;
const int OpsUnit::kTagsFieldNumber;
const int OpsUnit::kAliasFieldNumber;
const int OpsUnit::kQuerykFieldNumber;
const int OpsUnit::kDevTypeFieldNumber;
const int OpsUnit::kTotalFieldNumber;
#endif  // !_MSC_VER

OpsUnit::OpsUnit()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void OpsUnit::InitAsDefaultInstance() {
}

OpsUnit::OpsUnit(const OpsUnit& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void OpsUnit::SharedCtor() {
  _cached_size_ = 0;
  cmd_ = 1;
  page_ = 1;
  queryk_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  dev_type_ = 1;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

OpsUnit::~OpsUnit() {
  SharedDtor();
}

void OpsUnit::SharedDtor() {
  if (queryk_ != &::google::protobuf::internal::kEmptyString) {
    delete queryk_;
  }
  if (this != default_instance_) {
  }
}

void OpsUnit::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* OpsUnit::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return OpsUnit_descriptor_;
}

const OpsUnit& OpsUnit::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_tagalias_5fquery_5finterface_2eproto();
  return *default_instance_;
}

OpsUnit* OpsUnit::default_instance_ = NULL;

OpsUnit* OpsUnit::New() const {
  return new OpsUnit;
}

void OpsUnit::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    cmd_ = 1;
    page_ = 1;
    if (has_queryk()) {
      if (queryk_ != &::google::protobuf::internal::kEmptyString) {
        queryk_->clear();
      }
    }
    dev_type_ = 1;
  }
  uid_.Clear();
  tags_.Clear();
  alias_.Clear();
  total_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool OpsUnit::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .QUERY_ACTION cmd = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::QUERY_ACTION_IsValid(value)) {
            set_cmd(static_cast< ::QUERY_ACTION >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_page;
        break;
      }

      // optional int32 page = 2 [default = 1];
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_page:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &page_)));
          set_has_page();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_uid;
        break;
      }

      // repeated int64 uid = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_uid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 1, 24, input, this->mutable_uid())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, this->mutable_uid())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_uid;
        if (input->ExpectTag(34)) goto parse_tags;
        break;
      }

      // repeated bytes tags = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_tags:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->add_tags()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_tags;
        if (input->ExpectTag(42)) goto parse_alias;
        break;
      }

      // repeated bytes alias = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_alias:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->add_alias()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(42)) goto parse_alias;
        if (input->ExpectTag(50)) goto parse_queryk;
        break;
      }

      // optional bytes queryk = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_queryk:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_queryk()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(56)) goto parse_dev_type;
        break;
      }

      // optional .DEVSUBTYPE dev_type = 7 [default = NORMAL_TYPE];
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_dev_type:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::DEVSUBTYPE_IsValid(value)) {
            set_dev_type(static_cast< ::DEVSUBTYPE >(value));
          } else {
            mutable_unknown_fields()->AddVarint(7, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(64)) goto parse_total;
        break;
      }

      // repeated int32 total = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_total:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 1, 64, input, this->mutable_total())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, this->mutable_total())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(64)) goto parse_total;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void OpsUnit::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .QUERY_ACTION cmd = 1;
  if (has_cmd()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->cmd(), output);
  }

  // optional int32 page = 2 [default = 1];
  if (has_page()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->page(), output);
  }

  // repeated int64 uid = 3;
  for (int i = 0; i < this->uid_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(
      3, this->uid(i), output);
  }

  // repeated bytes tags = 4;
  for (int i = 0; i < this->tags_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      4, this->tags(i), output);
  }

  // repeated bytes alias = 5;
  for (int i = 0; i < this->alias_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      5, this->alias(i), output);
  }

  // optional bytes queryk = 6;
  if (has_queryk()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      6, this->queryk(), output);
  }

  // optional .DEVSUBTYPE dev_type = 7 [default = NORMAL_TYPE];
  if (has_dev_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      7, this->dev_type(), output);
  }

  // repeated int32 total = 8;
  for (int i = 0; i < this->total_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(
      8, this->total(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* OpsUnit::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .QUERY_ACTION cmd = 1;
  if (has_cmd()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->cmd(), target);
  }

  // optional int32 page = 2 [default = 1];
  if (has_page()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->page(), target);
  }

  // repeated int64 uid = 3;
  for (int i = 0; i < this->uid_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteInt64ToArray(3, this->uid(i), target);
  }

  // repeated bytes tags = 4;
  for (int i = 0; i < this->tags_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteBytesToArray(4, this->tags(i), target);
  }

  // repeated bytes alias = 5;
  for (int i = 0; i < this->alias_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteBytesToArray(5, this->alias(i), target);
  }

  // optional bytes queryk = 6;
  if (has_queryk()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        6, this->queryk(), target);
  }

  // optional .DEVSUBTYPE dev_type = 7 [default = NORMAL_TYPE];
  if (has_dev_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      7, this->dev_type(), target);
  }

  // repeated int32 total = 8;
  for (int i = 0; i < this->total_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteInt32ToArray(8, this->total(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int OpsUnit::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .QUERY_ACTION cmd = 1;
    if (has_cmd()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->cmd());
    }

    // optional int32 page = 2 [default = 1];
    if (has_page()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->page());
    }

    // optional bytes queryk = 6;
    if (has_queryk()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->queryk());
    }

    // optional .DEVSUBTYPE dev_type = 7 [default = NORMAL_TYPE];
    if (has_dev_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->dev_type());
    }

  }
  // repeated int64 uid = 3;
  {
    int data_size = 0;
    for (int i = 0; i < this->uid_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        Int64Size(this->uid(i));
    }
    total_size += 1 * this->uid_size() + data_size;
  }

  // repeated bytes tags = 4;
  total_size += 1 * this->tags_size();
  for (int i = 0; i < this->tags_size(); i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::BytesSize(
      this->tags(i));
  }

  // repeated bytes alias = 5;
  total_size += 1 * this->alias_size();
  for (int i = 0; i < this->alias_size(); i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::BytesSize(
      this->alias(i));
  }

  // repeated int32 total = 8;
  {
    int data_size = 0;
    for (int i = 0; i < this->total_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        Int32Size(this->total(i));
    }
    total_size += 1 * this->total_size() + data_size;
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void OpsUnit::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const OpsUnit* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const OpsUnit*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void OpsUnit::MergeFrom(const OpsUnit& from) {
  GOOGLE_CHECK_NE(&from, this);
  uid_.MergeFrom(from.uid_);
  tags_.MergeFrom(from.tags_);
  alias_.MergeFrom(from.alias_);
  total_.MergeFrom(from.total_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_cmd()) {
      set_cmd(from.cmd());
    }
    if (from.has_page()) {
      set_page(from.page());
    }
    if (from.has_queryk()) {
      set_queryk(from.queryk());
    }
    if (from.has_dev_type()) {
      set_dev_type(from.dev_type());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void OpsUnit::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void OpsUnit::CopyFrom(const OpsUnit& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool OpsUnit::IsInitialized() const {

  return true;
}

void OpsUnit::Swap(OpsUnit* other) {
  if (other != this) {
    std::swap(cmd_, other->cmd_);
    std::swap(page_, other->page_);
    uid_.Swap(&other->uid_);
    tags_.Swap(&other->tags_);
    alias_.Swap(&other->alias_);
    std::swap(queryk_, other->queryk_);
    std::swap(dev_type_, other->dev_type_);
    total_.Swap(&other->total_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata OpsUnit::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = OpsUnit_descriptor_;
  metadata.reflection = OpsUnit_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int TagAliasQuery::kReqNoFieldNumber;
const int TagAliasQuery::kAppkeyFieldNumber;
const int TagAliasQuery::kPlatformFieldNumber;
const int TagAliasQuery::kQueryFieldNumber;
#endif  // !_MSC_VER

TagAliasQuery::TagAliasQuery()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void TagAliasQuery::InitAsDefaultInstance() {
}

TagAliasQuery::TagAliasQuery(const TagAliasQuery& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void TagAliasQuery::SharedCtor() {
  _cached_size_ = 0;
  reqno_ = GOOGLE_LONGLONG(0);
  appkey_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  platform_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

TagAliasQuery::~TagAliasQuery() {
  SharedDtor();
}

void TagAliasQuery::SharedDtor() {
  if (appkey_ != &::google::protobuf::internal::kEmptyString) {
    delete appkey_;
  }
  if (this != default_instance_) {
  }
}

void TagAliasQuery::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TagAliasQuery::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TagAliasQuery_descriptor_;
}

const TagAliasQuery& TagAliasQuery::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_tagalias_5fquery_5finterface_2eproto();
  return *default_instance_;
}

TagAliasQuery* TagAliasQuery::default_instance_ = NULL;

TagAliasQuery* TagAliasQuery::New() const {
  return new TagAliasQuery;
}

void TagAliasQuery::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    reqno_ = GOOGLE_LONGLONG(0);
    if (has_appkey()) {
      if (appkey_ != &::google::protobuf::internal::kEmptyString) {
        appkey_->clear();
      }
    }
    platform_ = 0;
  }
  query_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool TagAliasQuery::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int64 reqNo = 1 [default = 0];
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &reqno_)));
          set_has_reqno();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_appkey;
        break;
      }

      // optional bytes appkey = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_appkey:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_appkey()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_platform;
        break;
      }

      // optional .PLATFORM platform = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_platform:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::PLATFORM_IsValid(value)) {
            set_platform(static_cast< ::PLATFORM >(value));
          } else {
            mutable_unknown_fields()->AddVarint(3, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_query;
        break;
      }

      // repeated .TagAliasBatchQuery.OpsUnit query = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_query:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_query()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_query;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void TagAliasQuery::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int64 reqNo = 1 [default = 0];
  if (has_reqno()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(1, this->reqno(), output);
  }

  // optional bytes appkey = 2;
  if (has_appkey()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      2, this->appkey(), output);
  }

  // optional .PLATFORM platform = 3;
  if (has_platform()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      3, this->platform(), output);
  }

  // repeated .TagAliasBatchQuery.OpsUnit query = 4;
  for (int i = 0; i < this->query_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->query(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* TagAliasQuery::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int64 reqNo = 1 [default = 0];
  if (has_reqno()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(1, this->reqno(), target);
  }

  // optional bytes appkey = 2;
  if (has_appkey()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        2, this->appkey(), target);
  }

  // optional .PLATFORM platform = 3;
  if (has_platform()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      3, this->platform(), target);
  }

  // repeated .TagAliasBatchQuery.OpsUnit query = 4;
  for (int i = 0; i < this->query_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        4, this->query(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int TagAliasQuery::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int64 reqNo = 1 [default = 0];
    if (has_reqno()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->reqno());
    }

    // optional bytes appkey = 2;
    if (has_appkey()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->appkey());
    }

    // optional .PLATFORM platform = 3;
    if (has_platform()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->platform());
    }

  }
  // repeated .TagAliasBatchQuery.OpsUnit query = 4;
  total_size += 1 * this->query_size();
  for (int i = 0; i < this->query_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->query(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TagAliasQuery::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const TagAliasQuery* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const TagAliasQuery*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void TagAliasQuery::MergeFrom(const TagAliasQuery& from) {
  GOOGLE_CHECK_NE(&from, this);
  query_.MergeFrom(from.query_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_reqno()) {
      set_reqno(from.reqno());
    }
    if (from.has_appkey()) {
      set_appkey(from.appkey());
    }
    if (from.has_platform()) {
      set_platform(from.platform());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void TagAliasQuery::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TagAliasQuery::CopyFrom(const TagAliasQuery& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TagAliasQuery::IsInitialized() const {

  return true;
}

void TagAliasQuery::Swap(TagAliasQuery* other) {
  if (other != this) {
    std::swap(reqno_, other->reqno_);
    std::swap(appkey_, other->appkey_);
    std::swap(platform_, other->platform_);
    query_.Swap(&other->query_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata TagAliasQuery::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = TagAliasQuery_descriptor_;
  metadata.reflection = TagAliasQuery_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int TagAliasQueryII::kReqNoFieldNumber;
const int TagAliasQueryII::kTotalFieldNumber;
const int TagAliasQueryII::kPageFieldNumber;
const int TagAliasQueryII::kCmdFieldNumber;
const int TagAliasQueryII::kQueryKFieldNumber;
#endif  // !_MSC_VER

TagAliasQueryII::TagAliasQueryII()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void TagAliasQueryII::InitAsDefaultInstance() {
}

TagAliasQueryII::TagAliasQueryII(const TagAliasQueryII& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void TagAliasQueryII::SharedCtor() {
  _cached_size_ = 0;
  reqno_ = GOOGLE_LONGLONG(0);
  total_ = 0;
  page_ = 0;
  cmd_ = 1;
  queryk_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

TagAliasQueryII::~TagAliasQueryII() {
  SharedDtor();
}

void TagAliasQueryII::SharedDtor() {
  if (queryk_ != &::google::protobuf::internal::kEmptyString) {
    delete queryk_;
  }
  if (this != default_instance_) {
  }
}

void TagAliasQueryII::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TagAliasQueryII::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TagAliasQueryII_descriptor_;
}

const TagAliasQueryII& TagAliasQueryII::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_tagalias_5fquery_5finterface_2eproto();
  return *default_instance_;
}

TagAliasQueryII* TagAliasQueryII::default_instance_ = NULL;

TagAliasQueryII* TagAliasQueryII::New() const {
  return new TagAliasQueryII;
}

void TagAliasQueryII::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    reqno_ = GOOGLE_LONGLONG(0);
    total_ = 0;
    page_ = 0;
    cmd_ = 1;
    if (has_queryk()) {
      if (queryk_ != &::google::protobuf::internal::kEmptyString) {
        queryk_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool TagAliasQueryII::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int64 reqNo = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &reqno_)));
          set_has_reqno();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_total;
        break;
      }

      // optional int32 total = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_total:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &total_)));
          set_has_total();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_page;
        break;
      }

      // optional int32 page = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_page:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &page_)));
          set_has_page();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_cmd;
        break;
      }

      // optional .QUERY_ACTION cmd = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_cmd:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::QUERY_ACTION_IsValid(value)) {
            set_cmd(static_cast< ::QUERY_ACTION >(value));
          } else {
            mutable_unknown_fields()->AddVarint(4, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(42)) goto parse_queryK;
        break;
      }

      // optional bytes queryK = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_queryK:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_queryk()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void TagAliasQueryII::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int64 reqNo = 1;
  if (has_reqno()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(1, this->reqno(), output);
  }

  // optional int32 total = 2;
  if (has_total()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->total(), output);
  }

  // optional int32 page = 3;
  if (has_page()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->page(), output);
  }

  // optional .QUERY_ACTION cmd = 4;
  if (has_cmd()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      4, this->cmd(), output);
  }

  // optional bytes queryK = 5;
  if (has_queryk()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      5, this->queryk(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* TagAliasQueryII::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int64 reqNo = 1;
  if (has_reqno()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(1, this->reqno(), target);
  }

  // optional int32 total = 2;
  if (has_total()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->total(), target);
  }

  // optional int32 page = 3;
  if (has_page()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->page(), target);
  }

  // optional .QUERY_ACTION cmd = 4;
  if (has_cmd()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      4, this->cmd(), target);
  }

  // optional bytes queryK = 5;
  if (has_queryk()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        5, this->queryk(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int TagAliasQueryII::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int64 reqNo = 1;
    if (has_reqno()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->reqno());
    }

    // optional int32 total = 2;
    if (has_total()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->total());
    }

    // optional int32 page = 3;
    if (has_page()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->page());
    }

    // optional .QUERY_ACTION cmd = 4;
    if (has_cmd()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->cmd());
    }

    // optional bytes queryK = 5;
    if (has_queryk()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->queryk());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TagAliasQueryII::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const TagAliasQueryII* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const TagAliasQueryII*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void TagAliasQueryII::MergeFrom(const TagAliasQueryII& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_reqno()) {
      set_reqno(from.reqno());
    }
    if (from.has_total()) {
      set_total(from.total());
    }
    if (from.has_page()) {
      set_page(from.page());
    }
    if (from.has_cmd()) {
      set_cmd(from.cmd());
    }
    if (from.has_queryk()) {
      set_queryk(from.queryk());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void TagAliasQueryII::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TagAliasQueryII::CopyFrom(const TagAliasQueryII& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TagAliasQueryII::IsInitialized() const {

  return true;
}

void TagAliasQueryII::Swap(TagAliasQueryII* other) {
  if (other != this) {
    std::swap(reqno_, other->reqno_);
    std::swap(total_, other->total_);
    std::swap(page_, other->page_);
    std::swap(cmd_, other->cmd_);
    std::swap(queryk_, other->queryk_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata TagAliasQueryII::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = TagAliasQueryII_descriptor_;
  metadata.reflection = TagAliasQueryII_reflection_;
  return metadata;
}


// ===================================================================

::std::string* TagAlsResult::_default_msg_ = NULL;
#ifndef _MSC_VER
const int TagAlsResult::kReqTypeFieldNumber;
const int TagAlsResult::kCodeFieldNumber;
const int TagAlsResult::kMsgFieldNumber;
const int TagAlsResult::kTotalFieldNumber;
const int TagAlsResult::kCurFieldNumber;
const int TagAlsResult::kExpiredFieldNumber;
const int TagAlsResult::kQueryKFieldNumber;
const int TagAlsResult::kUidFieldNumber;
const int TagAlsResult::kOuidFieldNumber;
const int TagAlsResult::kUidCountFieldNumber;
const int TagAlsResult::kTagsFieldNumber;
const int TagAlsResult::kAliasFieldNumber;
const int TagAlsResult::kDevTypeFieldNumber;
#endif  // !_MSC_VER

TagAlsResult::TagAlsResult()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void TagAlsResult::InitAsDefaultInstance() {
}

TagAlsResult::TagAlsResult(const TagAlsResult& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void TagAlsResult::SharedCtor() {
  _cached_size_ = 0;
  req_type_ = 1;
  code_ = 0;
  msg_ = const_cast< ::std::string*>(_default_msg_);
  total_ = 1;
  cur_ = 1;
  expired_ = 0u;
  queryk_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  uid_count_ = 0;
  dev_type_ = 1;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

TagAlsResult::~TagAlsResult() {
  SharedDtor();
}

void TagAlsResult::SharedDtor() {
  if (msg_ != _default_msg_) {
    delete msg_;
  }
  if (queryk_ != &::google::protobuf::internal::kEmptyString) {
    delete queryk_;
  }
  if (this != default_instance_) {
  }
}

void TagAlsResult::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TagAlsResult::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TagAlsResult_descriptor_;
}

const TagAlsResult& TagAlsResult::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_tagalias_5fquery_5finterface_2eproto();
  return *default_instance_;
}

TagAlsResult* TagAlsResult::default_instance_ = NULL;

TagAlsResult* TagAlsResult::New() const {
  return new TagAlsResult;
}

void TagAlsResult::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    req_type_ = 1;
    code_ = 0;
    if (has_msg()) {
      if (msg_ != _default_msg_) {
        msg_->assign(*_default_msg_);
      }
    }
    total_ = 1;
    cur_ = 1;
    expired_ = 0u;
    if (has_queryk()) {
      if (queryk_ != &::google::protobuf::internal::kEmptyString) {
        queryk_->clear();
      }
    }
  }
  if (_has_bits_[9 / 32] & (0xffu << (9 % 32))) {
    uid_count_ = 0;
    dev_type_ = 1;
  }
  uid_.Clear();
  ouid_.Clear();
  tags_.Clear();
  alias_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool TagAlsResult::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .QUERY_ACTION req_type = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::QUERY_ACTION_IsValid(value)) {
            set_req_type(static_cast< ::QUERY_ACTION >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_code;
        break;
      }

      // optional .STATUS code = 2 [default = SUCCESS];
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_code:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::STATUS_IsValid(value)) {
            set_code(static_cast< ::STATUS >(value));
          } else {
            mutable_unknown_fields()->AddVarint(2, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_msg;
        break;
      }

      // optional bytes msg = 3 [default = "SUCCESS"];
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_msg:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_msg()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_total;
        break;
      }

      // optional int32 total = 4 [default = 1];
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_total:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &total_)));
          set_has_total();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_cur;
        break;
      }

      // optional int32 cur = 5 [default = 1];
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_cur:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &cur_)));
          set_has_cur();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_expired;
        break;
      }

      // optional uint32 expired = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_expired:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &expired_)));
          set_has_expired();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(58)) goto parse_queryK;
        break;
      }

      // optional bytes queryK = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_queryK:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_queryk()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(64)) goto parse_uid;
        break;
      }

      // repeated int64 uid = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_uid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 1, 64, input, this->mutable_uid())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, this->mutable_uid())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(64)) goto parse_uid;
        if (input->ExpectTag(72)) goto parse_ouid;
        break;
      }

      // repeated int64 ouid = 9;
      case 9: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_ouid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 1, 72, input, this->mutable_ouid())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, this->mutable_ouid())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(72)) goto parse_ouid;
        if (input->ExpectTag(80)) goto parse_uid_count;
        break;
      }

      // optional int32 uid_count = 10;
      case 10: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_uid_count:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &uid_count_)));
          set_has_uid_count();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(90)) goto parse_tags;
        break;
      }

      // repeated bytes tags = 11;
      case 11: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_tags:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->add_tags()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(90)) goto parse_tags;
        if (input->ExpectTag(98)) goto parse_alias;
        break;
      }

      // repeated bytes alias = 12;
      case 12: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_alias:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->add_alias()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(98)) goto parse_alias;
        if (input->ExpectTag(104)) goto parse_dev_type;
        break;
      }

      // optional .DEVSUBTYPE dev_type = 13 [default = NORMAL_TYPE];
      case 13: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_dev_type:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::DEVSUBTYPE_IsValid(value)) {
            set_dev_type(static_cast< ::DEVSUBTYPE >(value));
          } else {
            mutable_unknown_fields()->AddVarint(13, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void TagAlsResult::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .QUERY_ACTION req_type = 1;
  if (has_req_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->req_type(), output);
  }

  // optional .STATUS code = 2 [default = SUCCESS];
  if (has_code()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->code(), output);
  }

  // optional bytes msg = 3 [default = "SUCCESS"];
  if (has_msg()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      3, this->msg(), output);
  }

  // optional int32 total = 4 [default = 1];
  if (has_total()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->total(), output);
  }

  // optional int32 cur = 5 [default = 1];
  if (has_cur()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->cur(), output);
  }

  // optional uint32 expired = 6;
  if (has_expired()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(6, this->expired(), output);
  }

  // optional bytes queryK = 7;
  if (has_queryk()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      7, this->queryk(), output);
  }

  // repeated int64 uid = 8;
  for (int i = 0; i < this->uid_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(
      8, this->uid(i), output);
  }

  // repeated int64 ouid = 9;
  for (int i = 0; i < this->ouid_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(
      9, this->ouid(i), output);
  }

  // optional int32 uid_count = 10;
  if (has_uid_count()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(10, this->uid_count(), output);
  }

  // repeated bytes tags = 11;
  for (int i = 0; i < this->tags_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      11, this->tags(i), output);
  }

  // repeated bytes alias = 12;
  for (int i = 0; i < this->alias_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      12, this->alias(i), output);
  }

  // optional .DEVSUBTYPE dev_type = 13 [default = NORMAL_TYPE];
  if (has_dev_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      13, this->dev_type(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* TagAlsResult::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .QUERY_ACTION req_type = 1;
  if (has_req_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->req_type(), target);
  }

  // optional .STATUS code = 2 [default = SUCCESS];
  if (has_code()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      2, this->code(), target);
  }

  // optional bytes msg = 3 [default = "SUCCESS"];
  if (has_msg()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        3, this->msg(), target);
  }

  // optional int32 total = 4 [default = 1];
  if (has_total()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->total(), target);
  }

  // optional int32 cur = 5 [default = 1];
  if (has_cur()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->cur(), target);
  }

  // optional uint32 expired = 6;
  if (has_expired()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(6, this->expired(), target);
  }

  // optional bytes queryK = 7;
  if (has_queryk()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        7, this->queryk(), target);
  }

  // repeated int64 uid = 8;
  for (int i = 0; i < this->uid_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteInt64ToArray(8, this->uid(i), target);
  }

  // repeated int64 ouid = 9;
  for (int i = 0; i < this->ouid_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteInt64ToArray(9, this->ouid(i), target);
  }

  // optional int32 uid_count = 10;
  if (has_uid_count()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(10, this->uid_count(), target);
  }

  // repeated bytes tags = 11;
  for (int i = 0; i < this->tags_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteBytesToArray(11, this->tags(i), target);
  }

  // repeated bytes alias = 12;
  for (int i = 0; i < this->alias_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteBytesToArray(12, this->alias(i), target);
  }

  // optional .DEVSUBTYPE dev_type = 13 [default = NORMAL_TYPE];
  if (has_dev_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      13, this->dev_type(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int TagAlsResult::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .QUERY_ACTION req_type = 1;
    if (has_req_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->req_type());
    }

    // optional .STATUS code = 2 [default = SUCCESS];
    if (has_code()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->code());
    }

    // optional bytes msg = 3 [default = "SUCCESS"];
    if (has_msg()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->msg());
    }

    // optional int32 total = 4 [default = 1];
    if (has_total()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->total());
    }

    // optional int32 cur = 5 [default = 1];
    if (has_cur()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->cur());
    }

    // optional uint32 expired = 6;
    if (has_expired()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->expired());
    }

    // optional bytes queryK = 7;
    if (has_queryk()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->queryk());
    }

  }
  if (_has_bits_[9 / 32] & (0xffu << (9 % 32))) {
    // optional int32 uid_count = 10;
    if (has_uid_count()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->uid_count());
    }

    // optional .DEVSUBTYPE dev_type = 13 [default = NORMAL_TYPE];
    if (has_dev_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->dev_type());
    }

  }
  // repeated int64 uid = 8;
  {
    int data_size = 0;
    for (int i = 0; i < this->uid_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        Int64Size(this->uid(i));
    }
    total_size += 1 * this->uid_size() + data_size;
  }

  // repeated int64 ouid = 9;
  {
    int data_size = 0;
    for (int i = 0; i < this->ouid_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        Int64Size(this->ouid(i));
    }
    total_size += 1 * this->ouid_size() + data_size;
  }

  // repeated bytes tags = 11;
  total_size += 1 * this->tags_size();
  for (int i = 0; i < this->tags_size(); i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::BytesSize(
      this->tags(i));
  }

  // repeated bytes alias = 12;
  total_size += 1 * this->alias_size();
  for (int i = 0; i < this->alias_size(); i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::BytesSize(
      this->alias(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TagAlsResult::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const TagAlsResult* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const TagAlsResult*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void TagAlsResult::MergeFrom(const TagAlsResult& from) {
  GOOGLE_CHECK_NE(&from, this);
  uid_.MergeFrom(from.uid_);
  ouid_.MergeFrom(from.ouid_);
  tags_.MergeFrom(from.tags_);
  alias_.MergeFrom(from.alias_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_req_type()) {
      set_req_type(from.req_type());
    }
    if (from.has_code()) {
      set_code(from.code());
    }
    if (from.has_msg()) {
      set_msg(from.msg());
    }
    if (from.has_total()) {
      set_total(from.total());
    }
    if (from.has_cur()) {
      set_cur(from.cur());
    }
    if (from.has_expired()) {
      set_expired(from.expired());
    }
    if (from.has_queryk()) {
      set_queryk(from.queryk());
    }
  }
  if (from._has_bits_[9 / 32] & (0xffu << (9 % 32))) {
    if (from.has_uid_count()) {
      set_uid_count(from.uid_count());
    }
    if (from.has_dev_type()) {
      set_dev_type(from.dev_type());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void TagAlsResult::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TagAlsResult::CopyFrom(const TagAlsResult& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TagAlsResult::IsInitialized() const {

  return true;
}

void TagAlsResult::Swap(TagAlsResult* other) {
  if (other != this) {
    std::swap(req_type_, other->req_type_);
    std::swap(code_, other->code_);
    std::swap(msg_, other->msg_);
    std::swap(total_, other->total_);
    std::swap(cur_, other->cur_);
    std::swap(expired_, other->expired_);
    std::swap(queryk_, other->queryk_);
    uid_.Swap(&other->uid_);
    ouid_.Swap(&other->ouid_);
    std::swap(uid_count_, other->uid_count_);
    tags_.Swap(&other->tags_);
    alias_.Swap(&other->alias_);
    std::swap(dev_type_, other->dev_type_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata TagAlsResult::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = TagAlsResult_descriptor_;
  metadata.reflection = TagAlsResult_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int TagAlsResp::kReqNoFieldNumber;
const int TagAlsResp::kCodeFieldNumber;
const int TagAlsResp::kAppkeyFieldNumber;
const int TagAlsResp::kPlatformFieldNumber;
const int TagAlsResp::kResultFieldNumber;
#endif  // !_MSC_VER

TagAlsResp::TagAlsResp()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void TagAlsResp::InitAsDefaultInstance() {
}

TagAlsResp::TagAlsResp(const TagAlsResp& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void TagAlsResp::SharedCtor() {
  _cached_size_ = 0;
  reqno_ = GOOGLE_LONGLONG(0);
  code_ = 0;
  appkey_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  platform_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

TagAlsResp::~TagAlsResp() {
  SharedDtor();
}

void TagAlsResp::SharedDtor() {
  if (appkey_ != &::google::protobuf::internal::kEmptyString) {
    delete appkey_;
  }
  if (this != default_instance_) {
  }
}

void TagAlsResp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TagAlsResp::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TagAlsResp_descriptor_;
}

const TagAlsResp& TagAlsResp::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_tagalias_5fquery_5finterface_2eproto();
  return *default_instance_;
}

TagAlsResp* TagAlsResp::default_instance_ = NULL;

TagAlsResp* TagAlsResp::New() const {
  return new TagAlsResp;
}

void TagAlsResp::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    reqno_ = GOOGLE_LONGLONG(0);
    code_ = 0;
    if (has_appkey()) {
      if (appkey_ != &::google::protobuf::internal::kEmptyString) {
        appkey_->clear();
      }
    }
    platform_ = 0;
  }
  result_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool TagAlsResp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int64 reqNo = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &reqno_)));
          set_has_reqno();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_code;
        break;
      }

      // optional int32 code = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_code:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &code_)));
          set_has_code();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_appkey;
        break;
      }

      // optional bytes appkey = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_appkey:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_appkey()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_platform;
        break;
      }

      // optional .PLATFORM platform = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_platform:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::PLATFORM_IsValid(value)) {
            set_platform(static_cast< ::PLATFORM >(value));
          } else {
            mutable_unknown_fields()->AddVarint(4, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(42)) goto parse_result;
        break;
      }

      // repeated .TagAliasBatchQuery.TagAlsResult result = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_result:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_result()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(42)) goto parse_result;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void TagAlsResp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int64 reqNo = 1;
  if (has_reqno()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(1, this->reqno(), output);
  }

  // optional int32 code = 2;
  if (has_code()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->code(), output);
  }

  // optional bytes appkey = 3;
  if (has_appkey()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      3, this->appkey(), output);
  }

  // optional .PLATFORM platform = 4;
  if (has_platform()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      4, this->platform(), output);
  }

  // repeated .TagAliasBatchQuery.TagAlsResult result = 5;
  for (int i = 0; i < this->result_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, this->result(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* TagAlsResp::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int64 reqNo = 1;
  if (has_reqno()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(1, this->reqno(), target);
  }

  // optional int32 code = 2;
  if (has_code()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->code(), target);
  }

  // optional bytes appkey = 3;
  if (has_appkey()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        3, this->appkey(), target);
  }

  // optional .PLATFORM platform = 4;
  if (has_platform()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      4, this->platform(), target);
  }

  // repeated .TagAliasBatchQuery.TagAlsResult result = 5;
  for (int i = 0; i < this->result_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        5, this->result(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int TagAlsResp::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int64 reqNo = 1;
    if (has_reqno()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->reqno());
    }

    // optional int32 code = 2;
    if (has_code()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->code());
    }

    // optional bytes appkey = 3;
    if (has_appkey()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->appkey());
    }

    // optional .PLATFORM platform = 4;
    if (has_platform()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->platform());
    }

  }
  // repeated .TagAliasBatchQuery.TagAlsResult result = 5;
  total_size += 1 * this->result_size();
  for (int i = 0; i < this->result_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->result(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TagAlsResp::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const TagAlsResp* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const TagAlsResp*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void TagAlsResp::MergeFrom(const TagAlsResp& from) {
  GOOGLE_CHECK_NE(&from, this);
  result_.MergeFrom(from.result_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_reqno()) {
      set_reqno(from.reqno());
    }
    if (from.has_code()) {
      set_code(from.code());
    }
    if (from.has_appkey()) {
      set_appkey(from.appkey());
    }
    if (from.has_platform()) {
      set_platform(from.platform());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void TagAlsResp::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TagAlsResp::CopyFrom(const TagAlsResp& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TagAlsResp::IsInitialized() const {

  return true;
}

void TagAlsResp::Swap(TagAlsResp* other) {
  if (other != this) {
    std::swap(reqno_, other->reqno_);
    std::swap(code_, other->code_);
    std::swap(appkey_, other->appkey_);
    std::swap(platform_, other->platform_);
    result_.Swap(&other->result_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata TagAlsResp::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = TagAlsResp_descriptor_;
  metadata.reflection = TagAlsResp_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace TagAliasBatchQuery

// @@protoc_insertion_point(global_scope)
