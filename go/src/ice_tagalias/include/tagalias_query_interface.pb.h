// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: tagalias_query_interface.proto

#ifndef PROTOBUF_tagalias_5fquery_5finterface_2eproto__INCLUDED
#define PROTOBUF_tagalias_5fquery_5finterface_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 2005000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 2005000 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/unknown_field_set.h>
#include "tagalias_common.pb.h"
// @@protoc_insertion_point(includes)

namespace TagAliasBatchQuery {

// Internal implementation detail -- do not call these.
void  protobuf_AddDesc_tagalias_5fquery_5finterface_2eproto();
void protobuf_AssignDesc_tagalias_5fquery_5finterface_2eproto();
void protobuf_ShutdownFile_tagalias_5fquery_5finterface_2eproto();

class OpsUnit;
class TagAliasQuery;
class TagAliasQueryII;
class TagAlsResult;
class TagAlsResp;

// ===================================================================

class OpsUnit : public ::google::protobuf::Message {
 public:
  OpsUnit();
  virtual ~OpsUnit();

  OpsUnit(const OpsUnit& from);

  inline OpsUnit& operator=(const OpsUnit& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const OpsUnit& default_instance();

  void Swap(OpsUnit* other);

  // implements Message ----------------------------------------------

  OpsUnit* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const OpsUnit& from);
  void MergeFrom(const OpsUnit& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .QUERY_ACTION cmd = 1;
  inline bool has_cmd() const;
  inline void clear_cmd();
  static const int kCmdFieldNumber = 1;
  inline ::QUERY_ACTION cmd() const;
  inline void set_cmd(::QUERY_ACTION value);

  // optional int32 page = 2 [default = 1];
  inline bool has_page() const;
  inline void clear_page();
  static const int kPageFieldNumber = 2;
  inline ::google::protobuf::int32 page() const;
  inline void set_page(::google::protobuf::int32 value);

  // repeated int64 uid = 3;
  inline int uid_size() const;
  inline void clear_uid();
  static const int kUidFieldNumber = 3;
  inline ::google::protobuf::int64 uid(int index) const;
  inline void set_uid(int index, ::google::protobuf::int64 value);
  inline void add_uid(::google::protobuf::int64 value);
  inline const ::google::protobuf::RepeatedField< ::google::protobuf::int64 >&
      uid() const;
  inline ::google::protobuf::RepeatedField< ::google::protobuf::int64 >*
      mutable_uid();

  // repeated bytes tags = 4;
  inline int tags_size() const;
  inline void clear_tags();
  static const int kTagsFieldNumber = 4;
  inline const ::std::string& tags(int index) const;
  inline ::std::string* mutable_tags(int index);
  inline void set_tags(int index, const ::std::string& value);
  inline void set_tags(int index, const char* value);
  inline void set_tags(int index, const void* value, size_t size);
  inline ::std::string* add_tags();
  inline void add_tags(const ::std::string& value);
  inline void add_tags(const char* value);
  inline void add_tags(const void* value, size_t size);
  inline const ::google::protobuf::RepeatedPtrField< ::std::string>& tags() const;
  inline ::google::protobuf::RepeatedPtrField< ::std::string>* mutable_tags();

  // repeated bytes alias = 5;
  inline int alias_size() const;
  inline void clear_alias();
  static const int kAliasFieldNumber = 5;
  inline const ::std::string& alias(int index) const;
  inline ::std::string* mutable_alias(int index);
  inline void set_alias(int index, const ::std::string& value);
  inline void set_alias(int index, const char* value);
  inline void set_alias(int index, const void* value, size_t size);
  inline ::std::string* add_alias();
  inline void add_alias(const ::std::string& value);
  inline void add_alias(const char* value);
  inline void add_alias(const void* value, size_t size);
  inline const ::google::protobuf::RepeatedPtrField< ::std::string>& alias() const;
  inline ::google::protobuf::RepeatedPtrField< ::std::string>* mutable_alias();

  // optional bytes queryk = 6;
  inline bool has_queryk() const;
  inline void clear_queryk();
  static const int kQuerykFieldNumber = 6;
  inline const ::std::string& queryk() const;
  inline void set_queryk(const ::std::string& value);
  inline void set_queryk(const char* value);
  inline void set_queryk(const void* value, size_t size);
  inline ::std::string* mutable_queryk();
  inline ::std::string* release_queryk();
  inline void set_allocated_queryk(::std::string* queryk);

  // optional .DEVSUBTYPE dev_type = 7 [default = NORMAL_TYPE];
  inline bool has_dev_type() const;
  inline void clear_dev_type();
  static const int kDevTypeFieldNumber = 7;
  inline ::DEVSUBTYPE dev_type() const;
  inline void set_dev_type(::DEVSUBTYPE value);

  // repeated int32 total = 8;
  inline int total_size() const;
  inline void clear_total();
  static const int kTotalFieldNumber = 8;
  inline ::google::protobuf::int32 total(int index) const;
  inline void set_total(int index, ::google::protobuf::int32 value);
  inline void add_total(::google::protobuf::int32 value);
  inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
      total() const;
  inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
      mutable_total();

  // @@protoc_insertion_point(class_scope:TagAliasBatchQuery.OpsUnit)
 private:
  inline void set_has_cmd();
  inline void clear_has_cmd();
  inline void set_has_page();
  inline void clear_has_page();
  inline void set_has_queryk();
  inline void clear_has_queryk();
  inline void set_has_dev_type();
  inline void clear_has_dev_type();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  int cmd_;
  ::google::protobuf::int32 page_;
  ::google::protobuf::RepeatedField< ::google::protobuf::int64 > uid_;
  ::google::protobuf::RepeatedPtrField< ::std::string> tags_;
  ::google::protobuf::RepeatedPtrField< ::std::string> alias_;
  ::std::string* queryk_;
  ::google::protobuf::RepeatedField< ::google::protobuf::int32 > total_;
  int dev_type_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(8 + 31) / 32];

  friend void  protobuf_AddDesc_tagalias_5fquery_5finterface_2eproto();
  friend void protobuf_AssignDesc_tagalias_5fquery_5finterface_2eproto();
  friend void protobuf_ShutdownFile_tagalias_5fquery_5finterface_2eproto();

  void InitAsDefaultInstance();
  static OpsUnit* default_instance_;
};
// -------------------------------------------------------------------

class TagAliasQuery : public ::google::protobuf::Message {
 public:
  TagAliasQuery();
  virtual ~TagAliasQuery();

  TagAliasQuery(const TagAliasQuery& from);

  inline TagAliasQuery& operator=(const TagAliasQuery& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const TagAliasQuery& default_instance();

  void Swap(TagAliasQuery* other);

  // implements Message ----------------------------------------------

  TagAliasQuery* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const TagAliasQuery& from);
  void MergeFrom(const TagAliasQuery& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional int64 reqNo = 1 [default = 0];
  inline bool has_reqno() const;
  inline void clear_reqno();
  static const int kReqNoFieldNumber = 1;
  inline ::google::protobuf::int64 reqno() const;
  inline void set_reqno(::google::protobuf::int64 value);

  // optional bytes appkey = 2;
  inline bool has_appkey() const;
  inline void clear_appkey();
  static const int kAppkeyFieldNumber = 2;
  inline const ::std::string& appkey() const;
  inline void set_appkey(const ::std::string& value);
  inline void set_appkey(const char* value);
  inline void set_appkey(const void* value, size_t size);
  inline ::std::string* mutable_appkey();
  inline ::std::string* release_appkey();
  inline void set_allocated_appkey(::std::string* appkey);

  // optional .PLATFORM platform = 3;
  inline bool has_platform() const;
  inline void clear_platform();
  static const int kPlatformFieldNumber = 3;
  inline ::PLATFORM platform() const;
  inline void set_platform(::PLATFORM value);

  // repeated .TagAliasBatchQuery.OpsUnit query = 4;
  inline int query_size() const;
  inline void clear_query();
  static const int kQueryFieldNumber = 4;
  inline const ::TagAliasBatchQuery::OpsUnit& query(int index) const;
  inline ::TagAliasBatchQuery::OpsUnit* mutable_query(int index);
  inline ::TagAliasBatchQuery::OpsUnit* add_query();
  inline const ::google::protobuf::RepeatedPtrField< ::TagAliasBatchQuery::OpsUnit >&
      query() const;
  inline ::google::protobuf::RepeatedPtrField< ::TagAliasBatchQuery::OpsUnit >*
      mutable_query();

  // @@protoc_insertion_point(class_scope:TagAliasBatchQuery.TagAliasQuery)
 private:
  inline void set_has_reqno();
  inline void clear_has_reqno();
  inline void set_has_appkey();
  inline void clear_has_appkey();
  inline void set_has_platform();
  inline void clear_has_platform();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::int64 reqno_;
  ::std::string* appkey_;
  ::google::protobuf::RepeatedPtrField< ::TagAliasBatchQuery::OpsUnit > query_;
  int platform_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(4 + 31) / 32];

  friend void  protobuf_AddDesc_tagalias_5fquery_5finterface_2eproto();
  friend void protobuf_AssignDesc_tagalias_5fquery_5finterface_2eproto();
  friend void protobuf_ShutdownFile_tagalias_5fquery_5finterface_2eproto();

  void InitAsDefaultInstance();
  static TagAliasQuery* default_instance_;
};
// -------------------------------------------------------------------

class TagAliasQueryII : public ::google::protobuf::Message {
 public:
  TagAliasQueryII();
  virtual ~TagAliasQueryII();

  TagAliasQueryII(const TagAliasQueryII& from);

  inline TagAliasQueryII& operator=(const TagAliasQueryII& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const TagAliasQueryII& default_instance();

  void Swap(TagAliasQueryII* other);

  // implements Message ----------------------------------------------

  TagAliasQueryII* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const TagAliasQueryII& from);
  void MergeFrom(const TagAliasQueryII& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional int64 reqNo = 1;
  inline bool has_reqno() const;
  inline void clear_reqno();
  static const int kReqNoFieldNumber = 1;
  inline ::google::protobuf::int64 reqno() const;
  inline void set_reqno(::google::protobuf::int64 value);

  // optional int32 total = 2;
  inline bool has_total() const;
  inline void clear_total();
  static const int kTotalFieldNumber = 2;
  inline ::google::protobuf::int32 total() const;
  inline void set_total(::google::protobuf::int32 value);

  // optional int32 page = 3;
  inline bool has_page() const;
  inline void clear_page();
  static const int kPageFieldNumber = 3;
  inline ::google::protobuf::int32 page() const;
  inline void set_page(::google::protobuf::int32 value);

  // optional .QUERY_ACTION cmd = 4;
  inline bool has_cmd() const;
  inline void clear_cmd();
  static const int kCmdFieldNumber = 4;
  inline ::QUERY_ACTION cmd() const;
  inline void set_cmd(::QUERY_ACTION value);

  // optional bytes queryK = 5;
  inline bool has_queryk() const;
  inline void clear_queryk();
  static const int kQueryKFieldNumber = 5;
  inline const ::std::string& queryk() const;
  inline void set_queryk(const ::std::string& value);
  inline void set_queryk(const char* value);
  inline void set_queryk(const void* value, size_t size);
  inline ::std::string* mutable_queryk();
  inline ::std::string* release_queryk();
  inline void set_allocated_queryk(::std::string* queryk);

  // @@protoc_insertion_point(class_scope:TagAliasBatchQuery.TagAliasQueryII)
 private:
  inline void set_has_reqno();
  inline void clear_has_reqno();
  inline void set_has_total();
  inline void clear_has_total();
  inline void set_has_page();
  inline void clear_has_page();
  inline void set_has_cmd();
  inline void clear_has_cmd();
  inline void set_has_queryk();
  inline void clear_has_queryk();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::int64 reqno_;
  ::google::protobuf::int32 total_;
  ::google::protobuf::int32 page_;
  ::std::string* queryk_;
  int cmd_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(5 + 31) / 32];

  friend void  protobuf_AddDesc_tagalias_5fquery_5finterface_2eproto();
  friend void protobuf_AssignDesc_tagalias_5fquery_5finterface_2eproto();
  friend void protobuf_ShutdownFile_tagalias_5fquery_5finterface_2eproto();

  void InitAsDefaultInstance();
  static TagAliasQueryII* default_instance_;
};
// -------------------------------------------------------------------

class TagAlsResult : public ::google::protobuf::Message {
 public:
  TagAlsResult();
  virtual ~TagAlsResult();

  TagAlsResult(const TagAlsResult& from);

  inline TagAlsResult& operator=(const TagAlsResult& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const TagAlsResult& default_instance();

  void Swap(TagAlsResult* other);

  // implements Message ----------------------------------------------

  TagAlsResult* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const TagAlsResult& from);
  void MergeFrom(const TagAlsResult& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .QUERY_ACTION req_type = 1;
  inline bool has_req_type() const;
  inline void clear_req_type();
  static const int kReqTypeFieldNumber = 1;
  inline ::QUERY_ACTION req_type() const;
  inline void set_req_type(::QUERY_ACTION value);

  // optional .STATUS code = 2 [default = SUCCESS];
  inline bool has_code() const;
  inline void clear_code();
  static const int kCodeFieldNumber = 2;
  inline ::STATUS code() const;
  inline void set_code(::STATUS value);

  // optional bytes msg = 3 [default = "SUCCESS"];
  inline bool has_msg() const;
  inline void clear_msg();
  static const int kMsgFieldNumber = 3;
  inline const ::std::string& msg() const;
  inline void set_msg(const ::std::string& value);
  inline void set_msg(const char* value);
  inline void set_msg(const void* value, size_t size);
  inline ::std::string* mutable_msg();
  inline ::std::string* release_msg();
  inline void set_allocated_msg(::std::string* msg);

  // optional int32 total = 4 [default = 1];
  inline bool has_total() const;
  inline void clear_total();
  static const int kTotalFieldNumber = 4;
  inline ::google::protobuf::int32 total() const;
  inline void set_total(::google::protobuf::int32 value);

  // optional int32 cur = 5 [default = 1];
  inline bool has_cur() const;
  inline void clear_cur();
  static const int kCurFieldNumber = 5;
  inline ::google::protobuf::int32 cur() const;
  inline void set_cur(::google::protobuf::int32 value);

  // optional uint32 expired = 6;
  inline bool has_expired() const;
  inline void clear_expired();
  static const int kExpiredFieldNumber = 6;
  inline ::google::protobuf::uint32 expired() const;
  inline void set_expired(::google::protobuf::uint32 value);

  // optional bytes queryK = 7;
  inline bool has_queryk() const;
  inline void clear_queryk();
  static const int kQueryKFieldNumber = 7;
  inline const ::std::string& queryk() const;
  inline void set_queryk(const ::std::string& value);
  inline void set_queryk(const char* value);
  inline void set_queryk(const void* value, size_t size);
  inline ::std::string* mutable_queryk();
  inline ::std::string* release_queryk();
  inline void set_allocated_queryk(::std::string* queryk);

  // repeated int64 uid = 8;
  inline int uid_size() const;
  inline void clear_uid();
  static const int kUidFieldNumber = 8;
  inline ::google::protobuf::int64 uid(int index) const;
  inline void set_uid(int index, ::google::protobuf::int64 value);
  inline void add_uid(::google::protobuf::int64 value);
  inline const ::google::protobuf::RepeatedField< ::google::protobuf::int64 >&
      uid() const;
  inline ::google::protobuf::RepeatedField< ::google::protobuf::int64 >*
      mutable_uid();

  // repeated int64 ouid = 9;
  inline int ouid_size() const;
  inline void clear_ouid();
  static const int kOuidFieldNumber = 9;
  inline ::google::protobuf::int64 ouid(int index) const;
  inline void set_ouid(int index, ::google::protobuf::int64 value);
  inline void add_ouid(::google::protobuf::int64 value);
  inline const ::google::protobuf::RepeatedField< ::google::protobuf::int64 >&
      ouid() const;
  inline ::google::protobuf::RepeatedField< ::google::protobuf::int64 >*
      mutable_ouid();

  // optional int32 uid_count = 10;
  inline bool has_uid_count() const;
  inline void clear_uid_count();
  static const int kUidCountFieldNumber = 10;
  inline ::google::protobuf::int32 uid_count() const;
  inline void set_uid_count(::google::protobuf::int32 value);

  // repeated bytes tags = 11;
  inline int tags_size() const;
  inline void clear_tags();
  static const int kTagsFieldNumber = 11;
  inline const ::std::string& tags(int index) const;
  inline ::std::string* mutable_tags(int index);
  inline void set_tags(int index, const ::std::string& value);
  inline void set_tags(int index, const char* value);
  inline void set_tags(int index, const void* value, size_t size);
  inline ::std::string* add_tags();
  inline void add_tags(const ::std::string& value);
  inline void add_tags(const char* value);
  inline void add_tags(const void* value, size_t size);
  inline const ::google::protobuf::RepeatedPtrField< ::std::string>& tags() const;
  inline ::google::protobuf::RepeatedPtrField< ::std::string>* mutable_tags();

  // repeated bytes alias = 12;
  inline int alias_size() const;
  inline void clear_alias();
  static const int kAliasFieldNumber = 12;
  inline const ::std::string& alias(int index) const;
  inline ::std::string* mutable_alias(int index);
  inline void set_alias(int index, const ::std::string& value);
  inline void set_alias(int index, const char* value);
  inline void set_alias(int index, const void* value, size_t size);
  inline ::std::string* add_alias();
  inline void add_alias(const ::std::string& value);
  inline void add_alias(const char* value);
  inline void add_alias(const void* value, size_t size);
  inline const ::google::protobuf::RepeatedPtrField< ::std::string>& alias() const;
  inline ::google::protobuf::RepeatedPtrField< ::std::string>* mutable_alias();

  // optional .DEVSUBTYPE dev_type = 13 [default = NORMAL_TYPE];
  inline bool has_dev_type() const;
  inline void clear_dev_type();
  static const int kDevTypeFieldNumber = 13;
  inline ::DEVSUBTYPE dev_type() const;
  inline void set_dev_type(::DEVSUBTYPE value);

  // @@protoc_insertion_point(class_scope:TagAliasBatchQuery.TagAlsResult)
 private:
  inline void set_has_req_type();
  inline void clear_has_req_type();
  inline void set_has_code();
  inline void clear_has_code();
  inline void set_has_msg();
  inline void clear_has_msg();
  inline void set_has_total();
  inline void clear_has_total();
  inline void set_has_cur();
  inline void clear_has_cur();
  inline void set_has_expired();
  inline void clear_has_expired();
  inline void set_has_queryk();
  inline void clear_has_queryk();
  inline void set_has_uid_count();
  inline void clear_has_uid_count();
  inline void set_has_dev_type();
  inline void clear_has_dev_type();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  int req_type_;
  int code_;
  ::std::string* msg_;
  static ::std::string* _default_msg_;
  ::google::protobuf::int32 total_;
  ::google::protobuf::int32 cur_;
  ::std::string* queryk_;
  ::google::protobuf::RepeatedField< ::google::protobuf::int64 > uid_;
  ::google::protobuf::uint32 expired_;
  ::google::protobuf::int32 uid_count_;
  ::google::protobuf::RepeatedField< ::google::protobuf::int64 > ouid_;
  ::google::protobuf::RepeatedPtrField< ::std::string> tags_;
  ::google::protobuf::RepeatedPtrField< ::std::string> alias_;
  int dev_type_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(13 + 31) / 32];

  friend void  protobuf_AddDesc_tagalias_5fquery_5finterface_2eproto();
  friend void protobuf_AssignDesc_tagalias_5fquery_5finterface_2eproto();
  friend void protobuf_ShutdownFile_tagalias_5fquery_5finterface_2eproto();

  void InitAsDefaultInstance();
  static TagAlsResult* default_instance_;
};
// -------------------------------------------------------------------

class TagAlsResp : public ::google::protobuf::Message {
 public:
  TagAlsResp();
  virtual ~TagAlsResp();

  TagAlsResp(const TagAlsResp& from);

  inline TagAlsResp& operator=(const TagAlsResp& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const TagAlsResp& default_instance();

  void Swap(TagAlsResp* other);

  // implements Message ----------------------------------------------

  TagAlsResp* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const TagAlsResp& from);
  void MergeFrom(const TagAlsResp& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional int64 reqNo = 1;
  inline bool has_reqno() const;
  inline void clear_reqno();
  static const int kReqNoFieldNumber = 1;
  inline ::google::protobuf::int64 reqno() const;
  inline void set_reqno(::google::protobuf::int64 value);

  // optional int32 code = 2;
  inline bool has_code() const;
  inline void clear_code();
  static const int kCodeFieldNumber = 2;
  inline ::google::protobuf::int32 code() const;
  inline void set_code(::google::protobuf::int32 value);

  // optional bytes appkey = 3;
  inline bool has_appkey() const;
  inline void clear_appkey();
  static const int kAppkeyFieldNumber = 3;
  inline const ::std::string& appkey() const;
  inline void set_appkey(const ::std::string& value);
  inline void set_appkey(const char* value);
  inline void set_appkey(const void* value, size_t size);
  inline ::std::string* mutable_appkey();
  inline ::std::string* release_appkey();
  inline void set_allocated_appkey(::std::string* appkey);

  // optional .PLATFORM platform = 4;
  inline bool has_platform() const;
  inline void clear_platform();
  static const int kPlatformFieldNumber = 4;
  inline ::PLATFORM platform() const;
  inline void set_platform(::PLATFORM value);

  // repeated .TagAliasBatchQuery.TagAlsResult result = 5;
  inline int result_size() const;
  inline void clear_result();
  static const int kResultFieldNumber = 5;
  inline const ::TagAliasBatchQuery::TagAlsResult& result(int index) const;
  inline ::TagAliasBatchQuery::TagAlsResult* mutable_result(int index);
  inline ::TagAliasBatchQuery::TagAlsResult* add_result();
  inline const ::google::protobuf::RepeatedPtrField< ::TagAliasBatchQuery::TagAlsResult >&
      result() const;
  inline ::google::protobuf::RepeatedPtrField< ::TagAliasBatchQuery::TagAlsResult >*
      mutable_result();

  // @@protoc_insertion_point(class_scope:TagAliasBatchQuery.TagAlsResp)
 private:
  inline void set_has_reqno();
  inline void clear_has_reqno();
  inline void set_has_code();
  inline void clear_has_code();
  inline void set_has_appkey();
  inline void clear_has_appkey();
  inline void set_has_platform();
  inline void clear_has_platform();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::int64 reqno_;
  ::std::string* appkey_;
  ::google::protobuf::int32 code_;
  int platform_;
  ::google::protobuf::RepeatedPtrField< ::TagAliasBatchQuery::TagAlsResult > result_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(5 + 31) / 32];

  friend void  protobuf_AddDesc_tagalias_5fquery_5finterface_2eproto();
  friend void protobuf_AssignDesc_tagalias_5fquery_5finterface_2eproto();
  friend void protobuf_ShutdownFile_tagalias_5fquery_5finterface_2eproto();

  void InitAsDefaultInstance();
  static TagAlsResp* default_instance_;
};
// ===================================================================


// ===================================================================

// OpsUnit

// optional .QUERY_ACTION cmd = 1;
inline bool OpsUnit::has_cmd() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void OpsUnit::set_has_cmd() {
  _has_bits_[0] |= 0x00000001u;
}
inline void OpsUnit::clear_has_cmd() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void OpsUnit::clear_cmd() {
  cmd_ = 1;
  clear_has_cmd();
}
inline ::QUERY_ACTION OpsUnit::cmd() const {
  return static_cast< ::QUERY_ACTION >(cmd_);
}
inline void OpsUnit::set_cmd(::QUERY_ACTION value) {
  assert(::QUERY_ACTION_IsValid(value));
  set_has_cmd();
  cmd_ = value;
}

// optional int32 page = 2 [default = 1];
inline bool OpsUnit::has_page() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void OpsUnit::set_has_page() {
  _has_bits_[0] |= 0x00000002u;
}
inline void OpsUnit::clear_has_page() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void OpsUnit::clear_page() {
  page_ = 1;
  clear_has_page();
}
inline ::google::protobuf::int32 OpsUnit::page() const {
  return page_;
}
inline void OpsUnit::set_page(::google::protobuf::int32 value) {
  set_has_page();
  page_ = value;
}

// repeated int64 uid = 3;
inline int OpsUnit::uid_size() const {
  return uid_.size();
}
inline void OpsUnit::clear_uid() {
  uid_.Clear();
}
inline ::google::protobuf::int64 OpsUnit::uid(int index) const {
  return uid_.Get(index);
}
inline void OpsUnit::set_uid(int index, ::google::protobuf::int64 value) {
  uid_.Set(index, value);
}
inline void OpsUnit::add_uid(::google::protobuf::int64 value) {
  uid_.Add(value);
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::int64 >&
OpsUnit::uid() const {
  return uid_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::int64 >*
OpsUnit::mutable_uid() {
  return &uid_;
}

// repeated bytes tags = 4;
inline int OpsUnit::tags_size() const {
  return tags_.size();
}
inline void OpsUnit::clear_tags() {
  tags_.Clear();
}
inline const ::std::string& OpsUnit::tags(int index) const {
  return tags_.Get(index);
}
inline ::std::string* OpsUnit::mutable_tags(int index) {
  return tags_.Mutable(index);
}
inline void OpsUnit::set_tags(int index, const ::std::string& value) {
  tags_.Mutable(index)->assign(value);
}
inline void OpsUnit::set_tags(int index, const char* value) {
  tags_.Mutable(index)->assign(value);
}
inline void OpsUnit::set_tags(int index, const void* value, size_t size) {
  tags_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
}
inline ::std::string* OpsUnit::add_tags() {
  return tags_.Add();
}
inline void OpsUnit::add_tags(const ::std::string& value) {
  tags_.Add()->assign(value);
}
inline void OpsUnit::add_tags(const char* value) {
  tags_.Add()->assign(value);
}
inline void OpsUnit::add_tags(const void* value, size_t size) {
  tags_.Add()->assign(reinterpret_cast<const char*>(value), size);
}
inline const ::google::protobuf::RepeatedPtrField< ::std::string>&
OpsUnit::tags() const {
  return tags_;
}
inline ::google::protobuf::RepeatedPtrField< ::std::string>*
OpsUnit::mutable_tags() {
  return &tags_;
}

// repeated bytes alias = 5;
inline int OpsUnit::alias_size() const {
  return alias_.size();
}
inline void OpsUnit::clear_alias() {
  alias_.Clear();
}
inline const ::std::string& OpsUnit::alias(int index) const {
  return alias_.Get(index);
}
inline ::std::string* OpsUnit::mutable_alias(int index) {
  return alias_.Mutable(index);
}
inline void OpsUnit::set_alias(int index, const ::std::string& value) {
  alias_.Mutable(index)->assign(value);
}
inline void OpsUnit::set_alias(int index, const char* value) {
  alias_.Mutable(index)->assign(value);
}
inline void OpsUnit::set_alias(int index, const void* value, size_t size) {
  alias_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
}
inline ::std::string* OpsUnit::add_alias() {
  return alias_.Add();
}
inline void OpsUnit::add_alias(const ::std::string& value) {
  alias_.Add()->assign(value);
}
inline void OpsUnit::add_alias(const char* value) {
  alias_.Add()->assign(value);
}
inline void OpsUnit::add_alias(const void* value, size_t size) {
  alias_.Add()->assign(reinterpret_cast<const char*>(value), size);
}
inline const ::google::protobuf::RepeatedPtrField< ::std::string>&
OpsUnit::alias() const {
  return alias_;
}
inline ::google::protobuf::RepeatedPtrField< ::std::string>*
OpsUnit::mutable_alias() {
  return &alias_;
}

// optional bytes queryk = 6;
inline bool OpsUnit::has_queryk() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void OpsUnit::set_has_queryk() {
  _has_bits_[0] |= 0x00000020u;
}
inline void OpsUnit::clear_has_queryk() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void OpsUnit::clear_queryk() {
  if (queryk_ != &::google::protobuf::internal::kEmptyString) {
    queryk_->clear();
  }
  clear_has_queryk();
}
inline const ::std::string& OpsUnit::queryk() const {
  return *queryk_;
}
inline void OpsUnit::set_queryk(const ::std::string& value) {
  set_has_queryk();
  if (queryk_ == &::google::protobuf::internal::kEmptyString) {
    queryk_ = new ::std::string;
  }
  queryk_->assign(value);
}
inline void OpsUnit::set_queryk(const char* value) {
  set_has_queryk();
  if (queryk_ == &::google::protobuf::internal::kEmptyString) {
    queryk_ = new ::std::string;
  }
  queryk_->assign(value);
}
inline void OpsUnit::set_queryk(const void* value, size_t size) {
  set_has_queryk();
  if (queryk_ == &::google::protobuf::internal::kEmptyString) {
    queryk_ = new ::std::string;
  }
  queryk_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* OpsUnit::mutable_queryk() {
  set_has_queryk();
  if (queryk_ == &::google::protobuf::internal::kEmptyString) {
    queryk_ = new ::std::string;
  }
  return queryk_;
}
inline ::std::string* OpsUnit::release_queryk() {
  clear_has_queryk();
  if (queryk_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = queryk_;
    queryk_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void OpsUnit::set_allocated_queryk(::std::string* queryk) {
  if (queryk_ != &::google::protobuf::internal::kEmptyString) {
    delete queryk_;
  }
  if (queryk) {
    set_has_queryk();
    queryk_ = queryk;
  } else {
    clear_has_queryk();
    queryk_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional .DEVSUBTYPE dev_type = 7 [default = NORMAL_TYPE];
inline bool OpsUnit::has_dev_type() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void OpsUnit::set_has_dev_type() {
  _has_bits_[0] |= 0x00000040u;
}
inline void OpsUnit::clear_has_dev_type() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void OpsUnit::clear_dev_type() {
  dev_type_ = 1;
  clear_has_dev_type();
}
inline ::DEVSUBTYPE OpsUnit::dev_type() const {
  return static_cast< ::DEVSUBTYPE >(dev_type_);
}
inline void OpsUnit::set_dev_type(::DEVSUBTYPE value) {
  assert(::DEVSUBTYPE_IsValid(value));
  set_has_dev_type();
  dev_type_ = value;
}

// repeated int32 total = 8;
inline int OpsUnit::total_size() const {
  return total_.size();
}
inline void OpsUnit::clear_total() {
  total_.Clear();
}
inline ::google::protobuf::int32 OpsUnit::total(int index) const {
  return total_.Get(index);
}
inline void OpsUnit::set_total(int index, ::google::protobuf::int32 value) {
  total_.Set(index, value);
}
inline void OpsUnit::add_total(::google::protobuf::int32 value) {
  total_.Add(value);
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
OpsUnit::total() const {
  return total_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
OpsUnit::mutable_total() {
  return &total_;
}

// -------------------------------------------------------------------

// TagAliasQuery

// optional int64 reqNo = 1 [default = 0];
inline bool TagAliasQuery::has_reqno() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void TagAliasQuery::set_has_reqno() {
  _has_bits_[0] |= 0x00000001u;
}
inline void TagAliasQuery::clear_has_reqno() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void TagAliasQuery::clear_reqno() {
  reqno_ = GOOGLE_LONGLONG(0);
  clear_has_reqno();
}
inline ::google::protobuf::int64 TagAliasQuery::reqno() const {
  return reqno_;
}
inline void TagAliasQuery::set_reqno(::google::protobuf::int64 value) {
  set_has_reqno();
  reqno_ = value;
}

// optional bytes appkey = 2;
inline bool TagAliasQuery::has_appkey() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void TagAliasQuery::set_has_appkey() {
  _has_bits_[0] |= 0x00000002u;
}
inline void TagAliasQuery::clear_has_appkey() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void TagAliasQuery::clear_appkey() {
  if (appkey_ != &::google::protobuf::internal::kEmptyString) {
    appkey_->clear();
  }
  clear_has_appkey();
}
inline const ::std::string& TagAliasQuery::appkey() const {
  return *appkey_;
}
inline void TagAliasQuery::set_appkey(const ::std::string& value) {
  set_has_appkey();
  if (appkey_ == &::google::protobuf::internal::kEmptyString) {
    appkey_ = new ::std::string;
  }
  appkey_->assign(value);
}
inline void TagAliasQuery::set_appkey(const char* value) {
  set_has_appkey();
  if (appkey_ == &::google::protobuf::internal::kEmptyString) {
    appkey_ = new ::std::string;
  }
  appkey_->assign(value);
}
inline void TagAliasQuery::set_appkey(const void* value, size_t size) {
  set_has_appkey();
  if (appkey_ == &::google::protobuf::internal::kEmptyString) {
    appkey_ = new ::std::string;
  }
  appkey_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* TagAliasQuery::mutable_appkey() {
  set_has_appkey();
  if (appkey_ == &::google::protobuf::internal::kEmptyString) {
    appkey_ = new ::std::string;
  }
  return appkey_;
}
inline ::std::string* TagAliasQuery::release_appkey() {
  clear_has_appkey();
  if (appkey_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = appkey_;
    appkey_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void TagAliasQuery::set_allocated_appkey(::std::string* appkey) {
  if (appkey_ != &::google::protobuf::internal::kEmptyString) {
    delete appkey_;
  }
  if (appkey) {
    set_has_appkey();
    appkey_ = appkey;
  } else {
    clear_has_appkey();
    appkey_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional .PLATFORM platform = 3;
inline bool TagAliasQuery::has_platform() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void TagAliasQuery::set_has_platform() {
  _has_bits_[0] |= 0x00000004u;
}
inline void TagAliasQuery::clear_has_platform() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void TagAliasQuery::clear_platform() {
  platform_ = 0;
  clear_has_platform();
}
inline ::PLATFORM TagAliasQuery::platform() const {
  return static_cast< ::PLATFORM >(platform_);
}
inline void TagAliasQuery::set_platform(::PLATFORM value) {
  assert(::PLATFORM_IsValid(value));
  set_has_platform();
  platform_ = value;
}

// repeated .TagAliasBatchQuery.OpsUnit query = 4;
inline int TagAliasQuery::query_size() const {
  return query_.size();
}
inline void TagAliasQuery::clear_query() {
  query_.Clear();
}
inline const ::TagAliasBatchQuery::OpsUnit& TagAliasQuery::query(int index) const {
  return query_.Get(index);
}
inline ::TagAliasBatchQuery::OpsUnit* TagAliasQuery::mutable_query(int index) {
  return query_.Mutable(index);
}
inline ::TagAliasBatchQuery::OpsUnit* TagAliasQuery::add_query() {
  return query_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::TagAliasBatchQuery::OpsUnit >&
TagAliasQuery::query() const {
  return query_;
}
inline ::google::protobuf::RepeatedPtrField< ::TagAliasBatchQuery::OpsUnit >*
TagAliasQuery::mutable_query() {
  return &query_;
}

// -------------------------------------------------------------------

// TagAliasQueryII

// optional int64 reqNo = 1;
inline bool TagAliasQueryII::has_reqno() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void TagAliasQueryII::set_has_reqno() {
  _has_bits_[0] |= 0x00000001u;
}
inline void TagAliasQueryII::clear_has_reqno() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void TagAliasQueryII::clear_reqno() {
  reqno_ = GOOGLE_LONGLONG(0);
  clear_has_reqno();
}
inline ::google::protobuf::int64 TagAliasQueryII::reqno() const {
  return reqno_;
}
inline void TagAliasQueryII::set_reqno(::google::protobuf::int64 value) {
  set_has_reqno();
  reqno_ = value;
}

// optional int32 total = 2;
inline bool TagAliasQueryII::has_total() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void TagAliasQueryII::set_has_total() {
  _has_bits_[0] |= 0x00000002u;
}
inline void TagAliasQueryII::clear_has_total() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void TagAliasQueryII::clear_total() {
  total_ = 0;
  clear_has_total();
}
inline ::google::protobuf::int32 TagAliasQueryII::total() const {
  return total_;
}
inline void TagAliasQueryII::set_total(::google::protobuf::int32 value) {
  set_has_total();
  total_ = value;
}

// optional int32 page = 3;
inline bool TagAliasQueryII::has_page() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void TagAliasQueryII::set_has_page() {
  _has_bits_[0] |= 0x00000004u;
}
inline void TagAliasQueryII::clear_has_page() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void TagAliasQueryII::clear_page() {
  page_ = 0;
  clear_has_page();
}
inline ::google::protobuf::int32 TagAliasQueryII::page() const {
  return page_;
}
inline void TagAliasQueryII::set_page(::google::protobuf::int32 value) {
  set_has_page();
  page_ = value;
}

// optional .QUERY_ACTION cmd = 4;
inline bool TagAliasQueryII::has_cmd() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void TagAliasQueryII::set_has_cmd() {
  _has_bits_[0] |= 0x00000008u;
}
inline void TagAliasQueryII::clear_has_cmd() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void TagAliasQueryII::clear_cmd() {
  cmd_ = 1;
  clear_has_cmd();
}
inline ::QUERY_ACTION TagAliasQueryII::cmd() const {
  return static_cast< ::QUERY_ACTION >(cmd_);
}
inline void TagAliasQueryII::set_cmd(::QUERY_ACTION value) {
  assert(::QUERY_ACTION_IsValid(value));
  set_has_cmd();
  cmd_ = value;
}

// optional bytes queryK = 5;
inline bool TagAliasQueryII::has_queryk() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void TagAliasQueryII::set_has_queryk() {
  _has_bits_[0] |= 0x00000010u;
}
inline void TagAliasQueryII::clear_has_queryk() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void TagAliasQueryII::clear_queryk() {
  if (queryk_ != &::google::protobuf::internal::kEmptyString) {
    queryk_->clear();
  }
  clear_has_queryk();
}
inline const ::std::string& TagAliasQueryII::queryk() const {
  return *queryk_;
}
inline void TagAliasQueryII::set_queryk(const ::std::string& value) {
  set_has_queryk();
  if (queryk_ == &::google::protobuf::internal::kEmptyString) {
    queryk_ = new ::std::string;
  }
  queryk_->assign(value);
}
inline void TagAliasQueryII::set_queryk(const char* value) {
  set_has_queryk();
  if (queryk_ == &::google::protobuf::internal::kEmptyString) {
    queryk_ = new ::std::string;
  }
  queryk_->assign(value);
}
inline void TagAliasQueryII::set_queryk(const void* value, size_t size) {
  set_has_queryk();
  if (queryk_ == &::google::protobuf::internal::kEmptyString) {
    queryk_ = new ::std::string;
  }
  queryk_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* TagAliasQueryII::mutable_queryk() {
  set_has_queryk();
  if (queryk_ == &::google::protobuf::internal::kEmptyString) {
    queryk_ = new ::std::string;
  }
  return queryk_;
}
inline ::std::string* TagAliasQueryII::release_queryk() {
  clear_has_queryk();
  if (queryk_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = queryk_;
    queryk_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void TagAliasQueryII::set_allocated_queryk(::std::string* queryk) {
  if (queryk_ != &::google::protobuf::internal::kEmptyString) {
    delete queryk_;
  }
  if (queryk) {
    set_has_queryk();
    queryk_ = queryk;
  } else {
    clear_has_queryk();
    queryk_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// -------------------------------------------------------------------

// TagAlsResult

// optional .QUERY_ACTION req_type = 1;
inline bool TagAlsResult::has_req_type() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void TagAlsResult::set_has_req_type() {
  _has_bits_[0] |= 0x00000001u;
}
inline void TagAlsResult::clear_has_req_type() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void TagAlsResult::clear_req_type() {
  req_type_ = 1;
  clear_has_req_type();
}
inline ::QUERY_ACTION TagAlsResult::req_type() const {
  return static_cast< ::QUERY_ACTION >(req_type_);
}
inline void TagAlsResult::set_req_type(::QUERY_ACTION value) {
  assert(::QUERY_ACTION_IsValid(value));
  set_has_req_type();
  req_type_ = value;
}

// optional .STATUS code = 2 [default = SUCCESS];
inline bool TagAlsResult::has_code() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void TagAlsResult::set_has_code() {
  _has_bits_[0] |= 0x00000002u;
}
inline void TagAlsResult::clear_has_code() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void TagAlsResult::clear_code() {
  code_ = 0;
  clear_has_code();
}
inline ::STATUS TagAlsResult::code() const {
  return static_cast< ::STATUS >(code_);
}
inline void TagAlsResult::set_code(::STATUS value) {
  assert(::STATUS_IsValid(value));
  set_has_code();
  code_ = value;
}

// optional bytes msg = 3 [default = "SUCCESS"];
inline bool TagAlsResult::has_msg() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void TagAlsResult::set_has_msg() {
  _has_bits_[0] |= 0x00000004u;
}
inline void TagAlsResult::clear_has_msg() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void TagAlsResult::clear_msg() {
  if (msg_ != _default_msg_) {
    msg_->assign(*_default_msg_);
  }
  clear_has_msg();
}
inline const ::std::string& TagAlsResult::msg() const {
  return *msg_;
}
inline void TagAlsResult::set_msg(const ::std::string& value) {
  set_has_msg();
  if (msg_ == _default_msg_) {
    msg_ = new ::std::string;
  }
  msg_->assign(value);
}
inline void TagAlsResult::set_msg(const char* value) {
  set_has_msg();
  if (msg_ == _default_msg_) {
    msg_ = new ::std::string;
  }
  msg_->assign(value);
}
inline void TagAlsResult::set_msg(const void* value, size_t size) {
  set_has_msg();
  if (msg_ == _default_msg_) {
    msg_ = new ::std::string;
  }
  msg_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* TagAlsResult::mutable_msg() {
  set_has_msg();
  if (msg_ == _default_msg_) {
    msg_ = new ::std::string(*_default_msg_);
  }
  return msg_;
}
inline ::std::string* TagAlsResult::release_msg() {
  clear_has_msg();
  if (msg_ == _default_msg_) {
    return NULL;
  } else {
    ::std::string* temp = msg_;
    msg_ = const_cast< ::std::string*>(_default_msg_);
    return temp;
  }
}
inline void TagAlsResult::set_allocated_msg(::std::string* msg) {
  if (msg_ != _default_msg_) {
    delete msg_;
  }
  if (msg) {
    set_has_msg();
    msg_ = msg;
  } else {
    clear_has_msg();
    msg_ = const_cast< ::std::string*>(_default_msg_);
  }
}

// optional int32 total = 4 [default = 1];
inline bool TagAlsResult::has_total() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void TagAlsResult::set_has_total() {
  _has_bits_[0] |= 0x00000008u;
}
inline void TagAlsResult::clear_has_total() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void TagAlsResult::clear_total() {
  total_ = 1;
  clear_has_total();
}
inline ::google::protobuf::int32 TagAlsResult::total() const {
  return total_;
}
inline void TagAlsResult::set_total(::google::protobuf::int32 value) {
  set_has_total();
  total_ = value;
}

// optional int32 cur = 5 [default = 1];
inline bool TagAlsResult::has_cur() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void TagAlsResult::set_has_cur() {
  _has_bits_[0] |= 0x00000010u;
}
inline void TagAlsResult::clear_has_cur() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void TagAlsResult::clear_cur() {
  cur_ = 1;
  clear_has_cur();
}
inline ::google::protobuf::int32 TagAlsResult::cur() const {
  return cur_;
}
inline void TagAlsResult::set_cur(::google::protobuf::int32 value) {
  set_has_cur();
  cur_ = value;
}

// optional uint32 expired = 6;
inline bool TagAlsResult::has_expired() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void TagAlsResult::set_has_expired() {
  _has_bits_[0] |= 0x00000020u;
}
inline void TagAlsResult::clear_has_expired() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void TagAlsResult::clear_expired() {
  expired_ = 0u;
  clear_has_expired();
}
inline ::google::protobuf::uint32 TagAlsResult::expired() const {
  return expired_;
}
inline void TagAlsResult::set_expired(::google::protobuf::uint32 value) {
  set_has_expired();
  expired_ = value;
}

// optional bytes queryK = 7;
inline bool TagAlsResult::has_queryk() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void TagAlsResult::set_has_queryk() {
  _has_bits_[0] |= 0x00000040u;
}
inline void TagAlsResult::clear_has_queryk() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void TagAlsResult::clear_queryk() {
  if (queryk_ != &::google::protobuf::internal::kEmptyString) {
    queryk_->clear();
  }
  clear_has_queryk();
}
inline const ::std::string& TagAlsResult::queryk() const {
  return *queryk_;
}
inline void TagAlsResult::set_queryk(const ::std::string& value) {
  set_has_queryk();
  if (queryk_ == &::google::protobuf::internal::kEmptyString) {
    queryk_ = new ::std::string;
  }
  queryk_->assign(value);
}
inline void TagAlsResult::set_queryk(const char* value) {
  set_has_queryk();
  if (queryk_ == &::google::protobuf::internal::kEmptyString) {
    queryk_ = new ::std::string;
  }
  queryk_->assign(value);
}
inline void TagAlsResult::set_queryk(const void* value, size_t size) {
  set_has_queryk();
  if (queryk_ == &::google::protobuf::internal::kEmptyString) {
    queryk_ = new ::std::string;
  }
  queryk_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* TagAlsResult::mutable_queryk() {
  set_has_queryk();
  if (queryk_ == &::google::protobuf::internal::kEmptyString) {
    queryk_ = new ::std::string;
  }
  return queryk_;
}
inline ::std::string* TagAlsResult::release_queryk() {
  clear_has_queryk();
  if (queryk_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = queryk_;
    queryk_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void TagAlsResult::set_allocated_queryk(::std::string* queryk) {
  if (queryk_ != &::google::protobuf::internal::kEmptyString) {
    delete queryk_;
  }
  if (queryk) {
    set_has_queryk();
    queryk_ = queryk;
  } else {
    clear_has_queryk();
    queryk_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// repeated int64 uid = 8;
inline int TagAlsResult::uid_size() const {
  return uid_.size();
}
inline void TagAlsResult::clear_uid() {
  uid_.Clear();
}
inline ::google::protobuf::int64 TagAlsResult::uid(int index) const {
  return uid_.Get(index);
}
inline void TagAlsResult::set_uid(int index, ::google::protobuf::int64 value) {
  uid_.Set(index, value);
}
inline void TagAlsResult::add_uid(::google::protobuf::int64 value) {
  uid_.Add(value);
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::int64 >&
TagAlsResult::uid() const {
  return uid_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::int64 >*
TagAlsResult::mutable_uid() {
  return &uid_;
}

// repeated int64 ouid = 9;
inline int TagAlsResult::ouid_size() const {
  return ouid_.size();
}
inline void TagAlsResult::clear_ouid() {
  ouid_.Clear();
}
inline ::google::protobuf::int64 TagAlsResult::ouid(int index) const {
  return ouid_.Get(index);
}
inline void TagAlsResult::set_ouid(int index, ::google::protobuf::int64 value) {
  ouid_.Set(index, value);
}
inline void TagAlsResult::add_ouid(::google::protobuf::int64 value) {
  ouid_.Add(value);
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::int64 >&
TagAlsResult::ouid() const {
  return ouid_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::int64 >*
TagAlsResult::mutable_ouid() {
  return &ouid_;
}

// optional int32 uid_count = 10;
inline bool TagAlsResult::has_uid_count() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
inline void TagAlsResult::set_has_uid_count() {
  _has_bits_[0] |= 0x00000200u;
}
inline void TagAlsResult::clear_has_uid_count() {
  _has_bits_[0] &= ~0x00000200u;
}
inline void TagAlsResult::clear_uid_count() {
  uid_count_ = 0;
  clear_has_uid_count();
}
inline ::google::protobuf::int32 TagAlsResult::uid_count() const {
  return uid_count_;
}
inline void TagAlsResult::set_uid_count(::google::protobuf::int32 value) {
  set_has_uid_count();
  uid_count_ = value;
}

// repeated bytes tags = 11;
inline int TagAlsResult::tags_size() const {
  return tags_.size();
}
inline void TagAlsResult::clear_tags() {
  tags_.Clear();
}
inline const ::std::string& TagAlsResult::tags(int index) const {
  return tags_.Get(index);
}
inline ::std::string* TagAlsResult::mutable_tags(int index) {
  return tags_.Mutable(index);
}
inline void TagAlsResult::set_tags(int index, const ::std::string& value) {
  tags_.Mutable(index)->assign(value);
}
inline void TagAlsResult::set_tags(int index, const char* value) {
  tags_.Mutable(index)->assign(value);
}
inline void TagAlsResult::set_tags(int index, const void* value, size_t size) {
  tags_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
}
inline ::std::string* TagAlsResult::add_tags() {
  return tags_.Add();
}
inline void TagAlsResult::add_tags(const ::std::string& value) {
  tags_.Add()->assign(value);
}
inline void TagAlsResult::add_tags(const char* value) {
  tags_.Add()->assign(value);
}
inline void TagAlsResult::add_tags(const void* value, size_t size) {
  tags_.Add()->assign(reinterpret_cast<const char*>(value), size);
}
inline const ::google::protobuf::RepeatedPtrField< ::std::string>&
TagAlsResult::tags() const {
  return tags_;
}
inline ::google::protobuf::RepeatedPtrField< ::std::string>*
TagAlsResult::mutable_tags() {
  return &tags_;
}

// repeated bytes alias = 12;
inline int TagAlsResult::alias_size() const {
  return alias_.size();
}
inline void TagAlsResult::clear_alias() {
  alias_.Clear();
}
inline const ::std::string& TagAlsResult::alias(int index) const {
  return alias_.Get(index);
}
inline ::std::string* TagAlsResult::mutable_alias(int index) {
  return alias_.Mutable(index);
}
inline void TagAlsResult::set_alias(int index, const ::std::string& value) {
  alias_.Mutable(index)->assign(value);
}
inline void TagAlsResult::set_alias(int index, const char* value) {
  alias_.Mutable(index)->assign(value);
}
inline void TagAlsResult::set_alias(int index, const void* value, size_t size) {
  alias_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
}
inline ::std::string* TagAlsResult::add_alias() {
  return alias_.Add();
}
inline void TagAlsResult::add_alias(const ::std::string& value) {
  alias_.Add()->assign(value);
}
inline void TagAlsResult::add_alias(const char* value) {
  alias_.Add()->assign(value);
}
inline void TagAlsResult::add_alias(const void* value, size_t size) {
  alias_.Add()->assign(reinterpret_cast<const char*>(value), size);
}
inline const ::google::protobuf::RepeatedPtrField< ::std::string>&
TagAlsResult::alias() const {
  return alias_;
}
inline ::google::protobuf::RepeatedPtrField< ::std::string>*
TagAlsResult::mutable_alias() {
  return &alias_;
}

// optional .DEVSUBTYPE dev_type = 13 [default = NORMAL_TYPE];
inline bool TagAlsResult::has_dev_type() const {
  return (_has_bits_[0] & 0x00001000u) != 0;
}
inline void TagAlsResult::set_has_dev_type() {
  _has_bits_[0] |= 0x00001000u;
}
inline void TagAlsResult::clear_has_dev_type() {
  _has_bits_[0] &= ~0x00001000u;
}
inline void TagAlsResult::clear_dev_type() {
  dev_type_ = 1;
  clear_has_dev_type();
}
inline ::DEVSUBTYPE TagAlsResult::dev_type() const {
  return static_cast< ::DEVSUBTYPE >(dev_type_);
}
inline void TagAlsResult::set_dev_type(::DEVSUBTYPE value) {
  assert(::DEVSUBTYPE_IsValid(value));
  set_has_dev_type();
  dev_type_ = value;
}

// -------------------------------------------------------------------

// TagAlsResp

// optional int64 reqNo = 1;
inline bool TagAlsResp::has_reqno() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void TagAlsResp::set_has_reqno() {
  _has_bits_[0] |= 0x00000001u;
}
inline void TagAlsResp::clear_has_reqno() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void TagAlsResp::clear_reqno() {
  reqno_ = GOOGLE_LONGLONG(0);
  clear_has_reqno();
}
inline ::google::protobuf::int64 TagAlsResp::reqno() const {
  return reqno_;
}
inline void TagAlsResp::set_reqno(::google::protobuf::int64 value) {
  set_has_reqno();
  reqno_ = value;
}

// optional int32 code = 2;
inline bool TagAlsResp::has_code() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void TagAlsResp::set_has_code() {
  _has_bits_[0] |= 0x00000002u;
}
inline void TagAlsResp::clear_has_code() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void TagAlsResp::clear_code() {
  code_ = 0;
  clear_has_code();
}
inline ::google::protobuf::int32 TagAlsResp::code() const {
  return code_;
}
inline void TagAlsResp::set_code(::google::protobuf::int32 value) {
  set_has_code();
  code_ = value;
}

// optional bytes appkey = 3;
inline bool TagAlsResp::has_appkey() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void TagAlsResp::set_has_appkey() {
  _has_bits_[0] |= 0x00000004u;
}
inline void TagAlsResp::clear_has_appkey() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void TagAlsResp::clear_appkey() {
  if (appkey_ != &::google::protobuf::internal::kEmptyString) {
    appkey_->clear();
  }
  clear_has_appkey();
}
inline const ::std::string& TagAlsResp::appkey() const {
  return *appkey_;
}
inline void TagAlsResp::set_appkey(const ::std::string& value) {
  set_has_appkey();
  if (appkey_ == &::google::protobuf::internal::kEmptyString) {
    appkey_ = new ::std::string;
  }
  appkey_->assign(value);
}
inline void TagAlsResp::set_appkey(const char* value) {
  set_has_appkey();
  if (appkey_ == &::google::protobuf::internal::kEmptyString) {
    appkey_ = new ::std::string;
  }
  appkey_->assign(value);
}
inline void TagAlsResp::set_appkey(const void* value, size_t size) {
  set_has_appkey();
  if (appkey_ == &::google::protobuf::internal::kEmptyString) {
    appkey_ = new ::std::string;
  }
  appkey_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* TagAlsResp::mutable_appkey() {
  set_has_appkey();
  if (appkey_ == &::google::protobuf::internal::kEmptyString) {
    appkey_ = new ::std::string;
  }
  return appkey_;
}
inline ::std::string* TagAlsResp::release_appkey() {
  clear_has_appkey();
  if (appkey_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = appkey_;
    appkey_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void TagAlsResp::set_allocated_appkey(::std::string* appkey) {
  if (appkey_ != &::google::protobuf::internal::kEmptyString) {
    delete appkey_;
  }
  if (appkey) {
    set_has_appkey();
    appkey_ = appkey;
  } else {
    clear_has_appkey();
    appkey_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional .PLATFORM platform = 4;
inline bool TagAlsResp::has_platform() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void TagAlsResp::set_has_platform() {
  _has_bits_[0] |= 0x00000008u;
}
inline void TagAlsResp::clear_has_platform() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void TagAlsResp::clear_platform() {
  platform_ = 0;
  clear_has_platform();
}
inline ::PLATFORM TagAlsResp::platform() const {
  return static_cast< ::PLATFORM >(platform_);
}
inline void TagAlsResp::set_platform(::PLATFORM value) {
  assert(::PLATFORM_IsValid(value));
  set_has_platform();
  platform_ = value;
}

// repeated .TagAliasBatchQuery.TagAlsResult result = 5;
inline int TagAlsResp::result_size() const {
  return result_.size();
}
inline void TagAlsResp::clear_result() {
  result_.Clear();
}
inline const ::TagAliasBatchQuery::TagAlsResult& TagAlsResp::result(int index) const {
  return result_.Get(index);
}
inline ::TagAliasBatchQuery::TagAlsResult* TagAlsResp::mutable_result(int index) {
  return result_.Mutable(index);
}
inline ::TagAliasBatchQuery::TagAlsResult* TagAlsResp::add_result() {
  return result_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::TagAliasBatchQuery::TagAlsResult >&
TagAlsResp::result() const {
  return result_;
}
inline ::google::protobuf::RepeatedPtrField< ::TagAliasBatchQuery::TagAlsResult >*
TagAlsResp::mutable_result() {
  return &result_;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace TagAliasBatchQuery

#ifndef SWIG
namespace google {
namespace protobuf {


}  // namespace google
}  // namespace protobuf
#endif  // SWIG

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_tagalias_5fquery_5finterface_2eproto__INCLUDED
