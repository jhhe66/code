// Code generated by protoc-gen-go.
// source: HT_online_head.proto
// DO NOT EDIT!

/*
Package ht_online is a generated protocol buffer package.

It is generated from these files:
	HT_online_head.proto
	HT_online_body.proto

It has these top-level messages:
	ReqBody
	RspBody
	OnlineState
	UpdateOnlineReqBody
	UpdateOnlineRspBody
	GetOnlineReqBody
	GetOnlineRspBody
	QueryOnlineReqBody
	QueryOnlineRspBody
*/
package ht_online

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

// 根据不同的cmd_type来使用不同的body
type CMD_TYPE int32

const (
	CMD_TYPE_CMD_UPDATE_ONLINE CMD_TYPE = 1
	CMD_TYPE_CMD_GET_ONLINE    CMD_TYPE = 2
	CMD_TYPE_CMD_QUERY_ONLINE  CMD_TYPE = 3
)

var CMD_TYPE_name = map[int32]string{
	1: "CMD_UPDATE_ONLINE",
	2: "CMD_GET_ONLINE",
	3: "CMD_QUERY_ONLINE",
}
var CMD_TYPE_value = map[string]int32{
	"CMD_UPDATE_ONLINE": 1,
	"CMD_GET_ONLINE":    2,
	"CMD_QUERY_ONLINE":  3,
}

func (x CMD_TYPE) Enum() *CMD_TYPE {
	p := new(CMD_TYPE)
	*p = x
	return p
}
func (x CMD_TYPE) String() string {
	return proto.EnumName(CMD_TYPE_name, int32(x))
}
func (x *CMD_TYPE) UnmarshalJSON(data []byte) error {
	value, err := proto.UnmarshalJSONEnum(CMD_TYPE_value, data, "CMD_TYPE")
	if err != nil {
		return err
	}
	*x = CMD_TYPE(value)
	return nil
}
func (CMD_TYPE) EnumDescriptor() ([]byte, []int) { return fileDescriptor0, []int{0} }

type SYS_TYPE int32

const (
	SYS_TYPE_SYS_IM_SERVER      SYS_TYPE = 1
	SYS_TYPE_SYS_VOIP_SERVER    SYS_TYPE = 2
	SYS_TYPE_SYS_MUC_SERVER     SYS_TYPE = 3
	SYS_TYPE_SYS_OFFLINE_SERVER SYS_TYPE = 4
	SYS_TYPE_SYS_TYPE_TOOL      SYS_TYPE = 20
)

var SYS_TYPE_name = map[int32]string{
	1:  "SYS_IM_SERVER",
	2:  "SYS_VOIP_SERVER",
	3:  "SYS_MUC_SERVER",
	4:  "SYS_OFFLINE_SERVER",
	20: "SYS_TYPE_TOOL",
}
var SYS_TYPE_value = map[string]int32{
	"SYS_IM_SERVER":      1,
	"SYS_VOIP_SERVER":    2,
	"SYS_MUC_SERVER":     3,
	"SYS_OFFLINE_SERVER": 4,
	"SYS_TYPE_TOOL":      20,
}

func (x SYS_TYPE) Enum() *SYS_TYPE {
	p := new(SYS_TYPE)
	*p = x
	return p
}
func (x SYS_TYPE) String() string {
	return proto.EnumName(SYS_TYPE_name, int32(x))
}
func (x *SYS_TYPE) UnmarshalJSON(data []byte) error {
	value, err := proto.UnmarshalJSONEnum(SYS_TYPE_value, data, "SYS_TYPE")
	if err != nil {
		return err
	}
	*x = SYS_TYPE(value)
	return nil
}
func (SYS_TYPE) EnumDescriptor() ([]byte, []int) { return fileDescriptor0, []int{1} }

type RET_CODE int32

const (
	RET_CODE_RET_SUCCESS          RET_CODE = 0
	RET_CODE_RET_NOT_EXIST        RET_CODE = 100
	RET_CODE_RET_PB_ERR           RET_CODE = 500
	RET_CODE_RET_INTERNAL_ERR     RET_CODE = 501
	RET_CODE_RET_SESS_TIMEOUT_ERR RET_CODE = 502
	RET_CODE_RET_INPUT_PARAM_ERR  RET_CODE = 503
)

var RET_CODE_name = map[int32]string{
	0:   "RET_SUCCESS",
	100: "RET_NOT_EXIST",
	500: "RET_PB_ERR",
	501: "RET_INTERNAL_ERR",
	502: "RET_SESS_TIMEOUT_ERR",
	503: "RET_INPUT_PARAM_ERR",
}
var RET_CODE_value = map[string]int32{
	"RET_SUCCESS":          0,
	"RET_NOT_EXIST":        100,
	"RET_PB_ERR":           500,
	"RET_INTERNAL_ERR":     501,
	"RET_SESS_TIMEOUT_ERR": 502,
	"RET_INPUT_PARAM_ERR":  503,
}

func (x RET_CODE) Enum() *RET_CODE {
	p := new(RET_CODE)
	*p = x
	return p
}
func (x RET_CODE) String() string {
	return proto.EnumName(RET_CODE_name, int32(x))
}
func (x *RET_CODE) UnmarshalJSON(data []byte) error {
	value, err := proto.UnmarshalJSONEnum(RET_CODE_value, data, "RET_CODE")
	if err != nil {
		return err
	}
	*x = RET_CODE(value)
	return nil
}
func (RET_CODE) EnumDescriptor() ([]byte, []int) { return fileDescriptor0, []int{2} }

type TERMINAL_TYPE int32

const (
	TERMINAL_TYPE_TT_IOS     TERMINAL_TYPE = 0
	TERMINAL_TYPE_TT_ANDROID TERMINAL_TYPE = 1
	TERMINAL_TYPE_TT_UNKNOW  TERMINAL_TYPE = 255
)

var TERMINAL_TYPE_name = map[int32]string{
	0:   "TT_IOS",
	1:   "TT_ANDROID",
	255: "TT_UNKNOW",
}
var TERMINAL_TYPE_value = map[string]int32{
	"TT_IOS":     0,
	"TT_ANDROID": 1,
	"TT_UNKNOW":  255,
}

func (x TERMINAL_TYPE) Enum() *TERMINAL_TYPE {
	p := new(TERMINAL_TYPE)
	*p = x
	return p
}
func (x TERMINAL_TYPE) String() string {
	return proto.EnumName(TERMINAL_TYPE_name, int32(x))
}
func (x *TERMINAL_TYPE) UnmarshalJSON(data []byte) error {
	value, err := proto.UnmarshalJSONEnum(TERMINAL_TYPE_value, data, "TERMINAL_TYPE")
	if err != nil {
		return err
	}
	*x = TERMINAL_TYPE(value)
	return nil
}
func (TERMINAL_TYPE) EnumDescriptor() ([]byte, []int) { return fileDescriptor0, []int{3} }

type ReqBody struct {
	UpdateOnlineReqbody *UpdateOnlineReqBody `protobuf:"bytes,1,opt,name=update_online_reqbody" json:"update_online_reqbody,omitempty"`
	GetOnlineReqbody    *GetOnlineReqBody    `protobuf:"bytes,2,opt,name=get_online_reqbody" json:"get_online_reqbody,omitempty"`
	QueryOnlineReqbody  *QueryOnlineReqBody  `protobuf:"bytes,3,opt,name=query_online_reqbody" json:"query_online_reqbody,omitempty"`
	XXX_unrecognized    []byte               `json:"-"`
}

func (m *ReqBody) Reset()                    { *m = ReqBody{} }
func (m *ReqBody) String() string            { return proto.CompactTextString(m) }
func (*ReqBody) ProtoMessage()               {}
func (*ReqBody) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{0} }

func (m *ReqBody) GetUpdateOnlineReqbody() *UpdateOnlineReqBody {
	if m != nil {
		return m.UpdateOnlineReqbody
	}
	return nil
}

func (m *ReqBody) GetGetOnlineReqbody() *GetOnlineReqBody {
	if m != nil {
		return m.GetOnlineReqbody
	}
	return nil
}

func (m *ReqBody) GetQueryOnlineReqbody() *QueryOnlineReqBody {
	if m != nil {
		return m.QueryOnlineReqbody
	}
	return nil
}

type RspBody struct {
	UpdateOnlineRspbody *UpdateOnlineRspBody `protobuf:"bytes,1,opt,name=update_online_rspbody" json:"update_online_rspbody,omitempty"`
	GetOnlineRspbody    *GetOnlineRspBody    `protobuf:"bytes,2,opt,name=get_online_rspbody" json:"get_online_rspbody,omitempty"`
	QueryOnlineRspbody  *QueryOnlineRspBody  `protobuf:"bytes,3,opt,name=query_online_rspbody" json:"query_online_rspbody,omitempty"`
	XXX_unrecognized    []byte               `json:"-"`
}

func (m *RspBody) Reset()                    { *m = RspBody{} }
func (m *RspBody) String() string            { return proto.CompactTextString(m) }
func (*RspBody) ProtoMessage()               {}
func (*RspBody) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{1} }

func (m *RspBody) GetUpdateOnlineRspbody() *UpdateOnlineRspBody {
	if m != nil {
		return m.UpdateOnlineRspbody
	}
	return nil
}

func (m *RspBody) GetGetOnlineRspbody() *GetOnlineRspBody {
	if m != nil {
		return m.GetOnlineRspbody
	}
	return nil
}

func (m *RspBody) GetQueryOnlineRspbody() *QueryOnlineRspBody {
	if m != nil {
		return m.QueryOnlineRspbody
	}
	return nil
}

func init() {
	proto.RegisterType((*ReqBody)(nil), "ht.online.ReqBody")
	proto.RegisterType((*RspBody)(nil), "ht.online.RspBody")
	proto.RegisterEnum("ht.online.CMD_TYPE", CMD_TYPE_name, CMD_TYPE_value)
	proto.RegisterEnum("ht.online.SYS_TYPE", SYS_TYPE_name, SYS_TYPE_value)
	proto.RegisterEnum("ht.online.RET_CODE", RET_CODE_name, RET_CODE_value)
	proto.RegisterEnum("ht.online.TERMINAL_TYPE", TERMINAL_TYPE_name, TERMINAL_TYPE_value)
}

func init() { proto.RegisterFile("HT_online_head.proto", fileDescriptor0) }

var fileDescriptor0 = []byte{
	// 442 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x09, 0x6e, 0x88, 0x02, 0xff, 0x8c, 0x90, 0x4f, 0x6f, 0xd3, 0x30,
	0x18, 0xc6, 0x49, 0x83, 0xa0, 0x7b, 0xa7, 0x75, 0x9e, 0x97, 0xa1, 0x01, 0x02, 0x21, 0x4e, 0xa8,
	0x87, 0x1e, 0xb8, 0x70, 0x98, 0x38, 0x64, 0x89, 0x37, 0xac, 0x35, 0x76, 0xe6, 0x38, 0x83, 0x9e,
	0xac, 0xa1, 0x5a, 0x0c, 0x09, 0xad, 0x7f, 0x96, 0x1d, 0xf6, 0x19, 0xf8, 0x4e, 0x7c, 0x2a, 0xfe,
	0x1c, 0xc1, 0xaf, 0x53, 0xa3, 0xae, 0x88, 0x6a, 0xb7, 0x37, 0xbf, 0x3c, 0xbf, 0x47, 0x79, 0x02,
	0xc9, 0x3b, 0x6d, 0x26, 0x97, 0x5f, 0x3e, 0x5f, 0x5a, 0x73, 0x61, 0xcf, 0xc7, 0x83, 0xe9, 0x7c,
	0xd2, 0x4c, 0xe8, 0xc6, 0x45, 0x33, 0x68, 0xe9, 0x93, 0xa5, 0xc0, 0xc7, 0xc9, 0xf8, 0xa6, 0x0d,
	0xbc, 0xfc, 0x16, 0xc1, 0x43, 0x65, 0x67, 0x87, 0x8e, 0xd0, 0xb7, 0xb0, 0x77, 0x3d, 0x1d, 0x9f,
	0x37, 0x36, 0xe4, 0xe6, 0x76, 0x86, 0xd1, 0xfd, 0xe8, 0x45, 0xf4, 0x6a, 0xf3, 0xf5, 0xf3, 0xc1,
	0xdf, 0xb2, 0x41, 0xed, 0x73, 0xd2, 0x3f, 0x04, 0xfd, 0x0d, 0xd0, 0x4f, 0xb6, 0x59, 0x75, 0x3b,
	0xde, 0x7d, 0xba, 0xe4, 0x1e, 0xdb, 0xe6, 0xb6, 0x78, 0x00, 0xc9, 0xec, 0xda, 0xce, 0x6f, 0x56,
	0xd5, 0xd8, 0xab, 0xcf, 0x96, 0xd4, 0x53, 0x8c, 0xdd, 0x92, 0xdb, 0x01, 0x57, 0xd3, 0xff, 0x0c,
	0xb8, 0x9a, 0xde, 0x65, 0xc0, 0x42, 0x5f, 0x19, 0xb0, 0x70, 0xd7, 0x0d, 0x58, 0x88, 0xff, 0x0c,
	0x58, 0xa8, 0xeb, 0x07, 0xb4, 0x72, 0xff, 0x04, 0xba, 0x59, 0x91, 0x1b, 0x3d, 0x2a, 0x19, 0xdd,
	0x83, 0x1d, 0xbc, 0xeb, 0x32, 0x4f, 0x35, 0x33, 0x52, 0x0c, 0xb9, 0x60, 0x24, 0xa2, 0x14, 0x7a,
	0x88, 0x8f, 0x99, 0x0e, 0xac, 0x43, 0x13, 0x20, 0xc8, 0x4e, 0x6b, 0xa6, 0x46, 0x81, 0xc6, 0xfd,
	0x19, 0x74, 0xab, 0x51, 0xd5, 0x96, 0xed, 0xc0, 0x16, 0xde, 0xbc, 0x30, 0x15, 0x53, 0x67, 0x4c,
	0xb9, 0xa2, 0x5d, 0xd8, 0x46, 0x74, 0x26, 0x79, 0x19, 0x60, 0x07, 0xdb, 0x11, 0x16, 0x75, 0x16,
	0x58, 0x4c, 0x1f, 0x01, 0x45, 0x26, 0x8f, 0x8e, 0xb0, 0x38, 0xf0, 0xfb, 0xa1, 0x13, 0xfb, 0x8d,
	0x96, 0x72, 0x48, 0x92, 0xfe, 0xd7, 0x08, 0xba, 0xca, 0x7d, 0x59, 0x26, 0x73, 0x46, 0xb7, 0x61,
	0x13, 0xef, 0xaa, 0xce, 0x32, 0x56, 0x55, 0xe4, 0x1e, 0x0a, 0x08, 0x84, 0xd4, 0x86, 0x7d, 0xe0,
	0x95, 0x26, 0x63, 0x97, 0x01, 0x44, 0xe5, 0xa1, 0x61, 0x4a, 0x91, 0xef, 0xb1, 0x5b, 0x4d, 0x10,
	0x70, 0xa1, 0x99, 0x12, 0xe9, 0xd0, 0xe3, 0x1f, 0x31, 0x7d, 0x0c, 0x89, 0xef, 0x72, 0x45, 0x46,
	0xf3, 0x82, 0xc9, 0x5a, 0xfb, 0x57, 0x3f, 0x63, 0xba, 0x0f, 0xbb, 0xad, 0x51, 0x3a, 0x56, 0xa6,
	0x2a, 0x2d, 0xfc, 0x9b, 0x5f, 0x71, 0xff, 0x00, 0xb6, 0x5c, 0x4b, 0xc1, 0xb1, 0xc7, 0xff, 0x05,
	0x80, 0x07, 0xda, 0x25, 0x25, 0x7e, 0x4c, 0x0f, 0xc0, 0xdd, 0xa9, 0xc8, 0x95, 0xe4, 0xb9, 0xfb,
	0x1d, 0x3d, 0xd8, 0x70, 0xcf, 0xb5, 0x38, 0x11, 0xf2, 0x3d, 0xf9, 0x1d, 0xfd, 0x09, 0x00, 0x00,
	0xff, 0xff, 0xf6, 0x7f, 0x91, 0x4c, 0x44, 0x03, 0x00, 0x00,
}
