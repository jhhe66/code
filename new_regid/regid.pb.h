// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: regid.proto

#ifndef PROTOBUF_regid_2eproto__INCLUDED
#define PROTOBUF_regid_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 2005000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 2005000 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)

namespace JPush {

// Internal implementation detail -- do not call these.
void  protobuf_AddDesc_regid_2eproto();
void protobuf_AssignDesc_regid_2eproto();
void protobuf_ShutdownFile_regid_2eproto();

class regid;

// ===================================================================

class regid : public ::google::protobuf::Message {
 public:
  regid();
  virtual ~regid();

  regid(const regid& from);

  inline regid& operator=(const regid& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const regid& default_instance();

  void Swap(regid* other);

  // implements Message ----------------------------------------------

  regid* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const regid& from);
  void MergeFrom(const regid& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required fixed64 version = 1;
  inline bool has_version() const;
  inline void clear_version();
  static const int kVersionFieldNumber = 1;
  inline ::google::protobuf::uint64 version() const;
  inline void set_version(::google::protobuf::uint64 value);

  // required bytes appkey = 2;
  inline bool has_appkey() const;
  inline void clear_appkey();
  static const int kAppkeyFieldNumber = 2;
  inline const ::std::string& appkey() const;
  inline void set_appkey(const ::std::string& value);
  inline void set_appkey(const char* value);
  inline void set_appkey(const void* value, size_t size);
  inline ::std::string* mutable_appkey();
  inline ::std::string* release_appkey();
  inline void set_allocated_appkey(::std::string* appkey);

  // required fixed64 uid = 3;
  inline bool has_uid() const;
  inline void clear_uid();
  static const int kUidFieldNumber = 3;
  inline ::google::protobuf::uint64 uid() const;
  inline void set_uid(::google::protobuf::uint64 value);

  // required fixed64 platform = 4;
  inline bool has_platform() const;
  inline void clear_platform();
  static const int kPlatformFieldNumber = 4;
  inline ::google::protobuf::uint64 platform() const;
  inline void set_platform(::google::protobuf::uint64 value);

  // @@protoc_insertion_point(class_scope:JPush.regid)
 private:
  inline void set_has_version();
  inline void clear_has_version();
  inline void set_has_appkey();
  inline void clear_has_appkey();
  inline void set_has_uid();
  inline void clear_has_uid();
  inline void set_has_platform();
  inline void clear_has_platform();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint64 version_;
  ::std::string* appkey_;
  ::google::protobuf::uint64 uid_;
  ::google::protobuf::uint64 platform_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(4 + 31) / 32];

  friend void  protobuf_AddDesc_regid_2eproto();
  friend void protobuf_AssignDesc_regid_2eproto();
  friend void protobuf_ShutdownFile_regid_2eproto();

  void InitAsDefaultInstance();
  static regid* default_instance_;
};
// ===================================================================


// ===================================================================

// regid

// required fixed64 version = 1;
inline bool regid::has_version() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void regid::set_has_version() {
  _has_bits_[0] |= 0x00000001u;
}
inline void regid::clear_has_version() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void regid::clear_version() {
  version_ = GOOGLE_ULONGLONG(0);
  clear_has_version();
}
inline ::google::protobuf::uint64 regid::version() const {
  return version_;
}
inline void regid::set_version(::google::protobuf::uint64 value) {
  set_has_version();
  version_ = value;
}

// required bytes appkey = 2;
inline bool regid::has_appkey() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void regid::set_has_appkey() {
  _has_bits_[0] |= 0x00000002u;
}
inline void regid::clear_has_appkey() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void regid::clear_appkey() {
  if (appkey_ != &::google::protobuf::internal::kEmptyString) {
    appkey_->clear();
  }
  clear_has_appkey();
}
inline const ::std::string& regid::appkey() const {
  return *appkey_;
}
inline void regid::set_appkey(const ::std::string& value) {
  set_has_appkey();
  if (appkey_ == &::google::protobuf::internal::kEmptyString) {
    appkey_ = new ::std::string;
  }
  appkey_->assign(value);
}
inline void regid::set_appkey(const char* value) {
  set_has_appkey();
  if (appkey_ == &::google::protobuf::internal::kEmptyString) {
    appkey_ = new ::std::string;
  }
  appkey_->assign(value);
}
inline void regid::set_appkey(const void* value, size_t size) {
  set_has_appkey();
  if (appkey_ == &::google::protobuf::internal::kEmptyString) {
    appkey_ = new ::std::string;
  }
  appkey_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* regid::mutable_appkey() {
  set_has_appkey();
  if (appkey_ == &::google::protobuf::internal::kEmptyString) {
    appkey_ = new ::std::string;
  }
  return appkey_;
}
inline ::std::string* regid::release_appkey() {
  clear_has_appkey();
  if (appkey_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = appkey_;
    appkey_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void regid::set_allocated_appkey(::std::string* appkey) {
  if (appkey_ != &::google::protobuf::internal::kEmptyString) {
    delete appkey_;
  }
  if (appkey) {
    set_has_appkey();
    appkey_ = appkey;
  } else {
    clear_has_appkey();
    appkey_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// required fixed64 uid = 3;
inline bool regid::has_uid() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void regid::set_has_uid() {
  _has_bits_[0] |= 0x00000004u;
}
inline void regid::clear_has_uid() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void regid::clear_uid() {
  uid_ = GOOGLE_ULONGLONG(0);
  clear_has_uid();
}
inline ::google::protobuf::uint64 regid::uid() const {
  return uid_;
}
inline void regid::set_uid(::google::protobuf::uint64 value) {
  set_has_uid();
  uid_ = value;
}

// required fixed64 platform = 4;
inline bool regid::has_platform() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void regid::set_has_platform() {
  _has_bits_[0] |= 0x00000008u;
}
inline void regid::clear_has_platform() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void regid::clear_platform() {
  platform_ = GOOGLE_ULONGLONG(0);
  clear_has_platform();
}
inline ::google::protobuf::uint64 regid::platform() const {
  return platform_;
}
inline void regid::set_platform(::google::protobuf::uint64 value) {
  set_has_platform();
  platform_ = value;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace JPush

#ifndef SWIG
namespace google {
namespace protobuf {


}  // namespace google
}  // namespace protobuf
#endif  // SWIG

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_regid_2eproto__INCLUDED
